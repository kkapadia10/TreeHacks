const DEFAULT_DELAY = 50;
export function debounce(func, delayOrOptions = DEFAULT_DELAY, options = {}) {
    let delay;
    if (typeof delayOrOptions === 'object') {
        options = delayOrOptions;
        delay = DEFAULT_DELAY;
    }
    else {
        delay = delayOrOptions;
    }
    const { leading } = options;
    let callTimeoutId;
    let delayed;
    let firstCallResetTimeoutId;
    let isFirstCall = true;
    return function (...args) {
        if (!delayed) {
            let resolve;
            const promise = new Promise(r => (resolve = r));
            delayed = { promise, resolve: resolve };
        }
        const { promise, resolve } = delayed;
        const runFunc = () => {
            resolve(func.apply(this, args));
            delayed = undefined;
        };
        if (leading && isFirstCall) {
            runFunc();
        }
        else {
            clearTimeout(callTimeoutId);
            callTimeoutId = setTimeout(runFunc, delay);
        }
        if (leading) {
            isFirstCall = false;
            clearTimeout(firstCallResetTimeoutId);
            firstCallResetTimeoutId = setTimeout(() => (isFirstCall = true), delay);
        }
        return promise;
    };
}
