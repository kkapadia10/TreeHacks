import { TypeXializer } from './type_xialiser';
export class TypeDeserializer extends TypeXializer {
    required(name, o) {
        const val = o[name];
        if (!this.isT(val)) {
            throw new TypeError(`expected ${this.type} for property "${name}", found: ${JSON.stringify(val)}`);
        }
        return val;
    }
    optional(name, o) {
        const val = o[name];
        if (val == null) {
            return undefined;
        }
        else if (typeof val !== this.type) {
            throw new TypeError(`expected optional ${this.type} for property "${name}", found: ${JSON.stringify(val)}`);
        }
        return val;
    }
    repeated(name, o) {
        const val = o[name];
        if (val == null) {
            return undefined;
        }
        else if (!this.isTs(val)) {
            throw new TypeError(`expected repeated ${this.type} for property "${name}", found: ${JSON.stringify(val)}`);
        }
        return val;
    }
}
TypeDeserializer.STRING = new TypeDeserializer('string');
TypeDeserializer.BOOLEAN = new TypeDeserializer('boolean');
TypeDeserializer.NUMBER = new TypeDeserializer('number');
TypeDeserializer.OBJECT = new TypeDeserializer('object');
