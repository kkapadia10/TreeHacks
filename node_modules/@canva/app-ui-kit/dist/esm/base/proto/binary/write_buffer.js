import { ProtobufError } from '../internal_types';
const floatBuffer = new DataView(new ArrayBuffer(8));
export class WriteBuffer {
    constructor(bufferSize = 512) {
        this.bufferSize = bufferSize;
        this.reservedSizes = [];
        this.pastBuffers = [];
        this.bufferIndex = 0;
        this.byteSize = 0;
        this.openReservations = 0;
        this.buffer = new Uint8Array(bufferSize);
    }
    createSizeReservation() {
        this.openReservations++;
        this.write(-1);
        const bufferIndex = this.bufferIndex - 1;
        const reservedSizes = this.reservedSizes;
        const startSize = this.byteSize;
        const sizeIndex = reservedSizes.push(bufferIndex, 0) - 1;
        return () => {
            const size = this.byteSize - startSize;
            reservedSizes[sizeIndex] = size;
            let value = size;
            while (value > 127) {
                this.byteSize++;
                value = value >>> 7;
            }
            this.openReservations--;
            return size;
        };
    }
    write(byte) {
        if (this.bufferIndex === this.bufferSize) {
            this.pastBuffers.push({ buffer: this.buffer, reservedSizes: this.reservedSizes });
            this.buffer = new Uint8Array(this.bufferSize);
            this.reservedSizes = [];
            this.bufferIndex = 0;
        }
        this.buffer[this.bufferIndex] = byte;
        this.bufferIndex++;
        this.byteSize++;
    }
    writeFloat(float) {
        floatBuffer.setFloat64(0, float, true);
        for (let i = 0; i < 8; ++i) {
            this.write(floatBuffer.getUint8(i));
        }
    }
    writeBytes(bytes) {
        for (let i = 0; i < bytes.length; ++i) {
            this.write(bytes[i]);
        }
    }
    flush() {
        if (this.openReservations) {
            throw new ProtobufError('Open size reservations open during close');
        }
        const flat = new Uint8Array(this.byteSize);
        let offset = 0;
        const buffers = [
            ...this.pastBuffers,
            {
                buffer: this.buffer,
                reservedSizes: this.reservedSizes,
            },
        ];
        for (const { buffer, reservedSizes } of buffers) {
            const bufferLength = buffer === this.buffer ? this.bufferIndex : this.bufferSize;
            let copyFrom = 0;
            for (let i = 0; i < reservedSizes.length; i += 2) {
                const sizeIndex = reservedSizes[i];
                let sizeValue = reservedSizes[i + 1];
                if (sizeValue < 127) {
                    buffer[sizeIndex] = sizeValue;
                    continue;
                }
                const copyAmount = sizeIndex - copyFrom;
                flat.set(new Uint8Array(buffer.buffer, copyFrom, copyAmount), offset);
                offset += copyAmount;
                copyFrom += copyAmount;
                while (sizeValue > 127) {
                    flat[offset++] = (sizeValue & 0x7f) | 0x80;
                    sizeValue = sizeValue >>> 7;
                }
                flat[offset++] = sizeValue;
                copyFrom += 1;
            }
            if (copyFrom < bufferLength) {
                const length = bufferLength - copyFrom;
                flat.set(new Uint8Array(buffer.buffer, copyFrom, length), offset);
                offset += length;
            }
        }
        this.buffer = new Uint8Array(this.bufferSize);
        this.pastBuffers = [];
        this.bufferIndex = 0;
        this.byteSize = 0;
        this.reservedSizes = [];
        this.openReservations = 0;
        return flat;
    }
}
