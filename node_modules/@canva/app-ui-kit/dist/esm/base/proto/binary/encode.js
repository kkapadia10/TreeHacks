import { BinaryConstants } from './constants';
let split64Low = 0;
let split64High = 0;
export class BinaryEncoder {
    static writeTag(buffer, fieldNumber, wireType) {
        return BinaryEncoder.writeUnsignedVarint32(buffer, (fieldNumber << 3) | wireType);
    }
    static writeSplitVarint64(buffer, lowBits, highBits) {
        assert(lowBits === Math.floor(lowBits));
        assert(highBits === Math.floor(highBits));
        assert(lowBits >= 0 && lowBits < BinaryConstants.TWO_TO_32);
        assert(highBits >= 0 && highBits < BinaryConstants.TWO_TO_32);
        while (highBits > 0 || lowBits > 127) {
            buffer.write((lowBits & 0x7f) | 0x80);
            lowBits = ((lowBits >>> 7) | (highBits << 25)) >>> 0;
            highBits = highBits >>> 7;
        }
        buffer.write(lowBits);
    }
    static writeUnsignedVarint32(buffer, value) {
        assert(value === Math.floor(value));
        assert(value >= 0 && value < BinaryConstants.TWO_TO_32);
        while (value > 127) {
            buffer.write((value & 0x7f) | 0x80);
            value = value >>> 7;
        }
        buffer.write(value);
    }
    static writeSignedVarint32(buffer, value) {
        assert(value === Math.floor(value));
        assert(value >= -BinaryConstants.TWO_TO_31 && value < BinaryConstants.TWO_TO_31);
        if (value >= 0) {
            BinaryEncoder.writeUnsignedVarint32(buffer, value);
            return;
        }
        for (let i = 0; i < 9; i++) {
            buffer.write((value & 0x7f) | 0x80);
            value = value >> 7;
        }
        buffer.write(1);
    }
    static writeSignedVarint64(buffer, value) {
        assert(value === Math.floor(value));
        assert(value >= -BinaryConstants.TWO_TO_63 && value < BinaryConstants.TWO_TO_63);
        BinaryEncoder.splitInt64(value);
        BinaryEncoder.writeSplitVarint64(buffer, split64Low, split64High);
    }
    static writeDouble(buffer, value) {
        assert(value === Infinity
            || value === -Infinity
            || isNaN(value)
            || (value >= -BinaryConstants.FLOAT64_MAX && value <= BinaryConstants.FLOAT64_MAX));
        buffer.writeFloat(value);
    }
    static writeBool(buffer, value) {
        buffer.write(value ? 1 : 0);
    }
    static writeEnum(buffer, value) {
        assert(value === Math.floor(value));
        assert(value >= -BinaryConstants.TWO_TO_31 && value < BinaryConstants.TWO_TO_31);
        BinaryEncoder.writeSignedVarint32(buffer, value);
    }
    static writeString(buffer, value) {
        for (let i = 0; i < value.length; i++) {
            let c = value.charCodeAt(i);
            if (c < 128) {
                buffer.write(c);
            }
            else if (c < 2048) {
                buffer.write((c >> 6) | 192);
                buffer.write((c & 63) | 128);
            }
            else if (c < 65536) {
                if (c >= 0xd800 && c <= 0xdbff && i + 1 < value.length) {
                    const second = value.charCodeAt(i + 1);
                    if (second >= 0xdc00 && second <= 0xdfff) {
                        c = (c - 0xd800) * 0x400 + second - 0xdc00 + 0x10000;
                        buffer.write((c >> 18) | 240);
                        buffer.write(((c >> 12) & 63) | 128);
                        buffer.write(((c >> 6) & 63) | 128);
                        buffer.write((c & 63) | 128);
                        i++;
                        continue;
                    }
                }
                buffer.write((c >> 12) | 224);
                buffer.write(((c >> 6) & 63) | 128);
                buffer.write((c & 63) | 128);
            }
        }
    }
    static splitInt64(value) {
        const sign = value < 0;
        value = Math.abs(value);
        let lowBits = value >>> 0;
        let highBits = Math.floor((value - lowBits) / BinaryConstants.TWO_TO_32);
        highBits = highBits >>> 0;
        if (sign) {
            highBits = ~highBits >>> 0;
            lowBits = ~lowBits >>> 0;
            lowBits += 1;
            if (lowBits > 0xffffffff) {
                lowBits = 0;
                highBits++;
                if (highBits > 0xffffffff) {
                    highBits = 0;
                }
            }
        }
        split64Low = lowBits;
        split64High = highBits;
    }
}
function assert(cond) {
    if (!cond) {
        throw new Error();
    }
}
