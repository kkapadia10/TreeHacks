import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import '../../../../base/platform_quirks/disable_dragging';
import classNames from 'classnames';
import { action } from 'mobx';
import { observer, useLocalObservable } from 'mobx-react-lite';
import * as React from 'react';
import { AspectRatio } from '../../aspect_ratio/aspect_ratio';
import { WarningOffIcon } from '../../icons/warning_off/icon';
import { PlaceholderFader } from '../../placeholder/fader';
import { Placeholder } from '../../placeholder/placeholder';
import { IconThumbnail } from '../icon_thumbnail/icon_thumbnail';
import { Image as BaseImage } from '../image/image';
import { BaseThumbnail } from '../internal/base_thumbnail';
import baseThumbnailStyles from '../internal/base_thumbnail.css';
import styles from './image_thumbnail.css';
import { getDimensions } from './internal/dimension';
const DEFAULT_ASPECT_RATIO = 4 / 3;
export const ImageThumbnail = (props) => {
    var _a;
    const { loadImage = simpleLoadImage, width, height, aspectRatio: aspectRatioProp, fit } = props;
    const aspectRatio = (_a = aspectRatioProp !== null && aspectRatioProp !== void 0 ? aspectRatioProp : (width != null && height != null ? width / height : undefined)) !== null && _a !== void 0 ? _a : (fit === 'contain' || fit === 'containCrop' ? DEFAULT_ASPECT_RATIO : undefined);
    const enhancedProps = { ...props, aspectRatio };
    if (props.loadingState === 'none') {
        return maybeWrapWithSizingContainer(_jsx(InternalStaticImageThumbnail, { ...enhancedProps }), {
            aspectRatio,
            width,
            height,
        });
    }
    if (props.loadingState == null && props.src != null) {
        return (_jsx(LoadImage, { src: props.src, loadImage: loadImage, callback: props.onImageLoad, children: loadingState => _jsx(LoadableImageThumbnail, { ...enhancedProps, loadingState: loadingState }) }));
    }
    return _jsx(LoadableImageThumbnail, { ...enhancedProps });
};
export const ImagePlaceholder = ({ index }) => (_jsx(Placeholder, { index: index, shape: "sharpRectangle" }));
const LoadableImageThumbnail = ({ loadingState, src, width, height, fallback = _jsx(IconThumbnail, { Icon: WarningOffIcon, width: width, height: height }), placeholder = _jsx(ImageThumbnailPlaceholder, { src: src }), aspectRatio, ...imageProps }) => {
    return maybeWrapWithSizingContainer(_jsx(PlaceholderFader, { loading: loadingState === 'loading', expand: true, Placeholder: () => placeholder, Content: () => loadingState === 'error'
            ? fallback
            : _jsx(InternalStaticImageThumbnail, { src: src, aspectRatio: aspectRatio, ...imageProps }) }), { aspectRatio, width, height });
};
const InternalStaticImageThumbnail = ({ aspectRatio, thumbnailRatio, fit = 'cover', background, border, borderRadius, padding = 'none', ImageComponent = BaseImage, className, ...imageProps }) => {
    const isTallThumbnailForContainCrop = fit === 'containCrop' && thumbnailRatio != null && thumbnailRatio < 1;
    const hasVisibleContainer = fit === 'containCrop' || fit === 'contain' || padding !== 'none' || background;
    const hasImageWrapper = border || isTallThumbnailForContainCrop;
    const dimensionsStyle = fit === 'cover' || thumbnailRatio == null
        ? {}
        : getDimensions(fit, aspectRatio || DEFAULT_ASPECT_RATIO, thumbnailRatio);
    const imageStyleClassName = classNames({
        [baseThumbnailStyles.smallBorderRadius]: borderRadius === 'small',
        [baseThumbnailStyles.mediumBorderRadius]: borderRadius === 'medium',
    });
    const _imageProps = {
        ...imageProps,
        alt: imageProps.alt || '',
        className: hasImageWrapper ? styles.image : classNames(styles.image, imageStyleClassName),
        style: hasImageWrapper ? {} : dimensionsStyle,
    };
    const image = hasImageWrapper
        ? (_jsx("div", { className: classNames(imageStyleClassName, !hasVisibleContainer && className, {
                [styles.border]: border,
                [styles.tallThumbnail]: isTallThumbnailForContainCrop,
            }), style: dimensionsStyle, children: _jsx(ImageComponent, { ..._imageProps }) }))
        : _jsx(ImageComponent, { ..._imageProps });
    if (hasVisibleContainer) {
        return (_jsx(BaseThumbnail, { borderRadius: borderRadius, background: background, padding: padding, className: classNames(className, styles.centerImage), children: image }));
    }
    return image;
};
const ImageThumbnailPlaceholder = ({ src }) => (_jsxs(_Fragment, { children: [_jsx(ImagePlaceholder, {}), _jsx("noscript", { children: _jsx("img", { src: src, className: styles.hideForNoscript, draggable: false, alt: "" }) })] }));
function simpleLoadImage(src) {
    return new Promise((resolve, reject) => {
        const img = new Image();
        img.src = src;
        img.onload = () => {
            resolve();
        };
        img.onerror = () => {
            reject();
        };
    });
}
const LoadImage = observer(function LoadImage({ src, callback, children, loadImage, }) {
    const store = useLocalObservable(() => ({
        loadingState: 'loading',
        setLoadingState: action((loadingState) => {
            store.loadingState = loadingState;
        }),
    }));
    React.useEffect(() => {
        (async () => {
            store.setLoadingState('loading');
            callback && callback('loading');
            await loadImage(src)
                .then(() => {
                store.setLoadingState('loaded');
            })
                .catch(() => {
                store.setLoadingState('error');
            });
            callback && callback(store.loadingState);
        })();
    }, [src, callback, loadImage, store]);
    return _jsx(_Fragment, { children: children(store.loadingState) });
});
const maybeWrapWithSizingContainer = (children, { aspectRatio, width, height }) => {
    if (aspectRatio != null) {
        return (_jsx(AspectRatio, { ratio: aspectRatio, width: width, height: height, children: children }));
    }
    if (width != null || height != null) {
        return _jsx("div", { style: { width: width !== null && width !== void 0 ? width : '100%', height: height !== null && height !== void 0 ? height : '100%' }, children: children });
    }
    return children;
};
