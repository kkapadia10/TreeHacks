import { makeObservable } from '../../../../base/make_observable/make_observable';
import { __decorate } from "tslib";
import { action, computed, observable, reaction } from 'mobx';
import * as React from 'react';
import { canHover, isPointerEventsSupported, isTouchSupported } from '../../device_capabilities/device_capabilities';
const initialPointerInput = 'mouse';
class PointerInputStore {
  static _makeObservable(instance) {
    makeObservable(instance, {
      _pointerInput: observable.ref,
      isTouchInput: computed,
      isMouseInput: computed,
      isPenInput: computed,
      isHoveringInput: computed,
      setPointerInput: action
    });
  }
  constructor() {
    PointerInputStore._makeObservable(this);
    this._pointerInput = initialPointerInput;
  }
  get isTouchInput() {
    return this._pointerInput === 'touch';
  }
  get isMouseInput() {
    return this._pointerInput === 'mouse';
  }
  get isPenInput() {
    return this._pointerInput === 'pen';
  }
  get isHoveringInput() {
    return this._pointerInput !== 'touch' && canHover();
  }
  setPointerInput(input) {
    this._pointerInput = input;
    return this._pointerInput;
  }
}
const pointerInputStore = new PointerInputStore();
export const pointerInputState = pointerInputStore;
function registerDocumentListeners(document) {
  const initialState = isTouchSupported() ? 'touch' : 'mouse';
  pointerInputStore.setPointerInput(initialState);
  if (!isPointerEventsSupported()) {
    return;
  }
  document.addEventListener('pointerdown', e => {
    switch (e.pointerType) {
      case 'mouse':
        pointerInputStore.setPointerInput('mouse');
        break;
      case 'touch':
        pointerInputStore.setPointerInput('touch');
        break;
      case 'pen':
        pointerInputStore.setPointerInput('pen');
        break;
      default:
    }
  }, true);
}
if (typeof document !== 'undefined') {
  registerDocumentListeners(document);
}
function useReaction(expression, initialValue) {
  const [state, setState] = React.useState(initialValue);
  React.useEffect(() => {
    return reaction(expression, value => setState(value), {
      fireImmediately: true
    });
  }, []);
  return state;
}
export function useIsTouchInput() {
  return useReaction(() => pointerInputState.isTouchInput, false);
}
export function useIsMouseInput() {
  return useReaction(() => pointerInputState.isMouseInput, true);
}
export function useIsPenInput() {
  return useReaction(() => pointerInputState.isPenInput, false);
}
export function useIsHoveringInput() {
  return useReaction(() => pointerInputState.isHoveringInput, true);
}