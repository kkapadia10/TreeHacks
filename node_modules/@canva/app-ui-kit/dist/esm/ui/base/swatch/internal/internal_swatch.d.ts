import * as React from 'react';
import type { SwatchProps } from '../swatch';
export declare const StaticSwatch: ({ className, children, ariaLabel, ariaDescribedBy, ariaLabelledBy, id, }: {
    className: string;
    children: React.ReactNode;
    ariaLabel?: string | undefined;
    ariaDescribedBy?: string | undefined;
    ariaLabelledBy?: string | undefined;
    id?: string | undefined;
}) => import("react/jsx-runtime").JSX.Element;
type ClickableSwatchProps = Pick<SwatchProps, 'onClick' | 'active' | 'disabled' | 'disclosure' | 'role' | 'focusRef' | 'tabIndex' | 'ariaLabel' | 'stretch' | 'aspectRatio' | 'ariaHasPopup' | 'ariaControls' | 'tooltipLabel' | 'disableTooltip' | 'tooltipOverflowBoundariesElement'> & {
    children: React.ReactNode;
};
export declare const ClickableSwatch: ({ onClick, active, disabled, ariaLabel, disclosure, role, focusRef, tabIndex, stretch, aspectRatio, children, ariaHasPopup, ariaControls, tooltipLabel, disableTooltip, tooltipOverflowBoundariesElement, }: ClickableSwatchProps) => import("react/jsx-runtime").JSX.Element;
type DeletableSwatchProps = Pick<SwatchProps, 'onDelete' | 'stretch' | 'aspectRatio' | 'deleteButtonVisibility' | 'disableTooltip' | 'tooltipOverflowBoundariesElement'> & {
    children: React.ReactNode;
};
export declare const DeletableSwatch: ({ onDelete, deleteButtonVisibility, stretch, aspectRatio, disableTooltip, tooltipOverflowBoundariesElement, children, }: DeletableSwatchProps) => import("react/jsx-runtime").JSX.Element;
export {};
