import * as React from 'react';
import type { ButtonProps } from '../button/button';
import type { Fill, FillObject as InternalFillObject, GradientStop as InternalGradientStop } from './internal/swatch_util';
export type Size = 'xxsmall' | 'xsmall' | 'small' | 'medium' | 'large';
export type FillObject = InternalFillObject;
export type GradientStop = InternalGradientStop;
type FluidProps = (Pick<ButtonProps, 'stretch'> & {
    stretch: true;
    aspectRatio?: number;
}) | {
    stretch?: false;
    aspectRatio?: never;
};
export type SwatchProps = Pick<ButtonProps, 'onClick' | 'active' | 'disclosure' | 'id' | 'ariaLabelledBy' | 'ariaDescribedBy' | 'disabled' | 'tabIndex' | 'focusRef' | 'role' | 'tooltipOverflowBoundariesElement' | 'ariaHasPopup' | 'ariaControls'> & {
    fill: Fill
    variant?: 'solid' | 'outline' | 'contrast'
    size?: Size
    Icon?: () => React.ReactNode
    onDelete?: () => void
    deleteButtonVisibility?: 'on-hover' | 'always'
    tooltipLabel?: string
    ariaLabel?: string
    disableTooltip?: boolean
    colorNames?: ReadonlyMap<string, string>
    rgbToCmyk?: ReadonlyMap<string, string>
} & FluidProps;
export declare const Swatch: ({ fill, size, variant, Icon, onClick, active, disabled, disclosure, role, focusRef, tabIndex, tooltipLabel, disableTooltip, tooltipOverflowBoundariesElement, stretch, colorNames, rgbToCmyk, id, ariaLabel, ariaDescribedBy, ariaLabelledBy, onDelete, deleteButtonVisibility, aspectRatio, ariaHasPopup, ariaControls, }: SwatchProps) => import("react/jsx-runtime").JSX.Element;
export type AddColorButtonProps = Omit<SwatchProps, 'Icon' | 'ariaLabel' | 'tooltipLabel' | 'fill' | 'variant' | 'onDelete'> & FluidProps;
export declare const AddColorButton: (props: AddColorButtonProps) => import("react/jsx-runtime").JSX.Element;
export {};
