import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import classnames from 'classnames';
import { observer } from 'mobx-react';
import * as React from 'react';
import { pointerInputState } from '../../a11y/pointer_input_state/pointer_input_state';
import { BadgeContainer, BadgeGroup } from '../../badge/badge_container/badge_container';
import { BasicButton, CircleButton } from '../../button/button';
import { CloseIcon } from '../../icons/close/icon';
import styles from '../swatch.css';
import { SwatchMessages } from '../swatch.messages';
export const StaticSwatch = ({ className, children, ariaLabel, ariaDescribedBy, ariaLabelledBy, id, }) => {
    return (_jsx("span", { "aria-label": ariaLabelledBy ? undefined : ariaLabel, "aria-labelledby": ariaLabelledBy, "aria-describedby": ariaDescribedBy, id: id, className: className, role: "img", children: children }));
};
export const ClickableSwatch = observer(function ClickableSwatch({ onClick, active, disabled, ariaLabel, disclosure, role, focusRef, tabIndex, stretch, aspectRatio, children, ariaHasPopup, ariaControls, tooltipLabel, disableTooltip, tooltipOverflowBoundariesElement, }) {
    return (_jsx(
     BasicButton,
     { onClick: onClick, active: active, disclosure: disclosure, disabled: disabled, role: role, focusRef: focusRef, tabIndex: tabIndex, ariaLabel: ariaLabel, noChildWrapper: true, ariaHasPopup: ariaHasPopup, ariaControls: ariaControls, tooltipLabel: tooltipLabel, tooltipDisabled: disableTooltip, tooltipOverflowBoundariesElement: tooltipOverflowBoundariesElement, className: classnames(styles.swatchButton, {
             [styles.active]: active,
             [styles.disabled]: disabled,
             [styles.stretch]: stretch,
             [styles.aspectRatio]: aspectRatio,
             [styles.fixed]: !stretch,
             [styles.hoverSupported]: pointerInputState.isMouseInput,
         }), children: children }
    ));
});
export const DeletableSwatch = observer(function DeletableSwatch({ onDelete, deleteButtonVisibility, stretch, aspectRatio, disableTooltip, tooltipOverflowBoundariesElement, children, }) {
    return (_jsxs(BadgeContainer, { className: classnames(styles.swatchWrapper, {
            [styles.stretch]: stretch,
            [styles.fixed]: !stretch,
            [styles.aspectRatio]: aspectRatio,
        }), children: [children, _jsx(BadgeGroup, { location: "top-end", visibility: !pointerInputState.isMouseInput ? 'always' : deleteButtonVisibility, children: _jsx(CircleButton, { icon: CloseIcon, variant: "contrast", onClick: onDelete, tooltipLabel: SwatchMessages.deleteTooltip(), tooltipDisabled: disableTooltip, tooltipOverflowBoundariesElement: tooltipOverflowBoundariesElement, size: "tiny", iconSize: "tiny", className: styles.deleteButton }) })] }));
});
