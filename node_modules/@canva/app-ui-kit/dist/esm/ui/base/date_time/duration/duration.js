import { jsx as _jsx } from "react/jsx-runtime";
import { Preconditions, UnreachableError } from '../../../../base/preconditions';
import * as mobxReact from 'mobx-react';
import * as React from 'react';
import { DurationMessages } from './duration.messages';
const MINUTE_IN_SECONDS = 60;
const HOUR_IN_SECONDS = MINUTE_IN_SECONDS * 60;
const DAY_IN_HOURS = 24;
const DAY_IN_SECONDS = HOUR_IN_SECONDS * DAY_IN_HOURS;
const WEEK_IN_DAYS = 7;
export const Duration = mobxReact.observer(({ seconds, format = 'medium', className, ariaLabel }) => {
    Preconditions.checkArgument(seconds >= 0, 'Seconds must not be a negative number');
    const { days, hours, minutes, secs } = splitTimeAttributes(seconds, format);
    return (_jsx("time", { className: className, dateTime: getDateTimeAttribute(days, hours, minutes, secs), "aria-label": ariaLabel, children: getFormattedDuration(format, days, hours, minutes, secs) }));
});
export function formatDuration(seconds, format = 'medium') {
    const { days, hours, minutes, secs } = splitTimeAttributes(Math.abs(seconds), format);
    const formattedDuration = getFormattedDuration(format, days, hours, minutes, secs);
    return seconds < 0 ? `-${formattedDuration}` : formattedDuration;
}
function splitTimeAttributes(seconds, format) {
    const days = Math.floor(seconds / DAY_IN_SECONDS);
    let hours = Math.floor((seconds % DAY_IN_SECONDS) / HOUR_IN_SECONDS);
    let minutes = Math.floor((seconds % HOUR_IN_SECONDS) / MINUTE_IN_SECONDS);
    let secs = format === 'detailed' || (format === 'short' && isUnderOneMinute(days, hours, minutes))
        ? Math.floor((seconds % MINUTE_IN_SECONDS) * 10) / 10
        : Math.floor(seconds % MINUTE_IN_SECONDS);
    if (format === 'shortAbbreviated' || format === 'verbose') {
        if (days > WEEK_IN_DAYS) {
            hours = 0;
            minutes = 0;
            secs = 0;
        }
        else if (days > 0) {
            minutes = 0;
            secs = 0;
        }
        else if (hours > 0) {
            secs = 0;
        }
    }
    return { days, hours, minutes, secs };
}
function getDateTimeAttribute(days, hours, minutes, seconds) {
    if (days === 0 && hours === 0 && minutes === 0 && seconds === 0) {
        return 'P0S';
    }
    const daysString = days > 0 ? `${days}D` : '';
    const hoursString = hours > 0 ? `${hours}H` : '';
    const minutesString = minutes > 0 ? `${minutes}M` : '';
    const secondsString = seconds > 0 ? `${seconds}S` : '';
    return `P${daysString}${hoursString}${minutesString}${secondsString}`;
}
function getFormattedDuration(format, days, hours, minutes, seconds) {
    switch (format) {
        case 'short':
        case 'detailed':
            return shortDuration(days, hours, minutes, seconds);
        case 'medium':
            return numericDuration(days, hours, minutes, seconds);
        case 'abbreviated':
        case 'shortAbbreviated':
            return abbreviatedDuration(days, hours, minutes, seconds);
        case 'verbose':
            return verboseDuration(days, hours, minutes, seconds);
        default:
            throw new UnreachableError(format);
    }
}
function shortDuration(days, hours, minutes, seconds) {
    if (isUnderOneMinute(days, hours, minutes)) {
        return seconds > 0
            ? DurationMessages.secondsStringAbbreviation(padMilliseconds(seconds))
            : DurationMessages.secondsStringAbbreviation(padMilliseconds(0));
    }
    return numericDuration(days, hours, minutes, seconds);
}
function numericDuration(days, hours, minutes, seconds) {
    const totalHours = days * DAY_IN_HOURS + hours;
    const hoursString = totalHours > 0 ? `${totalHours}:` : '';
    const minutesString = totalHours > 0 ? `${minutes}:`.padStart(3, '0') : `${minutes}:`;
    const secondsString = seconds > 0 ? padSeconds(seconds) : '00';
    return `${hoursString}${minutesString}${secondsString}`;
}
function abbreviatedDuration(days, hours, minutes, seconds) {
    if (days === 0 && hours === 0 && minutes === 0 && seconds === 0) {
        return `${DurationMessages.secondsAbbreviation(0)}`.trim();
    }
    const weeks = Math.floor(days / WEEK_IN_DAYS);
    const daysExcludingWeeks = days - weeks * WEEK_IN_DAYS;
    const weeksString = weeks > 0 ? `${DurationMessages.weeksAbbreviation(weeks)} ` : '';
    const daysString = daysExcludingWeeks > 0 ? `${DurationMessages.daysAbbreviation(daysExcludingWeeks)} ` : '';
    const hoursString = hours > 0 ? `${DurationMessages.hoursAbbreviation(hours)} ` : '';
    const minutesString = minutes > 0 ? `${DurationMessages.minutesAbbreviation(minutes)} ` : '';
    const secondsString = seconds > 0 ? `${DurationMessages.secondsAbbreviation(seconds)} ` : '';
    return `${weeksString}${daysString}${hoursString}${minutesString}${secondsString}`.trim();
}
function verboseDuration(days, hours, minutes, seconds) {
    if (days === 0 && hours === 0 && minutes === 0 && seconds === 0) {
        return `${DurationMessages.secondsVerbose(0)}`.trim();
    }
    const weeks = Math.floor(days / WEEK_IN_DAYS);
    const daysExcludingWeeks = days - weeks * WEEK_IN_DAYS;
    const weeksString = weeks > 0 ? `${DurationMessages.weeksVerbose(weeks)} ` : '';
    const daysString = daysExcludingWeeks > 0 ? `${DurationMessages.daysVerbose(daysExcludingWeeks)} ` : '';
    const hoursString = hours > 0 ? `${DurationMessages.hoursVerbose(hours)} ` : '';
    const minutesString = minutes > 0 ? `${DurationMessages.minutesVerbose(minutes)} ` : '';
    const secondsString = seconds > 0 ? `${DurationMessages.secondsVerbose(seconds)} ` : '';
    return `${weeksString}${daysString}${hoursString}${minutesString}${secondsString}`.trim();
}
const isUnderOneMinute = (days, hours, minutes) => !days && !hours && !minutes;
const padSeconds = (num) => (num < 10 ? `0${num}` : num);
const padMilliseconds = (num) => num.toFixed(1);
