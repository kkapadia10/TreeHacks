import { jsx as _jsx } from "react/jsx-runtime";
import classNames from 'classnames';
import { observer } from 'mobx-react';
import * as React from 'react';
import styles from './card.css';
import { CardBadgeGroup } from './decorators/card_badge_group';
import { CardBottomBadge } from './decorators/card_bottom_badge';
import { CardButton, CardButtonGroup, CardMenuButton, StatelessCardMenuButton, } from './decorators/card_button';
import { CardCheckbox } from './decorators/card_checkbox';
import { CardDescription, CardPreTitle, CardTitle } from './internal/card_content';
import { useCardConfiguration, useCardConfigurationSetter, useCardFocus, useCardHover, useCardMouseDown, withCardContextProvider, } from './internal/card_context';
import { CardIconThumbnail, CardImageThumbnail, CardPlaceholder, CardVideoThumbnail, } from './internal/card_thumbnail';
import { CardDecorator, InternalCardWithDetails, InternalHorizontalCard, } from './internal/internal_card';
export { useCardConfiguration, useCardFocus, useCardHover, useCardMouseDown };
export { CardBadgeGroup, CardBottomBadge, CardButton, CardButtonGroup, CardCheckbox, CardDecorator, CardDescription, CardIconThumbnail, CardImageThumbnail, CardMenuButton, CardPlaceholder, CardPreTitle, CardTitle, CardVideoThumbnail, StatelessCardMenuButton, };
export const CoverCard = withCardContextProvider(observer(function CoverCard({ thumbnailHeight, thumbnailBackground = 'none', size, border, sharp, disabled, hasHoverEffect: hasHoverEffectProp, selectable, ...props }) {
    useCardConfigurationSetter({
        size: size !== null && size !== void 0 ? size : 'medium',
        sharp: sharp !== null && sharp !== void 0 ? sharp : false,
        border: border !== null && border !== void 0 ? border : true,
        disabled: !!disabled,
        badgeTransition: 'slide',
        hasHoverEffect: hasHoverEffectProp !== null && hasHoverEffectProp !== void 0 ? hasHoverEffectProp : true,
    });
    const { hasHoverEffect } = useCardConfiguration();
    const outerStyle = thumbnailHeight ? { height: thumbnailHeight } : undefined;
    return (_jsx(InternalCardWithDetails, { ...props, outerStyle: outerStyle, outerClassName: classNames({
            [styles.contrastOnLight]: thumbnailBackground === 'contrastOnLight',
            [styles.contrastOnDark]: thumbnailBackground === 'contrastOnDark',
            [styles.secondaryBackground]: thumbnailBackground === 'secondary',
        }), containerClassName: hasHoverEffect ? styles.coverHoverTrigger : undefined, selectionIsPrimaryAction: selectable }));
}));
CoverCard.displayName = 'CoverCard';
export const ContainCard = withCardContextProvider(observer(function ContainCard({ thumbnailRatio, thumbnailBackground = 'secondary', size, border, disabled, hasHoverEffect: hasHoverEffectProp, selectable, ...props }) {
    useCardConfigurationSetter({
        size: size !== null && size !== void 0 ? size : 'medium',
        sharp: false,
        border: border !== null && border !== void 0 ? border : true,
        disabled: !!disabled,
        badgeTransition: 'fade',
        hasHoverEffect: hasHoverEffectProp !== null && hasHoverEffectProp !== void 0 ? hasHoverEffectProp : true,
    });
    const { hasHoverEffect } = useCardConfiguration();
    const innerStyle = React.useMemo(() => getContainCardDimensions(thumbnailRatio), [thumbnailRatio]);
    return (_jsx(InternalCardWithDetails, { ...props, outerClassName: classNames(styles.containVariant, {
            [styles.compact]: size === 'small',
            [styles.contrastOnLight]: thumbnailBackground === 'contrastOnLight',
            [styles.contrastOnDark]: thumbnailBackground === 'contrastOnDark',
            [styles.secondaryBackground]: thumbnailBackground === 'secondary',
        }), containerClassName: hasHoverEffect ? styles.containHoverTrigger : undefined, innerClassName: classNames({ [styles.tallThumbnail]: thumbnailRatio < 1 }), innerStyle: innerStyle, selectionIsPrimaryAction: selectable }));
}));
ContainCard.displayName = 'ContainCard';
export const HorizontalCard = withCardContextProvider(function HorizontalCard({ thumbnailSize, size, disabled, sharp, border, badgeTransition, hasHoverEffect, selectable, ...props }) {
    useCardConfigurationSetter({
        size: size !== null && size !== void 0 ? size : 'medium',
        disabled: !!disabled,
        sharp: sharp !== null && sharp !== void 0 ? sharp : false,
        border: border !== null && border !== void 0 ? border : true,
        badgeTransition: badgeTransition !== null && badgeTransition !== void 0 ? badgeTransition : 'slide',
        hasHoverEffect: hasHoverEffect !== null && hasHoverEffect !== void 0 ? hasHoverEffect : true,
    });
    return (_jsx(InternalHorizontalCard, { selectionIsPrimaryAction: selectable, thumbnailSize: thumbnailSize, ...props }));
});
HorizontalCard.displayName = 'HorizontalCard';
export const WithCardState = observer(function WithCardState({ children }) {
    const state = {
        isHovered: useCardHover(),
        isFocused: useCardFocus(),
        isMouseDown: useCardMouseDown(),
    };
    return children(state);
});
function getContainCardDimensions(thumbnailRatio) {
    const containerRatio = 4 / 3;
    let height;
    let width;
    if (thumbnailRatio > 100 / 15) {
        width = '100%';
        height = `${(100 * containerRatio) / (100 / 15)}%`;
    } else if (thumbnailRatio > containerRatio) {
        width = '100%';
        height = `${(100 * containerRatio) / thumbnailRatio}%`;
    }
    else if (thumbnailRatio >= 1) {
        width = `${(100 * thumbnailRatio) / containerRatio}%`;
        height = '100%';
    }
    else {
        width = '75%';
        height = `${100 / thumbnailRatio}%`;
    }
    return { width, height };
}
