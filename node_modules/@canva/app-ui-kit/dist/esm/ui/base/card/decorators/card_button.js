import { jsx as _jsx } from "react/jsx-runtime";
import { action } from 'mobx';
import { observer, useLocalObservable } from 'mobx-react';
import * as React from 'react';
import { Button } from '../../button/button';
import { ConjoinedButtons } from '../../button/conjoined_buttons';
import { MoreHorizontalIcon } from '../../icons/more_horizontal/icon';
import { Flyout as BaseFlyout } from '../../surface/flyout/flyout';
import { useCardConfiguration } from '../internal/card_context';
import { CardBadgeGroup } from './card_badge_group';
import { CardMessages } from './card_button.messages';
export const CardButtonGroup = (props) => {
    return (_jsx(CardButtonGroupContextProvider, { children: _jsx(InternalCardButtonGroup, { ...props }) }));
};
const InternalCardButtonGroup = observer(function InternalCardButtonGroup(props) {
    var _a, _b, _c;
    const { children, forceShow, location = 'top-end' } = props;
    const configuration = useCardConfiguration();
    const context = React.useContext(CardButtonGroupContext);
    const transition = (_a = props.transition) !== null && _a !== void 0 ? _a : configuration.badgeTransition;
    const size = (_b = props.size) !== null && _b !== void 0 ? _b : configuration.size;
    const disabled = (_c = props.disabled) !== null && _c !== void 0 ? _c : configuration.disabled;
    const buttons = React.Children.map(children, child => {
        if (React.isValidElement(child)) {
            return React.cloneElement(child, { size, disabled });
        }
    });
    return (_jsx(CardBadgeGroup, { location: location, forceShow: forceShow || (context === null || context === void 0 ? void 0 : context.isFlyoutOpen), transition: transition, children: _jsx(ConjoinedButtons, { children: buttons }) }));
});
export const CardButton = React.memo(function CardButton(props) {
    const { className, icon, ariaLabel, onClick, disabled, size } = props;
    const buttonSize = size === 'small' ? 'tiny' : 'small';
    return (_jsx(Button, { variant: "contrast", icon: icon, iconSize: size, size: buttonSize, ariaLabel: ariaLabel, onClick: onClick, className: className, disabled: disabled }));
});
export const CardMenuButton = observer(function CardMenuButton(props) {
    const context = React.useContext(CardButtonGroupContext);
    const flyoutStore = useLocalObservable(() => ({
        isOpen: false,
        toggle: action(() => {
            context === null || context === void 0 ? void 0 : context.setIsFlyoutOpen(!flyoutStore.isOpen);
            flyoutStore.isOpen = !flyoutStore.isOpen;
        }),
    }));
    return (_jsx(StatelessCardMenuButton, { ...props, isOpen: flyoutStore.isOpen, toggleFlyout: flyoutStore.toggle }));
});
export const StatelessCardMenuButton = (props) => {
    const { Flyout = BaseFlyout, FlyoutContent, isOpen, toggleFlyout, ariaLabel = CardMessages.more(), size, disabled, icon = MoreHorizontalIcon, className, } = props;
    const buttonSize = size === 'small' ? 'tiny' : 'small';
    return (_jsx(Flyout, { open: isOpen, onRequestClose: toggleFlyout, placement: "bottom-start", trigger: (triggerProps) => (_jsx(Button, { ...triggerProps, variant: "contrast", icon: icon, iconSize: size, size: buttonSize, disabled: disabled, className: className, ariaLabel: ariaLabel, onClick: toggleFlyout })), children: _jsx(FlyoutContent, {}) }));
};
const CardButtonGroupContext = React.createContext(undefined);
const CardButtonGroupContextProvider = ({ children }) => {
    const [isOpen, setIsOpen] = React.useState(false);
    const contextValue = React.useMemo(() => {
        const setIsFlyoutOpen = (isOpen) => {
            setIsOpen(isOpen);
        };
        return { isFlyoutOpen: isOpen, setIsFlyoutOpen };
    }, [isOpen, setIsOpen]);
    return (_jsx(CardButtonGroupContext.Provider, { value: contextValue, children: children }));
};
