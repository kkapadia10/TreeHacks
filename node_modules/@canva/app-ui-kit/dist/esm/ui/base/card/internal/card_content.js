import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import classNames from 'classnames';
import { observer } from 'mobx-react';
import * as React from 'react';
import { Column, Columns, Rows } from '../../layout/layout';
import { Text } from '../../typography/typography';
import styles from '../card.css';
import { useCardConfiguration } from './card_context';
export const CardContent = function CardContent({ titleId, descriptionId, title, description, preTitle, avatar, }) {
    const titleAndDescription = (_jsxs(_Fragment, { children: [typeof preTitle !== 'string' ? preTitle : _jsx(CardPreTitle, { children: preTitle }), title != null && typeof title !== 'string'
                ? (_jsx("div", { className: styles.title, id: titleId, children: title }))
                : (_jsx(CardTitle, { id: titleId, lineClamp: description ? 1 : 2, children: title })), description != null && (_jsx("div", { className: styles.description, id: descriptionId, children: typeof description === 'string'
                    ? _jsx(CardDescription, { children: description })
                    : description }))] }));
    if (avatar) {
        return (_jsxs(Columns, { spacing: "1u", children: [_jsx(Column, { width: "content", children: avatar }), _jsx(Column, { children: titleAndDescription })] }));
    }
    return _jsx(Rows, { spacing: "0", children: titleAndDescription });
};
export const CardTitle = observer(function CardTitle(props) {
    const { size } = useCardConfiguration();
    const { className, ...rest } = props;
    return (_jsx(Text, { weight: "bold", size: size === 'medium' ? 'medium' : 'small', lineClamp: 2, className: classNames(styles.title, className), ...rest }));
});
export const CardDescription = observer(function CardDescription(props) {
    return _jsx(Text, { size: "small", tone: "secondary", lineClamp: 1, ...props });
});
export const CardPreTitle = observer(function CardPreTitle(props) {
    return (_jsx(Text, { size: "xsmall", tone: "secondary", capitalization: "uppercase", lineClamp: 1, ...props }));
});
