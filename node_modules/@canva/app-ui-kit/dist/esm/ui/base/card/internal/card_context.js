import { makeObservable } from '../../../../base/make_observable/make_observable';
import { __decorate } from "tslib";
import { jsx as _jsx } from "react/jsx-runtime";
import * as mobx from 'mobx';
import * as React from 'react';
export const useCardConfiguration = () => useCardConfigurationStore().configuration;
export function useCardConfigurationSetter(configuration) {
  const {
    setConfiguration
  } = useCardConfigurationStore();
  const willMount = React.useRef(true);
  if (willMount.current) {
    setConfiguration(configuration);
  }
  willMount.current = false;
  React.useEffect(() => {
    setConfiguration(configuration);
  }, [setConfiguration, configuration]);
}
export function useCardHover(args) {
  var _a;
  const track = (_a = args === null || args === void 0 ? void 0 : args.track) !== null && _a !== void 0 ? _a : true;
  const interactionStore = useCardInteractionStore();
  React.useEffect(() => {
    if (track) {
      mobx.runInAction(() => interactionStore.trackHover = true);
    }
  }, [interactionStore, track]);
  return interactionStore.isHovered;
}
export function useCardFocus() {
  const interactionStore = useCardInteractionStore();
  React.useEffect(() => {
    mobx.runInAction(() => interactionStore.trackFocus = true);
  }, [interactionStore]);
  return interactionStore.isFocused;
}
export function useCardMouseDown() {
  const interactionStore = useCardInteractionStore();
  React.useEffect(() => {
    mobx.runInAction(() => interactionStore.trackMouseDown = true);
  }, [interactionStore]);
  return interactionStore.isMouseDown;
}
export const useCardEventHandlers = () => useCardInteractionStore().eventHandlers;
export function withCardContextProvider(Component) {
  var _a;
  const WithProvider = props => {
    const [context] = React.useState(createContext);
    return _jsx(CardContext.Provider, {
      value: context,
      children: _jsx(Component, {
        ...props
      })
    });
  };
  WithProvider.displayName = `withCardContext(${(_a = Component.displayName) !== null && _a !== void 0 ? _a : Component.name})`;
  return WithProvider;
}
class CardInteractionStore {
  static _makeObservable(instance) {
    makeObservable(instance, {
      isHovered: mobx.observable.ref,
      isFocused: mobx.observable.ref,
      isMouseDown: mobx.observable.ref,
      trackHover: mobx.observable.ref,
      trackFocus: mobx.observable.ref,
      trackMouseDown: mobx.observable.ref,
      eventHandlers: mobx.computed,
      setHovered: mobx.action.bound,
      setFocused: mobx.action.bound,
      setMouseDown: mobx.action.bound
    });
  }
  constructor() {
    CardInteractionStore._makeObservable(this);
    this.isHovered = false;
    this.isFocused = false;
    this.isMouseDown = false;
    this.trackHover = false;
    this.trackFocus = false;
    this.trackMouseDown = false;
  }
  get eventHandlers() {
    return {
      onMouseEnter: this.trackHover ? () => this.setHovered(true) : undefined,
      onMouseLeave: this.trackHover ? () => this.setHovered(false) : undefined,
      onFocus: this.trackFocus ? () => this.setFocused(true) : undefined,
      onBlur: this.trackFocus ? () => this.setFocused(false) : undefined,
      onMouseDown: this.trackMouseDown ? () => this.setMouseDown(true) : undefined,
      onMouseUp: this.trackMouseDown ? () => this.setMouseDown(false) : undefined
    };
  }
  setHovered(isHovered) {
    this.isHovered = isHovered;
  }
  setFocused(isFocused) {
    this.isFocused = isFocused;
  }
  setMouseDown(isMouseDown) {
    this.isMouseDown = isMouseDown;
  }
}
class CardConfigurationStore {
  static _makeObservable(instance) {
    makeObservable(instance, {
      configuration: mobx.observable.struct,
      setConfiguration: mobx.action.bound
    });
  }
  constructor() {
    CardConfigurationStore._makeObservable(this);
    this.configuration = {
      size: 'medium',
      sharp: false,
      border: true,
      disabled: false,
      badgeTransition: 'fade',
      hasHoverEffect: true
    };
  }
  setConfiguration(configuration) {
    this.configuration = configuration;
  }
}
function createContext() {
  return {
    interactionStore: new CardInteractionStore(),
    configurationStore: new CardConfigurationStore()
  };
}
const CardContext = React.createContext(undefined);
const useCardContext = () => {
  var _a;
  return (_a = React.useContext(CardContext)) !== null && _a !== void 0 ? _a : createContext();
};
const useCardConfigurationStore = () => useCardContext().configurationStore;
const useCardInteractionStore = () => useCardContext().interactionStore;