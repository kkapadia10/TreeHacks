import { makeObservable } from '../../../base/make_observable/make_observable';
import { __decorate } from "tslib";
import { jsx as _jsx } from "react/jsx-runtime";
import * as mobx from 'mobx';
import * as mobxReact from 'mobx-react';
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import { WithThemeData } from '../theme/theme';
import styles from './layer.css';
export const LayerLevel = {
  CONTENT: 0,
  PINS: 1,
  LIGHTBOXES: 2,
  MODALS: 3,
  COMPLIANCE_NOTICES: 4,
  TOASTS: 5,
  TOOLTIPS: 6
};
export class LayerError extends Error {}
const LayerContext = React.createContext({});
export function WithLayerParent(
  {
    parentLayer,
    children
  }
) {
  return _jsx(LayerContext.Provider, {
    value: {
      parentLayer
    },
    children: children
  });
}
let Layer = class Layer extends React.Component {
  static _makeObservable(instance) {
    makeObservable(instance, {
      layerContent: mobx.observable.ref,
      close: mobx.action,
      show: mobx.action
    });
  }
  constructor() {
    super(...arguments);
    Layer._makeObservable(this);
    this.layerRoot = undefined;
    this.layerContent = undefined;
    this.parentDocument = document;
    this.hasEventListeners = false;
    this.onDocumentMouseDown = event => {
      if (this.props.onOutsideLayerPointerDown == null) {
        return;
      }
      if (this.layerRoot == null) {
        return;
      }
      if (!(event.target instanceof this.parentGlobal.Node)) {
        return;
      }
      if (!this.layerRoot.contains(event.target)) {
        this.props.onOutsideLayerPointerDown(event);
      }
    };
    this.onDocumentTouchStart = event => {
      this.onDocumentMouseDown(event);
    };
  }
  componentDidMount() {
    this.parentLayer = this.props.parentLayer || this.context.parentLayer || document.body;
    this.parentDocument = this.parentLayer && this.parentLayer.ownerDocument || document;
    mobxReact.disposeOnUnmount(this, [mobx.reaction(() => this.props.open, open => open ? this.show(this.props.level) : this.close(), {
      fireImmediately: true
    }), mobx.reaction(() => this.props.onOutsideLayerPointerDown, outsideLayerPointerDown => {
      outsideLayerPointerDown != null ? this.maybeAddPointerEventListeners() : this.maybeRemovePointerEventListeners();
    }, {
      fireImmediately: true
    })]);
  }
  componentWillUnmount() {
    this.maybeRemovePointerEventListeners();
    this.close();
  }
  maybeAddPointerEventListeners() {
    if (!this.hasEventListeners && this.layerRoot != null) {
      this.parentDocument.addEventListener('mousedown', this.onDocumentMouseDown);
      this.parentDocument.addEventListener('touchstart', this.onDocumentTouchStart);
      this.hasEventListeners = true;
    }
  }
  maybeRemovePointerEventListeners() {
    if (this.hasEventListeners) {
      this.parentDocument.removeEventListener('mousedown', this.onDocumentMouseDown);
      this.parentDocument.removeEventListener('touchstart', this.onDocumentTouchStart);
      this.hasEventListeners = false;
    }
  }
  close() {
    if (!this.layerRoot || !this.layerContent) {
      return;
    }
    if (this.parentLayer == null || this.layerRoot.parentNode !== this.parentLayer) {
      throw new LayerError('Closed before mount.');
    }
    this.parentLayer.removeChild(this.layerRoot);
    this.layerRoot = undefined;
    this.layerContent = undefined;
    this.parentDocument.dispatchEvent(new this.parentGlobal.CustomEvent('layerclose'));
  }
  get parentGlobal() {
    return this.parentDocument.defaultView || window;
  }
  show(level) {
    if (!this.layerRoot || !this.layerContent) {
      if (!this.parentLayer) {
        throw new LayerError('Shown before mount.');
      }
      this.layerContent = this.parentDocument.createElement('div');
      this.layerContent.classList.add(styles.layerContent);
      this.layerRoot = this.parentDocument.createElement('div');
      if (this.parentLayer === this.parentDocument.body) {
        this.layerRoot.addEventListener('click', () => 0);
      }
      this.layerRoot.classList.add(styles.layerRoot);
      this.layerRoot.appendChild(this.layerContent);
      const lastLayerRoot = this.findLastLayerRoot(this.parentLayer);
      if (lastLayerRoot) {
        lastLayerRoot.after(this.layerRoot);
      } else {
        this.parentLayer.prepend(this.layerRoot);
      }
    }
    this.layerRoot.style.zIndex = String(level != null ? level : LayerLevel.PINS);
  }
  findLastLayerRoot(parentLayer) {
    let lastLayerRoot = null;
    for (const parentLayerChild of parentLayer.children) {
      if (!parentLayerChild.classList.contains(styles.layerRoot)) {
        break;
      }
      lastLayerRoot = parentLayerChild;
    }
    return lastLayerRoot;
  }
  render() {
    if (this.layerContent) {
      return ReactDOM.createPortal(_jsx(LayerContext.Provider, {
        value: {
          parentLayer: this.layerRoot
        },
        children: _jsx(WithThemeData, {
          children: data => _jsx("div", {
            className: data.className,
            children: this.props.children
          })
        })
      }), this.layerContent);
    }
    return null;
  }
};
Layer.contextType = LayerContext;
Layer = __decorate([mobxReact.observer], Layer);
export { Layer };