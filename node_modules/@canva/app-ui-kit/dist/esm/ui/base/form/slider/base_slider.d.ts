import * as React from 'react';
import type { BarSnapBehavior } from './bar_snap_behavior';
export type SharedSliderProps = {
    id?: string
    min: number
    max: number
    step?: number | 'any'
    snap?: number
    origin?: number
    onDragStart?: () => void
    onBarResize?: (opts: {
        width: number;
        start: number;
    }) => void;
    disabled?: boolean;
    onChangeComplete?: (previousValue: number, newValue: number) => void
    ariaLabelledBy?: string
    ariaLabel?: string
    ariaDescribedBy?: string
    ariaValueText?: string
    trackFill?: string
};
export type BaseSliderProps = SharedSliderProps & {
    value: number;
    onChange: (value: number) => void;
    blurOnDragEnd?: boolean
    snapBehavior?: BarSnapBehavior;
    onDragEnd?: () => void;
    Track?: (props: TrackProps) => JSX.Element;
    Knob?: (props: KnobProps) => JSX.Element;
};
type BaseSliderState = {
    active: boolean;
    focused: boolean;
    hovering: boolean;
    width: number;
};
export declare class BaseSlider extends React.PureComponent<BaseSliderProps, BaseSliderState> {
    private readonly inputRef;
    private readonly snapBehavior;
    private isDragging;
    private dragStartValue;
    private keyPressed;
    constructor(props: BaseSliderProps);
    componentWillUnmount(): void;
    render(): import("react/jsx-runtime").JSX.Element;
    private readonly onDragStart;
    private readonly onDragEnd;
    private readonly onMouseUp;
    private readonly onMouseDown;
    private readonly onTouchStart;
    private readonly onTouchEnd;
    private readonly onResize;
    private readonly onBarResize;
    private readonly onKeyDown;
    private readonly onKeyUp;
    private readonly onFocus;
    private readonly onBlur;
    private readonly onMouseEnter;
    private readonly onMouseLeave;
    private readonly onChange;
    private valueAsPercent;
    private normalizeOrigin;
    private get knobPositionerStyle();
    private clamp;
}
export type TrackProps = Pick<BaseSliderProps, 'min' | 'max' | 'snap' | 'trackFill'>;
export type KnobProps = BaseSliderState & Pick<BaseSliderProps, 'value' | 'trackFill' | 'disabled'>;
export {};
