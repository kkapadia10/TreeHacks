import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Preconditions } from '../../../../base/preconditions';
import classNames from 'classnames';
import * as mobxReact from 'mobx-react';
import * as React from 'react';
import { accessModeState } from '../../a11y/access_mode_state/access_mode_state';
import { pointerInputState } from '../../a11y/pointer_input_state/pointer_input_state';
import { useControllableValue } from '../../controllable_value/controllable_value';
import { MinusIcon } from '../../icons/minus/icon';
import { TickIcon } from '../../icons/tick/icon';
import { Text } from '../../typography/typography';
import styles, { getStyle } from './checkbox.css';
export const InheritColor = Symbol('inherit');
export const Checkbox = mobxReact.observer(function Checkbox(props) {
    const { label, description, checked: checkedProp, defaultChecked, disabled, autoComplete, value = '',
    labelClassName, className, size = 'small', id, ariaLabel, ariaLabelledBy, ariaDescribedBy, tone = 'primary', focusRef, onFocus, onBlur, onChange: onChangeProp, } = props;
    const [checked, setChecked] = useControllableValue({
        value: checkedProp === 'indeterminate' ? false : checkedProp,
        defaultValue: defaultChecked !== null && defaultChecked !== void 0 ? defaultChecked : false,
    });
    if (description != null) {
        Preconditions.checkArgument(label != null, 'Provide label to display description in the checkbox');
    }
    const descriptionId = React.useId();
    const formattedValue = React.useMemo(() => {
        if (value === undefined) {
            return undefined;
        }
        if (typeof value === 'string' || typeof value === 'number') {
            return value;
        }
        return JSON.stringify(value);
    }, [value]);
    const onChange = React.useCallback((event) => {
        setChecked(event.target.checked);
        onChangeProp === null || onChangeProp === void 0 ? void 0 : onChangeProp(value, event.target.checked);
    }, [setChecked, onChangeProp, value]);
    const containerClassName = classNames(styles.container, {
        [styles.disabled]: !!disabled,
        [styles.hoverSupported]: pointerInputState.isMouseInput,
        [styles.labelContainer]: label != null,
    }, className);
    const labelContent = (_jsx(Text, { className: classNames(styles.checkboxLabel, labelClassName), tagName: typeof label === 'string' ? 'p' : 'div', tone: disabled ? 'tertiary' : 'primary', children: label }));
    return (_jsxs("label", { className: containerClassName, children: [_jsxs("div", { className: classNames(styles.checkboxWrapper, {
                    [styles.medium]: size === 'medium',
                    [styles.withLabel]: label != null,
                }), children: [_jsx("input", { type: "checkbox", className: styles.checkbox, onChange: onChange, onFocus: onFocus, onBlur: onBlur, checked: checked, disabled: disabled, autoComplete: autoComplete, value: formattedValue, id: id, "aria-label": ariaLabel, "aria-describedby": ariaDescribedBy !== null && ariaDescribedBy !== void 0 ? ariaDescribedBy : (description ? descriptionId : undefined), "aria-labelledby": ariaLabelledBy, "aria-checked": checkedProp === 'indeterminate' ? 'mixed' : undefined, ref: focusRef }), _jsx(FakeCheckbox, { checked: checkedProp === 'indeterminate' ? checkedProp : checked, disabled: disabled, size: size, tone: tone, className: accessModeState.isMouseMode ? styles.hideOutline : undefined })] }), label != null
                && (description != null
                    ? (_jsxs("div", { className: styles.checkboxText, children: [labelContent, _jsx("div", { "aria-hidden": true, children: _jsx(Text, { className: styles.checkboxDescription, id: descriptionId, tone: "tertiary", size: "small", children: description }) })] }))
                    : labelContent)] }));
});
export const FakeCheckbox = ({ checked, disabled, size = 'small', tone = 'primary', className, }) => {
    return (_jsx("span", { "aria-hidden": true, className: classNames(styles.uiCheckbox, size === 'medium' && styles.medium, tone === InheritColor ? styles.inherit : getStyle(tone), checked === true && styles.checked, checked === 'indeterminate' && styles.indeterminate, disabled && styles.disabled, className), children: checked === 'indeterminate'
            ? _jsx(MinusIcon, { size: size, className: styles.minus })
            : _jsx(TickIcon, { size: size, className: styles.tick }) }));
};
