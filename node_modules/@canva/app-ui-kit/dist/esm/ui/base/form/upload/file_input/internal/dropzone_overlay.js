import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import classNames from 'classnames';
import * as React from 'react';
import { ImageIcon } from '../../../../icons/image/icon';
import { MusicIcon } from '../../../../icons/music/icon';
import { PrintDocumentIcon } from '../../../../icons/print_document/icon';
import { UploadsIcon } from '../../../../icons/uploads/icon';
import { VideoIcon } from '../../../../icons/video/icon';
import { Inline, Rows, Spacer } from '../../../../layout/layout';
import { Text } from '../../../../typography/typography';
import { useDropzoneContext } from './dropzone_context';
import styles from './dropzone_overlay.css';
import { DropzoneOverlayMessages as Messages } from './dropzone_overlay.messages';
export const DropzoneOverlayInternal = React.memo((props) => {
    const dropzoneContext = useDropzoneContext();
    const { variant = 'surface', isOver, multiple, icon: Icon = UploadsIcon, title, description, acceptCategories, disabled, } = {
        ...dropzoneContext,
        ...props,
    };
    const mainText = title !== null && title !== void 0 ? title : (multiple ? Messages.mainText() : Messages.mainTextSingleFile());
    return (_jsx("div", { className: classNames(styles.dropzoneOverlay, {
            [styles.input]: variant === 'input',
            [styles.surface]: variant === 'surface',
            [styles.fileHovering]: isOver,
            [styles.disabled]: disabled,
        }), "aria-hidden": !isOver || disabled, children: _jsxs(Rows, { spacing: "0", align: "center", children: [_jsx(Icon, { size: "large", tone: "primary" }), _jsx(Text, { tone: "primary", size: "large", weight: "bold", tagName: "span", alignment: "center", children: mainText }), description != null && (_jsx(Text, { tone: "secondary", size: "small", tagName: "span", alignment: "center", children: description })), acceptCategories != null && (_jsxs(_Fragment, { children: [_jsx(Spacer, { direction: "vertical", size: "3u" }), _jsx(FileCategoryList, { acceptCategories: acceptCategories })] }))] }) }));
});
const FileCategory = ({ category, icon: Icon, fileTypes, }) => {
    return (_jsxs(Rows, { spacing: "0", children: [_jsxs(Inline, { align: "center", alignY: "center", spacing: "0.5u", children: [Icon && _jsx(Icon, { size: "small", tone: "secondary" }), _jsx(Text, { weight: "bold", tone: "secondary", children: category })] }), _jsx(Text, { size: "small", tone: "secondary", alignment: "center", children: fileTypes.map(s => s.toUpperCase()).join(Messages.separator()) })] }));
};
const FileCategoryList = ({ acceptCategories }) => {
    return (_jsxs(Rows, { spacing: "2u", children: [acceptCategories['file'] != null && (_jsx(FileCategory, { category: Messages.files(), icon: PrintDocumentIcon, fileTypes: acceptCategories['file'] })), acceptCategories['image'] != null && (_jsx(FileCategory, { category: Messages.images(), icon: ImageIcon, fileTypes: acceptCategories['image'] })), acceptCategories['video'] != null && (_jsx(FileCategory, { category: Messages.videos(), icon: VideoIcon, fileTypes: acceptCategories['video'] })), acceptCategories['audio'] != null && (_jsx(FileCategory, { category: Messages.audio(), icon: MusicIcon, fileTypes: acceptCategories['audio'] }))] }));
};
export const DropzoneOverlay = (props) => {
    return _jsx(DropzoneOverlayInternal, { ...props });
};
