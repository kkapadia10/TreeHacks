import { jsx as _jsx } from "react/jsx-runtime";
import { Preconditions } from '../../../../../base/preconditions';
import * as React from 'react';
const InputControlsContext = React.createContext(undefined);
const InputValueContext = React.createContext('undefined');
export function useCreateInputControls(controls) {
    const innerControls = React.useRef(controls);
    innerControls.current.focus = controls.focus;
    innerControls.current.setValue = controls.setValue;
    innerControls.current.setType = controls.setType;
    innerControls.current.setDisabled = controls.setDisabled;
    return innerControls.current;
}
export function useInputControls() {
    return Preconditions.checkExists(React.useContext(InputControlsContext));
}
export function useInputValue() {
    return Preconditions.checkExists(React.useContext(InputValueContext));
}
export function BaseInputContextProvider(props) {
    return (_jsx(InputControlsContext.Provider, { value: props.controls, children: _jsx(InputValueContext.Provider, { value: props.value, children: props.children }) }));
}
export function usePropOverrides(props) {
    const [overrides, setPropOverrides] = React.useState(undefined);
    return {
        props: overrides != null ? { ...props, ...overrides } : props,
        setPropOverrides,
    };
}
