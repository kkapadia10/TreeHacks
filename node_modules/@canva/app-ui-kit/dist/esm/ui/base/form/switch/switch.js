import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import classNames from 'classnames';
import * as React from 'react';
import { BasicButton } from '../../button/button';
import { useControllableValue } from '../../controllable_value/controllable_value';
import { TickIcon } from '../../icons/tick/icon';
import { useEnableAnimations } from '../../provider/provider';
import { Text } from '../../typography/typography';
import styles from './switch.css';
export const Switch = (props) => {
    const { id, value: valueProp, defaultValue: defaultValueProp, onChange: onChangeProp, disabled, label, labelWeight = 'regular', description, ariaLabel, ariaLabelledBy, ariaDescribedBy, focusRef, onFocus, onBlur, } = props;
    const [value, setValue] = useControllableValue({
        value: valueProp,
        defaultValue: defaultValueProp !== null && defaultValueProp !== void 0 ? defaultValueProp : false,
    });
    const labelId = React.useId();
    const descriptionId = React.useId();
    const generatedButtonId = React.useId();
    const buttonId = id || generatedButtonId;
    const switchClassNames = classNames(styles.switch, value ? styles.switchOn : styles.switchOff, {
        [styles.disabled]: disabled,
        [styles.animated]: useEnableAnimations(),
    });
    const onChange = React.useCallback((value, e) => {
        setValue(value);
        onChangeProp === null || onChangeProp === void 0 ? void 0 : onChangeProp(value, e);
    }, [onChangeProp, setValue]);
    const getButton = (buttonId, labelId, descriptionId) => (_jsx(BasicButton, { role: "switch", onClick: event => onChange(!value, event), className: switchClassNames, disabled: disabled, active: value, ariaLabel: ariaLabel, ariaLabelledBy: ariaLabelledBy !== null && ariaLabelledBy !== void 0 ? ariaLabelledBy : labelId, ariaDescribedBy: ariaDescribedBy !== null && ariaDescribedBy !== void 0 ? ariaDescribedBy : (description ? descriptionId : undefined), alignment: "start", noChildWrapper: true, id: buttonId, focusRef: focusRef, onFocus: onFocus, onBlur: onBlur, children: _jsx("span", { className: styles.animationWrapper, children: _jsx("span", { className: styles.thumb, children: _jsx(TickIcon, { size: "tiny", className: styles.tick }) }) }) }));
    if (label == null) {
        return getButton(id);
    }
    return (_jsxs(
        "div",
        { className: styles.switchWrapper, children: [_jsx("label", { htmlFor: buttonId, className: styles.switchText, id: labelId, children: _jsx(SwitchLabelAndDescription, { label: label, description: description, disabled: disabled, descriptionId: descriptionId, labelWeight: labelWeight }) }), getButton(buttonId, labelId, descriptionId)] }
    ));
};
function SwitchLabelAndDescription({ label, description, disabled, descriptionId, labelWeight, }) {
    const labelElement = typeof label === 'string'
        ? (_jsx(Text, { tagName: "span", margins: "none", tone: disabled ? 'tertiary' : 'primary', weight: labelWeight, className: styles.switchLabel, children: label }))
        : _jsx(_Fragment, { children: label });
    if (!description) {
        return labelElement;
    }
    return (_jsxs(_Fragment, { children: [labelElement, _jsx("div", { "aria-hidden": true, children: _jsx(Text, { className: styles.switchDescription, id: descriptionId, tone: "tertiary", size: "small", children: description }) })] }));
}
