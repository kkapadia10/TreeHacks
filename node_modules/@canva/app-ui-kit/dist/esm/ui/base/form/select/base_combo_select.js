import { makeObservable } from '../../../../base/make_observable/make_observable';
import { __decorate } from "tslib";
import { jsx as _jsx, Fragment as _Fragment } from "react/jsx-runtime";
import * as mobx from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';
import { BaseInput } from '../input/base_input';
import { BaseSelect } from './base_select';
import { BaseSelectPresenter, BaseSelectStore } from './base_select_presenter';
import { flattenOptions } from './base_select_util';
import { BaseSelectItem } from './stateless_base_select';
class BaseComboSelectStore extends BaseSelectStore {
  static _makeObservable(instance) {
    makeObservable(instance, {
      value: mobx.observable.ref,
      filteredOptions: mobx.observable.ref
    });
  }
  constructor() {
    super(...arguments);
    BaseComboSelectStore._makeObservable(this);
    this.filteredOptions = [];
  }
}
class BaseComboSelectPresenter extends BaseSelectPresenter {
  static _makeObservable(instance) {
    makeObservable(instance, {
      filterOptions: mobx.action
    });
  }
  constructor(...args) {
    super(...args);
    BaseComboSelectPresenter._makeObservable(this);
  }
  filterOptions(store, value, options, filterFn) {
    const filteredOptions = filterFn(value, options);
    this.toggle(store, !!filteredOptions.length);
    if (store.open) {
      store.filteredOptions = filteredOptions;
    }
  }
}
const defaultFilterFn = (value, options) => {
  const lowerCaseValue = value.toLocaleLowerCase().replace(/[^\w]/g, '');
  return value ? options.filter(option => {
    var _a;
    const lowerCaseOption = `${(_a = option.value) !== null && _a !== void 0 ? _a : ''} ${option.label}`.toLocaleLowerCase();
    if (lowerCaseOption === lowerCaseValue) {
      return false;
    }
    return lowerCaseOption.replace(/[^\w]/g, '').includes(lowerCaseValue);
  }) : [];
};
let BaseComboSelect = class BaseComboSelect extends React.Component {
  static _makeObservable(instance) {
    makeObservable(instance, {
      onChange: mobx.action
    });
  }
  constructor() {
    super(...arguments);
    BaseComboSelect._makeObservable(this);
    this.presenter = new BaseComboSelectPresenter();
    this.store = new BaseComboSelectStore();
    this.onChange = (value, e) => {
      var _a, _b;
      const {
        filterFn = defaultFilterFn
      } = this.props;
      const options = flattenOptions(this.props.options);
      this.presenter.filterOptions(this.store, value, options, filterFn);
      this.presenter.setValue(this.store, value);
      (_b = (_a = this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, value, e);
    };
    this.Trigger = props => {
      return _jsx(BaseInput, {
        type: "text",
        value: this.value,
        placeholder: this.props.placeholder,
        disabled: props.disabled,
        error: props.error,
        onChange: this.onChange,
        ariaAutoComplete: "list",
        ariaControls: props.ariaControls,
        ariaActiveDescendant: props.ariaActiveDescendant,
        ariaLabel: props.ariaLabel,
        ariaLabelledBy: props.ariaLabelledBy,
        role: props.role,
        ariaExpanded: props.open
      });
    };
    this.Item = props => {
      return _jsx(BaseSelectItem, {
        ...props,
        end: _jsx(_Fragment, {})
      });
    };
  }
  get value() {
    var _a;
    return (_a = this.props.value) !== null && _a !== void 0 ? _a : this.store.value;
  }
  render() {
    const {
      value,
      placeholder,
      onChange,
      ...props
    } = this.props;
    return _jsx(BaseSelect, {
      ...props,
      flyoutMode: "pin",
      Trigger: this.Trigger,
      Item: this.Item,
      presenter: this.presenter,
      store: this.store,
      options: this.store.filteredOptions
    });
  }
};
BaseComboSelect = __decorate([observer], BaseComboSelect);
export { BaseComboSelect };