import { jsx as _jsx } from "react/jsx-runtime";
import { createElement as _createElement } from "react";
import * as React from 'react';
import { useControllableValue } from '../../controllable_value/controllable_value';
import { Checkbox } from './checkbox';
import styles from './checkbox_group.css';
export function CheckboxGroup(props) {
    const { value: valueProp, defaultValue: defaultValueProp, options, onChange: onChangeProp, disabled, id, ariaLabel, ariaLabelledBy, ariaDescribedBy, focusRef, onFocus, onBlur, } = props;
    const groupRef = React.useRef(null);
    const [value, setValue] = useControllableValue({
        value: valueProp,
        defaultValue: defaultValueProp || [],
    });
    const onChange = React.useCallback((newValue, checked) => {
        const newValues = checked ? value.concat(newValue) : value.filter(v => v !== newValue);
        setValue(newValues);
        onChangeProp === null || onChangeProp === void 0 ? void 0 : onChangeProp(newValues);
    }, [onChangeProp, setValue, value]);
    const onItemFocus = React.useCallback((e) => {
        var _a;
        const previouslyFocussedElement = e.relatedTarget;
        if (previouslyFocussedElement && ((_a = groupRef === null || groupRef === void 0 ? void 0 : groupRef.current) === null || _a === void 0 ? void 0 : _a.contains(previouslyFocussedElement))) {
            return;
        }
        onFocus === null || onFocus === void 0 ? void 0 : onFocus(e);
    }, [onFocus]);
    const onItemBlur = React.useCallback((e) => {
        var _a;
        const nextElementToBeFocussed = e.relatedTarget;
        if (nextElementToBeFocussed && ((_a = groupRef === null || groupRef === void 0 ? void 0 : groupRef.current) === null || _a === void 0 ? void 0 : _a.contains(nextElementToBeFocussed))) {
            return;
        }
        onBlur === null || onBlur === void 0 ? void 0 : onBlur(e);
    }, [onBlur]);
    return (_jsx("div", { role: "group", id: id, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, "aria-describedby": ariaDescribedBy, className: styles.checkboxGroup, ref: groupRef, children: options.map((option, index) => {
            var _a;
            const checked = value.indexOf(option.value) >= 0;
            return (_createElement(Checkbox, { ...option, disabled: (_a = option.disabled) !== null && _a !== void 0 ? _a : disabled, checked: checked, key: index, size: "small", onChange: onChange, focusRef: index === 0 ? focusRef : undefined, onFocus: onFocus && onItemFocus, onBlur: onBlur && onItemBlur }));
        }) }));
}
