import { jsx as _jsx, Fragment as _Fragment } from "react/jsx-runtime";
import composeRefs from '@seznam/compose-react-refs';
import classNames from 'classnames';
import { Observer } from 'mobx-react';
import * as React from 'react';
import { pointerInputState } from '../../a11y/pointer_input_state/pointer_input_state';
import { BasicButton } from '../../button/button';
import { useControllableValue } from '../../controllable_value/controllable_value';
import { useFocusableRef } from '../../focusable/focusable';
import { useKeyCombinationHandler } from '../../key_combinations/use_key_combination_handler';
import { Grid } from '../../layout/layout';
import { InheritColor, Text } from '../../typography/typography';
import styles from './segmented_control.css';
export function SegmentedControl(props) {
    const { id: idProp, ariaLabel, ariaLabelledBy, ariaDescribedBy, disabled, options, value: valueProp, defaultValue, onChange: onChangeProp, focusRef: focusRefProp, onFocus: onFocusProp, onBlur: onBlurProp, } = props;
    const [value, setValue] = useControllableValue({
        value: valueProp,
        defaultValue,
    });
    const fallbackId = React.useId();
    const id = idProp !== null && idProp !== void 0 ? idProp : fallbackId;
    const focusRef = useFocusableRef(focusRefProp);
    const containerRef = React.useRef(null);
    const availableOptions = React.useMemo(() => {
        return options.filter(option => {
            return !option.disabled;
        });
    }, [options]);
    const itemIds = options.map((option, itemIndex) => `${id}--${itemIndex}`);
    const activeIndex = options.findIndex(option => option.value === value);
    const onChange = React.useCallback((value) => {
        setValue(value);
        onChangeProp === null || onChangeProp === void 0 ? void 0 : onChangeProp(value);
    }, [onChangeProp, setValue]);
    const onFocus = React.useCallback((e) => {
        var _a;
        const previouslyFocussedElement = e.relatedTarget;
        if (previouslyFocussedElement && ((_a = containerRef === null || containerRef === void 0 ? void 0 : containerRef.current) === null || _a === void 0 ? void 0 : _a.contains(previouslyFocussedElement))) {
            return;
        }
        onFocusProp === null || onFocusProp === void 0 ? void 0 : onFocusProp(e);
    }, [onFocusProp]);
    const onBlur = React.useCallback((e) => {
        var _a;
        const nextElementToBeFocussed = e.relatedTarget;
        if (nextElementToBeFocussed && ((_a = containerRef === null || containerRef === void 0 ? void 0 : containerRef.current) === null || _a === void 0 ? void 0 : _a.contains(nextElementToBeFocussed))) {
            return;
        }
        onBlurProp === null || onBlurProp === void 0 ? void 0 : onBlurProp(e);
    }, [onBlurProp]);
    const moveSelection = React.useCallback((delta) => {
        const currentIndex = availableOptions.findIndex(option => option.value === value);
        const newIndex = ((currentIndex > -1 ? currentIndex : 0) + availableOptions.length + delta)
            % availableOptions.length;
        onChange(availableOptions[newIndex].value);
    }, [availableOptions, value, onChange]);
    const { ref: keyRef } = useKeyCombinationHandler([
        ['ArrowUp', () => moveSelection(-1)],
        ['ArrowDown', () => moveSelection(1)],
        ['previous', () => moveSelection(-1)],
        ['next', () => moveSelection(1)],
    ], { handleInputs: true });
    return (_jsx("div", { ref: composeRefs(keyRef, focusRef, containerRef), "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, "aria-describedby": ariaDescribedBy, className: classNames(styles.segmentedControl, {
            [styles.disabled]: disabled,
        }), id: id, role: "radiogroup", tabIndex: disabled ? -1 : 0, onFocus: onFocus, onBlur: onBlur, "aria-activedescendant": itemIds[activeIndex !== null && activeIndex !== void 0 ? activeIndex : -1], children: _jsx(Grid, { spacing: "0.5u", columns: options.length, children: options.map((option, index) => {
                var _a;
                return (_jsx(SegmentedControlItem, { label: option.label, active: option.value === value, disabled: (_a = option.disabled) !== null && _a !== void 0 ? _a : disabled, onChange: onChange, value: option.value, ariaLabel: option.ariaLabel, id: itemIds[index] }, index));
            }) }) }));
}
function SegmentedControlItem(props) {
    const { active, ariaLabel, disabled, label, onChange, value, id } = props;
    return (_jsx(Observer, { children: () => (_jsx(BasicButton, { active: active, className: classNames(styles.buttonItem, {
                [styles.buttonItemActive]: active,
                [styles.hoverSupported]: pointerInputState.isMouseInput,
            }), disabled: disabled, role: "radio", ariaLabel: ariaLabel, id: id, tabIndex: -1, onClick: () => !active && onChange(value), size: "small", noChildWrapper: true, children: typeof label === 'string'
                ? (_jsx(Text, { tagName: "span", alignment: "center", tone: InheritColor, weight: active ? 'bold' : 'regular', children: label }))
                : _jsx(_Fragment, { children: label }) })) }));
}
