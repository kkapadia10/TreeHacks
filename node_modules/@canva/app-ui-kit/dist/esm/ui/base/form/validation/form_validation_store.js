import { makeObservable } from '../../../../base/make_observable/make_observable';
import { __decorate } from "tslib";
import * as mobx from 'mobx';
import * as React from 'react';
export class FormValidationStore {
  static _makeObservable(instance) {
    makeObservable(instance, {
      fields: mobx.observable.shallow
    });
  }
  constructor() {
    FormValidationStore._makeObservable(this);
    this.fields = new Map();
  }
}
const registerField = mobx.action((store, fieldName, fieldValidationStore) => {
  store.fields.set(fieldName, fieldValidationStore);
});
const deregisterField = mobx.action((store, fieldName) => {
  store.fields.delete(fieldName);
});
export const FormValidationContext = React.createContext(null);
export function useRegisterFormValidation(
  {
    name,
    fieldValidation
  }
) {
  var _a;
  const store = (_a = React.useContext(FormValidationContext)) === null || _a === void 0 ? void 0 : _a.store;
  React.useEffect(() => {
    if (store == null || name == null) {
      return;
    }
    registerField(store, name, fieldValidation);
    return () => {
      deregisterField(store, name);
    };
  }, [fieldValidation, name, store]);
}