import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import composeRefs from '@seznam/compose-react-refs';
import classNames from 'classnames';
import { Observer } from 'mobx-react';
import * as React from 'react';
import { accessModeState } from '../../../a11y/access_mode_state/access_mode_state';
import { WithKeyCombinationHandler } from '../../../key_combinations/use_key_combination_handler';
import { Text } from '../../../typography/typography';
import styles from './radio_item.css';
const setToKeyboardMode = () => {
    accessModeState.setAccessMode('keyboard');
};
const inputKeyMap = [
    ['ArrowUp', setToKeyboardMode],
    ['ArrowDown', setToKeyboardMode],
    ['ArrowLeft', setToKeyboardMode],
    ['ArrowRight', setToKeyboardMode],
];
export function RadioItem(
    { label, description, className, disabled, checked, ariaLabel, focusRef, name, value, onChange: _onChange, onFocus, onBlur, }
) {
    const formatValue = () => {
        if (value === undefined) {
            return undefined;
        }
        if (typeof value === 'string' || typeof value === 'number') {
            return value;
        }
        return JSON.stringify(value);
    };
    const onChange = (event) => {
        if (_onChange != null && !checked) {
            _onChange(value, event);
        }
    };
    const inputId = React.useId();
    const descriptionId = React.useId();
    return (_jsx(
        WithKeyCombinationHandler,
        { map: inputKeyMap, handleInputs: true, children: ({ ref }) => (_jsx(Observer, { children: () => (_jsxs(_Fragment, { children: [_jsx("input", { id: inputId, "aria-describedby": description ? descriptionId : undefined, type: "radio", className: styles.radio, onChange: onChange, "aria-label": ariaLabel, ref: composeRefs(focusRef, ref), value: formatValue(), disabled: disabled, checked: checked, name: name, onFocus: onFocus, onBlur: onBlur }), _jsxs("label", { htmlFor: inputId, 
                            onClick: event => event.stopPropagation(), className: classNames(styles.label, className, {
                                [styles.hideOutline]: accessModeState.isMouseMode,
                                [styles.disabled]: disabled,
                            }), children: [_jsx("span", { "aria-hidden": true, className: classNames(styles.uiRadio, { [styles.hasLabelText]: !!label }) }), _jsx(RadioItemLabel, { label: label, description: description, descriptionId: descriptionId, disabled: disabled })] })] })) })) }
    ));
}
function RadioItemLabel({ label, description, disabled, descriptionId, }) {
    const labelElement = typeof label === 'string'
        ? (_jsx(Text, { tagName: "span", margins: "none", tone: disabled ? 'tertiary' : 'primary', children: label }))
        : _jsx(_Fragment, { children: label });
    if (!description) {
        return labelElement;
    }
    return (_jsxs("div", { children: [labelElement, _jsx("div", { "aria-hidden": true, children: _jsx(Text, { id: descriptionId, tone: "tertiary", size: "small", children: description }) })] }));
}
