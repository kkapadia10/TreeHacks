import * as React from 'react';
import type { Focusable } from '../../focusable/focusable';
export declare const InheritColor: unique symbol;
type Tone = 'primary' | typeof InheritColor;
export type CheckboxProps<T> = {
    label?: React.ReactNode
    description?: string
    onChange?(value: T | '', checked: boolean): void
    disabled?: boolean
    checked?: boolean | 'indeterminate';
    defaultChecked?: boolean
    autoComplete?: 'on' | 'off'
    value?: T;
    className?: string
    labelClassName?: string
    size?: 'small' | 'medium'
    id?: string
    ariaLabel?: string
    ariaDescribedBy?: string
    ariaLabelledBy?: string
    tone?: Tone
    focusRef?: React.RefObject<Focusable>
    onFocus?: React.FocusEventHandler
    onBlur?: React.FocusEventHandler
};
export declare const Checkbox: <T>(props: CheckboxProps<T>) => import("react/jsx-runtime").JSX.Element;
export type FakeCheckboxProps = Pick<CheckboxProps<unknown>, 'checked' | 'disabled' | 'size' | 'tone' | 'className'>;
export declare const FakeCheckbox: ({ checked, disabled, size, tone, className, }: FakeCheckboxProps) => import("react/jsx-runtime").JSX.Element;
export {};
