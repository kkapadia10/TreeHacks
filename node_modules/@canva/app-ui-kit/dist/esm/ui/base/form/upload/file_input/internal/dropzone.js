import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import * as React from 'react';
import { useDrop } from 'react-dnd';
import { NativeTypes } from 'react-dnd-html5-backend';
import styles from './dropzone.css';
import { DropzoneContext } from './dropzone_context';
import { DropzoneOverlay } from './dropzone_overlay';
import { getValidatedFiles } from './file_validation';
export const Dropzone = ({ disabled, multiple, accept, onDropAcceptedFiles, onDropRejectedFiles, children, showOverlay = true, }) => {
    const onDrop = React.useCallback((files) => {
        if (disabled) {
            return;
        }
        const { acceptedFiles, rejectedFiles } = getValidatedFiles(files, multiple, accept);
        acceptedFiles.length > 0 && (onDropAcceptedFiles === null || onDropAcceptedFiles === void 0 ? void 0 : onDropAcceptedFiles(acceptedFiles));
        rejectedFiles.length > 0 && (onDropRejectedFiles === null || onDropRejectedFiles === void 0 ? void 0 : onDropRejectedFiles(rejectedFiles));
    }, [accept, disabled, multiple, onDropAcceptedFiles, onDropRejectedFiles]);
    const [{ isOver }, dropRef] = useDrop({
        accept: [NativeTypes.FILE],
        collect: monitor => ({ isOver: monitor.isOver() }),
        drop(e) {
            const { files } = e;
            files && onDrop(files);
        },
    });
    const dropzoneContext = React.useMemo(() => ({ isOver, disabled, accept, onDropAcceptedFiles, onDropRejectedFiles }), [accept, disabled, isOver, onDropAcceptedFiles, onDropRejectedFiles]);
    return (_jsx("div", { className: styles.dropzone, ref: dropRef, children: _jsxs(DropzoneContext.Provider, { value: dropzoneContext, children: [children, showOverlay && _jsx(DropzoneOverlay, {})] }) }));
};
