import { makeObservable } from '../../../../../base/make_observable/make_observable';
import { __decorate } from "tslib";
import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import composeRefs from '@seznam/compose-react-refs';
import { Preconditions } from '../../../../../base/preconditions';
import { action, observable } from 'mobx';
import { observer } from 'mobx-react';
import * as React from 'react';
import { domIdGenerator } from '../../../dom/id_generator/id_generator';
import styles from './file_selector.css';
let WithFileSelector = class WithFileSelector extends React.Component {
  static _makeObservable(instance) {
    makeObservable(instance, {
      fileInputKey: observable.ref,
      onFileInput: action
    });
  }
  constructor() {
    super(...arguments);
    WithFileSelector._makeObservable(this);
    this.inputRef = React.createRef();
    this.separator =
    typeof navigator !== 'undefined' && /(Android.*MicroMessenger)/i.test(navigator.userAgent) ? ';' : ',';
    this.fileInputKey = domIdGenerator.next();
    this.onFileInput = event => {
      const {
        onSelectFiles
      } = this.props;
      const files = event.target.files;
      if (files) {
        onSelectFiles === null || onSelectFiles === void 0 ? void 0 : onSelectFiles(Array.from(files));
      }
      this.fileInputKey = domIdGenerator.next();
    };
    this.openFileSelection = () => {
      Preconditions.checkExists(this.inputRef.current).click();
    };
  }
  render() {
    const {
      children,
      mimeTypes,
      multiple,
      disabled
    } = this.props;
    const accept = mimeTypes != null && mimeTypes.length > 0 ? mimeTypes.join(this.separator) : undefined;
    return _jsxs(_Fragment, {
      children: [_jsx("input", {
        ref: composeRefs(this.inputRef, this.props.inputRef),
        type: "file",
        className: styles.input,
        tabIndex: -1,
        "aria-hidden": "true",
        multiple: multiple,
        accept: accept,
        onChange: this.onFileInput,
        disabled: disabled
      }, this.fileInputKey), children({
        onClick: this.openFileSelection
      })]
    });
  }
};
WithFileSelector = __decorate([observer], WithFileSelector);
export { WithFileSelector };