import { jsx as _jsx } from "react/jsx-runtime";
import composeRefs from '@seznam/compose-react-refs';
import { cleanupVideoSrcOnUnmount } from '../../../base/platform_quirks/video_src_cleanup';
import * as React from 'react';
import { prefersReducedMotion as prefersReducedMotionBase } from '../animation/supports_animation';
import { bootstrap as uiBootstrap } from '../bootstrap/bootstrap';
import { AutoplayVideos } from '../bootstrap/ui_bootstrap_proto';
function setMutedAndPlaybackRate(video, muted, playbackRate) {
    video.muted = muted;
    video.playbackRate = playbackRate;
    video.defaultPlaybackRate = playbackRate;
}
export function createVideoComponent(cleanup = cleanupVideoSrcOnUnmount) {
    const Video = React.forwardRef((props, ref) => {
        const videoRef = React.useRef(null);
        const { muted = false, playbackRate = 1, ariaLabel, ariaHidden, ...rest } = props;
        React.useEffect(() => {
            const video = videoRef.current;
            if (video) {
                setMutedAndPlaybackRate(video, muted, playbackRate);
            }
        }, [muted, playbackRate]);
        const onVideoRef = React.useCallback((ref) => {
            const oldRef = videoRef.current;
            videoRef.current = ref;
            if (oldRef && ref !== oldRef) {
                ref && setMutedAndPlaybackRate(ref, oldRef.muted, oldRef.playbackRate);
                cleanup(oldRef);
            }
        }, []);
        return (_jsx(
            "video",
            { ref: composeRefs(onVideoRef, ref), "aria-label": ariaLabel, "aria-hidden": ariaHidden, ...rest }
        ));
    });
    Video.displayName = 'Video';
    return Video;
}
export function createVideoA11ySafeComponent(Video, prefersReducedMotion = prefersReducedMotionBase) {
    const autoPlayingVideos = [];
    const addAutoplayingVideo = (video) => autoPlayingVideos.push(video);
    const maybeRemoveAutoplayingVideo = (video) => {
        const index = autoPlayingVideos.indexOf(video);
        if (index >= 0) {
            autoPlayingVideos.splice(index, 1);
        }
    };
    const maybeSuppressPlayError = (e) => {
        if (e.name === 'NotAllowedError') {
            return;
        }
        throw e;
    };
    window.addEventListener('blur', () => autoPlayingVideos.forEach(video => video.pause()));
    window.addEventListener('focus', () => autoPlayingVideos.forEach(video => video.play().catch(maybeSuppressPlayError)));
    const enabledAutoPlay = canA11ySafeVideoAutoplay(prefersReducedMotion);
    const VideoA11ySafe = React.forwardRef((props, ref) => {
        const videoRef = React.useRef(null);
        const { autoPlay = false, ...omitAutoPlayProps } = props;
        React.useEffect(() => {
            const video = videoRef.current;
            if (video) {
                video.autoplay = autoPlay && enabledAutoPlay;
                if (video.autoplay) {
                    addAutoplayingVideo(video);
                }
                else {
                    maybeRemoveAutoplayingVideo(video);
                }
                return () => maybeRemoveAutoplayingVideo(video);
            }
        }, [autoPlay]);
        return _jsx(Video, { ref: composeRefs(videoRef, ref), ...omitAutoPlayProps });
    });
    return VideoA11ySafe;
}
export function canA11ySafeVideoAutoplay(prefersReducedMotion = prefersReducedMotionBase) {
    var _a;
    const autoplayVideosSetting = (_a = uiBootstrap.autoplayVideos) !== null && _a !== void 0 ? _a : AutoplayVideos.ADAPTIVE;
    return (uiBootstrap.enableAnimations
        && (autoplayVideosSetting === AutoplayVideos.AUTOPLAY
            || (autoplayVideosSetting === AutoplayVideos.ADAPTIVE && !prefersReducedMotion())));
}
export const Video = createVideoComponent();
export const VideoA11ySafe = createVideoA11ySafeComponent(Video);
