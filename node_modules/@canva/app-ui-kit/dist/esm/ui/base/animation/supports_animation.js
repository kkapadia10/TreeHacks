import * as React from 'react';
export function prefersReducedMotion() {
    const listener = getPrefersReducedMotionListener();
    return listener.prefersReducedMotion;
}
export function usePrefersReducedMotion() {
    const listener = getPrefersReducedMotionListener();
    const [reduce, setReduce] = React.useState(listener.prefersReducedMotion);
    React.useEffect(() => {
        if (listener != null) {
            const callback = (e) => setReduce(e.matches);
            listener.addListener(callback);
            return () => {
                listener.removeListener(callback);
            };
        }
    }, [listener, setReduce]);
    return reduce;
}
function getPrefersReducedMotionListener() {
    return globalListener !== null && globalListener !== void 0 ? globalListener : (globalListener = new PrefersReducedMotionListener());
}
class PrefersReducedMotionListener {
    get prefersReducedMotion() {
        return this.mediaQuery != null && this.mediaQuery.matches;
    }
    constructor() {
        this.mediaQuery =
            window.matchMedia
                && window.matchMedia('(prefers-reduced-motion: reduce)');
    }
    addListener(listener) {
        var _a;
        (_a = this.mediaQuery) === null || _a === void 0 ? void 0 : _a.addListener(listener);
    }
    removeListener(listener) {
        var _a;
        (_a = this.mediaQuery) === null || _a === void 0 ? void 0 : _a.removeListener(listener);
    }
}
let globalListener;
