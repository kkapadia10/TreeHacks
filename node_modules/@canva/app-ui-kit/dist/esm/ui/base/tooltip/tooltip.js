import { makeObservable } from '../../../base/make_observable/make_observable';
var TriggeredTooltip_1;
import { __decorate } from "tslib";
import { jsx as _jsx } from "react/jsx-runtime";
import * as mobx from 'mobx';
import * as mobxReact from 'mobx-react';
import * as React from 'react';
import { baseUnit } from '../metrics/metrics';
import { InternalTooltip, StatelessTooltip, TooltipArrow, TooltipContent } from './internal_tooltip';
import { TooltipPresenter } from './tooltip_presenter';
export { TooltipArrow, TooltipContent };
export const Tooltip = React.forwardRef((props,
ref) => _jsx(InternalTooltip, {
  ...props,
  forwardedRef: ref
}));
Tooltip.displayName = 'Tooltip';
let TriggeredTooltip = TriggeredTooltip_1 = class TriggeredTooltip extends React.Component {
  constructor() {
    super(...arguments);
    this.presenter = new TooltipPresenter();
  }
  render() {
    const {
      state,
      ...rest
    } = this.props;
    return _jsx(StatelessTooltip, {
      ...rest,
      open: state.open,
      mode: "tooltip"
    });
  }
  componentDidMount() {
    mobxReact.disposeOnUnmount(this, mobx.autorun(() => {
      if (this.props.autoclose && this.props.state.open) {
        this.presenter.hideTooltip(this.props, TriggeredTooltip_1.fadeOutDelay);
      }
    }));
  }
};
TriggeredTooltip.defaultProps = {
  autoclose: true
};
TriggeredTooltip.fadeOutDelay = 2000;
TriggeredTooltip = TriggeredTooltip_1 = __decorate([mobxReact.observer], TriggeredTooltip);
export { TriggeredTooltip };
let FloatingTooltip = class FloatingTooltip extends React.Component {
  static _makeObservable(instance) {
    makeObservable(instance, {
      info: mobx.observable.ref
    });
  }
  constructor() {
    super(...arguments);
    FloatingTooltip._makeObservable(this);
    this.refObj = new FloatingTooltipReferenceObject(this);
    this.info = this.props;
  }
  componentDidMount() {
    this.dispose = mobx.reaction(() => this.props, ({
      open,
      label,
      placement,
      direction,
      x,
      y
    }) => open && (this.info = {
      label,
      placement,
      direction,
      x,
      y
    }));
  }
  componentWillUnmount() {
    this.dispose && this.dispose();
  }
  render() {
    const {
      refObj,
      props: {
        arrow,
        open
      },
      info: {
        label,
        placement = 'right-end',
        direction
      }
    } = this;
    return _jsx(StatelessTooltip, {
      label: label,
      open: open,
      arrow: !!arrow,
      refObj: refObj,
      placement: placement,
      direction: direction,
      mode: "tooltip"
    });
  }
};
FloatingTooltip = __decorate([mobxReact.observer], FloatingTooltip);
export { FloatingTooltip };
class FloatingTooltipReferenceObject {
  constructor(tooltip) {
    this.tooltip = tooltip;
  }
  get left() {
    return this.tooltip.info.x - FloatingTooltipReferenceObject.horizontalOffset;
  }
  get top() {
    return this.tooltip.info.y - FloatingTooltipReferenceObject.verticalOffset;
  }
  get width() {
    return 2 * FloatingTooltipReferenceObject.horizontalOffset;
  }
  get height() {
    return 2 * FloatingTooltipReferenceObject.verticalOffset;
  }
  get right() {
    return this.left + this.width;
  }
  get bottom() {
    return this.top + this.height;
  }
  get clientWidth() {
    return this.width;
  }
  get clientHeight() {
    return this.height;
  }
  get x() {
    return this.tooltip.info.x;
  }
  get y() {
    return this.tooltip.info.y;
  }
  toJSON() {
    const {
      bottom,
      height,
      left,
      right,
      top,
      width,
      x,
      y
    } = this;
    return {
      bottom,
      height,
      left,
      right,
      top,
      width,
      x,
      y
    };
  }
  getBoundingClientRect() {
    return this;
  }
}
FloatingTooltipReferenceObject.horizontalOffset = 3 * baseUnit;
FloatingTooltipReferenceObject.verticalOffset = 8 * baseUnit;