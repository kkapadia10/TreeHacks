import * as React from 'react';
import type { Direction } from '../provider/provider';
import { TooltipArrow, TooltipContent } from './internal_tooltip';
import type { Alignment, BaseTooltipProps, Placement, TooltipArrowProps, TooltipContentProps, TooltipProps, TriggerProps } from './internal_tooltip';
import type { TooltipState } from './tooltip_presenter';
export { TooltipArrow, TooltipContent };
export type { Alignment, Placement, TooltipArrowProps, TooltipContentProps, TooltipProps, TriggerProps, };
export declare const Tooltip: React.ForwardRefExoticComponent<{
    placement?: Placement | undefined;
    disabled?: boolean | undefined;
    closeOnClick?: boolean | undefined;
} & BaseTooltipProps & Pick<{
    mode?: "tooltip" | undefined;
    children?: React.ReactNode | import("./internal_tooltip").RenderTrigger;
    forwardedRef?: React.ForwardedRef<HTMLDivElement> | undefined;
}, "children"> & React.RefAttributes<HTMLDivElement>>;
export type TriggeredTooltipProps = {
    placement?: Placement;
    state: TooltipState;
    autoclose?: boolean;
    arrow?: boolean;
    lineClamp?: number;
} & BaseTooltipProps & {
    children?: React.ReactNode;
};
export declare class TriggeredTooltip extends React.Component<TriggeredTooltipProps> {
    static readonly defaultProps: Pick<TriggeredTooltipProps, 'autoclose'>;
    private static readonly fadeOutDelay;
    private readonly presenter;
    render(): import("react/jsx-runtime").JSX.Element;
    componentDidMount(): void;
}
type FloatingTooltipInfo = {
    label: string;
    x: number;
    y: number;
    placement?: 'left-start' | 'right-start' | 'left-end' | 'right-end' | Placement;
    direction?: Direction;
};
export type FloatingTooltipProps = React.PropsWithChildren<FloatingTooltipInfo & {
    arrow?: boolean;
    open: boolean;
}>;
export declare class FloatingTooltip extends React.Component<FloatingTooltipProps> {
    private readonly refObj;
    private dispose;
    info: FloatingTooltipInfo;
    componentDidMount(): void;
    componentWillUnmount(): void;
    render(): import("react/jsx-runtime").JSX.Element;
}
