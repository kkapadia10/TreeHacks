import { makeObservable } from '../../../base/make_observable/make_observable';
import { __decorate } from "tslib";
import * as mobx from 'mobx';
import { ClientPosition } from './client_position';
import { DragHandler } from './drag_handler';
export class MouseTracker {
  static _makeObservable(instance) {
    makeObservable(instance, {
      onMouseMove: mobx.action.bound,
      onMouseUp: mobx.action.bound
    });
  }
  constructor(drag, simulateMove, onStopped) {
    MouseTracker._makeObservable(this);
    this.drag = drag;
    this.onStopped = onStopped;
    this.type = 'mouse';
    this.onSimulateMove = () => {
      this.drag.forceStart();
      this.drag.handleMove(this.drag.currentPosition, this.drag.modifiers);
    };
    document.addEventListener('mousemove', this.onMouseMove, {
      capture: true,
      passive: true
    });
    document.addEventListener('mouseup', this.onMouseUp, {
      capture: true,
      passive: true
    });
    this.simulateMoveSubscription = simulateMove && simulateMove.subscribe(this.onSimulateMove);
  }
  stop() {
    try {
      this.drag.stop();
    } finally {
      document.removeEventListener('mousemove', this.onMouseMove, {
        capture: true
      });
      document.removeEventListener('mouseup', this.onMouseUp, {
        capture: true
      });
      if (this.simulateMoveSubscription) {
        this.simulateMoveSubscription.unsubscribe();
        this.simulateMoveSubscription = undefined;
      }
      this.onStopped();
    }
  }
  onMouseMove(evt) {
    this.drag.handleMove(ClientPosition.fromEvent(evt), DragHandler.modifiersFromEvent(evt));
  }
  onMouseUp(evt) {
    try {
      this.drag.updateAndMayStart(ClientPosition.fromEvent(evt), DragHandler.modifiersFromEvent(evt));
    } finally {
      this.stop();
    }
  }
}