import * as React from 'react';
import type { ResizeControls, UseResizeOptions } from './internal/resize';
import type { SnapPoint, SnapPointControls, UseResolvedSnapPointsOptions } from './internal/snap_points';
export type { SnapPoint };
export type UseSheetControlsOptions = UseResolvedSnapPointsOptions & Omit<UseResizeOptions, 'snapPointControls'>;
export type UseSheetControlsResult = {
    resizing: boolean
    controls: SheetControls
};
export type SheetControls = {
    resizeControls: ResizeControls;
    snapPointControls: SnapPointControls;
    snapPoints: SnapPoint[];
    snapPointIndex: number;
};
export declare function useSheetControls(
    { snapPoints, snapPointIndex, setSnapPointIndex, getScrollHeight, setOffset, }: UseSheetControlsOptions
): UseSheetControlsResult;
export type UseSheetDragOptions = {
    controls: SheetControls;
};
export declare function useSheetDrag({ controls }: UseSheetDragOptions): {
    dragRef: ((e: import("../../gestures/recognizer").GestureElement | null) => void) | undefined;
};
export type UseSheetScrollOptions = {
    controls: SheetControls;
    scrollToResizeBelow?: SnapPoint
};
export declare function useSheetScroll({ controls, scrollToResizeBelow }: UseSheetScrollOptions): {
    contentRef: React.Ref<HTMLElement>;
};
