import composeRefs from '@seznam/compose-react-refs';
import { Preconditions } from '../../../../base/preconditions';
import * as React from 'react';
import { useDrag } from './internal/drag';
import { useResize } from './internal/resize';
import { useScrollPan } from './internal/scroll_pan';
import { useResolvedSnapPoints } from './internal/snap_points';
import { useTouchScroll } from './internal/touch_scroll';
import { useWheelScroll } from './internal/wheel_scroll';
export function useSheetControls(
    { snapPoints, snapPointIndex, setSnapPointIndex, getScrollHeight, setOffset, }
) {
    const { snapPointControls } = useResolvedSnapPoints({
        snapPoints,
        getScrollHeight,
    });
    const { resizing, resizeControls, } = useResize({
        snapPointControls,
        snapPointIndex,
        setSnapPointIndex,
        setOffset,
    });
    return {
        resizing,
        controls: {
            resizeControls,
            snapPointControls,
            snapPoints,
            snapPointIndex,
        },
    };
}
export function useSheetDrag({ controls }) {
    return useDrag({
        resizeControls: controls.resizeControls,
    });
}
export function useSheetScroll({ controls, scrollToResizeBelow }) {
    const maxPanIndex = scrollToResizeBelow
        && controls.snapPoints.findIndex(snapPoint => snapPoint.type === scrollToResizeBelow.type
            && snapPoint.height === scrollToResizeBelow.height);
    Preconditions.checkArgument(maxPanIndex !== -1);
    const scrollPanRef = React.useRef(null);
    const { panControls } = useScrollPan({
        resizeControls: controls.resizeControls,
        snapPointControls: controls.snapPointControls,
        isContentScrolled: () => { var _a; return ((_a = scrollPanRef.current) === null || _a === void 0 ? void 0 : _a.scrollTop) !== 0; },
        snapPointIndex: controls.snapPointIndex,
        maxPanIndex,
    });
    const { wheelRef } = useWheelScroll({ panControls });
    const { touchScrollRef } = useTouchScroll({ panControls });
    return { contentRef: composeRefs(scrollPanRef, wheelRef, touchScrollRef) };
}
