import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { UnreachableError } from '../../../../base/preconditions';
import * as React from 'react';
import { isPortraitMobileScreen } from '../../device_capabilities/device_capabilities';
import { isReferenceObject, Popover } from '../popover/popover';
import { Sheet } from '../sheet/sheet';
import styles from './flyout.css';
export function Flyout(
    { open, onRequestClose, onCloseComplete, trigger, width = '32u', dangerouslySetWidthMode = 'fixed', header, footer, children, ...contentContainerProps }
) {
    const mode = useMode();
    const resolveContent = (content) => typeof content === 'function' ? content({ mode }) : content;
    const resolvedHeader = resolveContent(header);
    const resolvedFooter = resolveContent(footer);
    const resolvedContent = (_jsxs(_Fragment, { children: [hasContent(resolvedHeader) && _jsx("div", { className: styles.header, children: resolvedHeader }), _jsx("div", { className: styles.content, children: resolveContent(children) }), hasContent(resolvedFooter) && _jsx("div", { className: styles.footer, children: resolvedFooter })] }));
    switch (mode) {
        case 'popover':
            const popoverWidth = width === 'trigger' ? 'reference' : width;
            return (_jsx(Popover, { open: open, onRequestClose: onRequestClose, onCloseComplete: onCloseComplete, reference: trigger, width: popoverWidth, widthMode: dangerouslySetWidthMode, ...contentContainerProps, children: resolvedContent }));
        case 'sheet':
            return (_jsx(FlyoutSheet, { open: open, onRequestClose: onRequestClose, onCloseComplete: onCloseComplete, trigger: trigger, ...contentContainerProps, children: resolvedContent }));
        default:
            throw new UnreachableError(mode);
    }
}
function useMode() {
    return isPortraitMobileScreen() ? 'sheet' : 'popover';
}
const hasContent = (node) => React.Children.count(node) > 0;
function FlyoutSheet({ id: idProp, open, onRequestClose, onCloseComplete, trigger, handleSafeAreaInsetBottom = true, children, ...contentContainerProps }) {
    const defaultId = React.useId();
    const id = idProp || defaultId;
    return (_jsxs(_Fragment, { children: [typeof trigger === 'function'
                ? trigger({
                    ariaControls: open ? id : undefined,
                    active: open,
                    disclosure: true,
                    ariaHasPopup: contentContainerProps.role,
                })
                : !isReferenceObject(trigger) && trigger, _jsx(Sheet, { open: open, onRequestClose: onRequestClose, onCloseComplete: onCloseComplete, id: id, handleSafeAreaInsetBottom: handleSafeAreaInsetBottom, ...contentContainerProps, children: children })] }));
}
