import * as React from 'react';
import { useStableFunction } from '../../../stable_function/stable_function';
export function useTouchScroll({ panControls }) {
    const identifier = React.useRef();
    const lastY = React.useRef(0);
    const scrollState = React.useRef({ top: 0, set: false });
    const onTouchStart = useStableFunction((event) => {
        if (event.touches.length !== 1) {
            return;
        }
        const touch = event.changedTouches[0];
        identifier.current = touch.identifier;
        lastY.current = touch.clientY;
        if (event.currentTarget instanceof HTMLElement) {
            scrollState.current.top = event.currentTarget.scrollTop;
        }
        panControls.start();
    });
    const onTouchMove = useStableFunction((event) => {
        let currentTouch;
        for (const touch of event.changedTouches) {
            if (touch.identifier === identifier.current) {
                currentTouch = touch;
                break;
            }
        }
        if (currentTouch == null) {
            return;
        }
        const delta = currentTouch.clientY - lastY.current;
        lastY.current = currentTouch.clientY;
        const allowScroll = panControls.update(-delta);
        if (event.currentTarget instanceof HTMLElement) {
            if (allowScroll) {
                scrollState.current.top = event.currentTarget.scrollTop;
            }
            else {
                scrollState.current.set = true;
            }
        } else if (!allowScroll && event.cancelable) {
            event.preventDefault();
        }
    });
    const onScroll = useStableFunction((event) => {
        if (scrollState.current.set && event.currentTarget instanceof HTMLElement) {
            event.currentTarget.scrollTop = scrollState.current.top;
        }
        scrollState.current.set = false;
    });
    const onTouchEnd = useStableFunction(() => {
        if (identifier.current == null) {
            return;
        }
        identifier.current = undefined;
        panControls.end();
    });
    const previousRef = React.useRef();
    const touchScrollRef = useStableFunction(element => {
        if (element == null && previousRef.current != null) {
            previousRef.current.removeEventListener('touchstart', onTouchStart);
            previousRef.current.removeEventListener('touchmove', onTouchMove);
            previousRef.current.removeEventListener('touchend', onTouchEnd);
            previousRef.current.removeEventListener('scroll', onScroll);
        }
        if (element != null) {
            element.addEventListener('touchstart', onTouchStart);
            element.addEventListener('touchmove', onTouchMove);
            element.addEventListener('touchend', onTouchEnd);
            element.addEventListener('scroll', onScroll);
        }
        previousRef.current = element;
    });
    return { touchScrollRef };
}
