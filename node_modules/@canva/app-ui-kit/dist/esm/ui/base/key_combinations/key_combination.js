import { exists } from '../../../base/exists';
import { KeyCombinationMessages } from './key_combination.messages';
const mappedKeys = ['previous', 'next'];
const ensureMappings = (mappings) => mappings;
const mappingsLTR = ensureMappings({
    ['previous']: 'ArrowLeft',
    ['next']: 'ArrowRight',
});
const mappingsRTL = ensureMappings({
    ['previous']: 'ArrowRight',
    ['next']: 'ArrowLeft',
});
const resolveMapping = (key, direction) => {
    const mappings = direction === 'LTR' ? mappingsLTR : mappingsRTL;
    return key in mappings ? mappings[key] : key;
};
const nonModifierKey = [
    'Escape',
    'F1',
    'F2',
    'F3',
    'F4',
    'F5',
    'F6',
    'F7',
    'F8',
    'F9',
    'F10',
    'F11',
    'F12',
    'F13',
    'F14',
    'F15',
    'F16',
    'F17',
    'F18',
    'F19',
    '`',
    '~',
    '1',
    '!',
    '2',
    '@',
    '3',
    '#',
    '4',
    '$',
    '5',
    '%',
    '6',
    '^',
    '7',
    '&',
    '8',
    '*',
    '9',
    '(',
    '0',
    ')',
    '-',
    '_',
    '=',
    '+',
    'Backspace',
    'Home',
    'PageUp',
    'Tab',
    'q',
    'w',
    'e',
    'r',
    't',
    'y',
    'u',
    'i',
    'o',
    'p',
    '[',
    '{',
    ']',
    '}',
    '\\',
    'Delete',
    'End',
    'PageDown',
    '|',
    'a',
    's',
    'd',
    'f',
    'g',
    'h',
    'j',
    'k',
    'l',
    ';',
    ':',
    "'",
    '"',
    'Enter',
    'z',
    'x',
    'c',
    'v',
    'b',
    'n',
    'm',
    ',',
    '<',
    '.',
    '>',
    '/',
    '?',
    ' ',
    'ArrowUp',
    'ArrowLeft',
    'ArrowDown',
    'ArrowRight',
];
export const command = makeModifier(() => ({ command: true }));
export const option = makeModifier(() => ({ Alt: true }));
export const shift = makeModifier(() => ({ Shift: true }));
export function equal(a, b, direction) {
    if (!isModified(a) && !isModified(b) && !isKeyRange(a) && !isKeyRange(b)) {
        return resolveMapping(a, direction) === resolveMapping(b, direction);
    }
    else if (isModified(a) && isModified(b)) {
        return (a.command === b.command
            && resolveMapping(a.key, direction) === resolveMapping(b.key, direction)
            && a.Alt === b.Alt
            && a.Shift === b.Shift);
    }
    else if (isKeyRange(a) && isKeyRange(b)) {
        return a[0] === b[0] && a[1] === b[1];
    }
    return false;
}
function makeModifier(modify) {
    return key => ({
        ...(isModified(key) ? key : { key }),
        ...modify(),
    });
}
export function makeHumanReadableArray(
    keyCombination,
    direction,
    platform = /Mac/.test(navigator.platform) ? 'mac' : 'other'
) {
    const strings = platform === 'mac' ? MAC_HUMAN_READABLE_STRINGS : OTHER_HUMAN_READABLE_STRINGS;
    if (isModifierKey(keyCombination)) {
        return [strings[keyCombination]];
    }
    if (isModified(keyCombination)) {
        const orderedModifiers = platform === 'mac'
            ? [
                keyCombination.Alt ? strings['Alt'] : null,
                keyCombination.Shift ? strings['Shift'] : null,
                keyCombination.command ? strings['Command'] : null,
            ]
            : [
                keyCombination.command ? strings['Command'] : null,
                keyCombination.Alt ? strings['Alt'] : null,
                keyCombination.Shift ? strings['Shift'] : null,
            ];
        return [...orderedModifiers, ...makeHumanReadableArray(keyCombination.key, direction)].filter(exists);
    }
    if (isKeyRange(keyCombination)) {
        return [
            `${makeHumanReadableString(keyCombination[0], direction)}–${makeHumanReadableString(keyCombination[1], direction)}`,
        ];
    }
    const resolvedKey = resolveMapping(keyCombination, direction);
    const s = strings[resolvedKey];
    return [s ? s : resolvedKey.toLocaleUpperCase()];
}
export function makeHumanReadableString(
    keyCombination,
    direction,
    platform = /Mac/.test(navigator.platform) ? 'mac' : 'other'
) {
    const separator = platform === 'mac' ? '' : '+';
    return makeHumanReadableArray(keyCombination, direction, platform).join(separator);
}
const MODIFIER_KEYS = new Set(['Command', 'Alt', 'Shift']);
const COMMON_HUMAN_READABLE_STRINGS = {
    ['ArrowUp']: 'Up',
    ['ArrowDown']: 'Down',
    ['ArrowLeft']: 'Left',
    ['ArrowRight']: 'Right',
    [' ']: 'Space',
    ['Escape']: KeyCombinationMessages.escapeLabel(),
};
const MAC_HUMAN_READABLE_STRINGS = {
    ...COMMON_HUMAN_READABLE_STRINGS,
    ['Command']: '⌘',
    ['Alt']: '⌥',
    ['Shift']: '⇧',
    ['Enter']: '⏎',
};
const OTHER_HUMAN_READABLE_STRINGS = {
    ...COMMON_HUMAN_READABLE_STRINGS,
    ['Command']: KeyCombinationMessages.nonMacControlLabel(),
    ['Alt']: KeyCombinationMessages.nonMacAltLabel(),
    ['Shift']: KeyCombinationMessages.nonMacShiftLabel(),
    ['Enter']: KeyCombinationMessages.nonMacEnterLabel(),
};
export function makeKeyTrigger(keyCombination, direction, platform = /Mac|iPod|iPhone|iPad/.test(navigator.platform) ? 'mac' : 'other') {
    const isOnMac = platform === 'mac';
    if (isModified(keyCombination)) {
        return {
            key: resolveMapping(keyCombination.key, direction),
            altKey: keyCombination.Alt,
            shiftKey: keyCombination.Shift,
            ctrlKey: isOnMac ? false : keyCombination.command,
            metaKey: isOnMac ? keyCombination.command : false,
        };
    }
    const mod = isOnMac ? 'Meta' : 'Control';
    return {
        key: keyCombination === 'Command' ? mod : resolveMapping(keyCombination, direction),
    };
}
export function isKeyRange(keyCombination) {
    return Array.isArray(keyCombination);
}
export function isModified(keyCombination) {
    return typeof keyCombination !== 'string' && !Array.isArray(keyCombination);
}
export function isModifierKey(keyCombination) {
    return typeof keyCombination === 'string' && MODIFIER_KEYS.has(keyCombination);
}
