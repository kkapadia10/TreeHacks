import { Fragment as _Fragment, jsx as _jsx } from "react/jsx-runtime";
import * as React from 'react';
import { useDirection } from '../provider/provider';
import { makeKeyTrigger } from './key_combination';
import styles from './key_combination_handler.css';
import { KeyListener } from './key_listener';
export function useKeyCombinationHandler(keyMap, { handleInputs, }) {
    const [ref, setRef] = React.useState(null);
    const direction = useDirection();
    React.useEffect(() => {
        if (!ref) {
            return;
        }
        const keyListener = new KeyListener(ref, {
            ignoreInput: !handleInputs,
        });
        keyMap.forEach(([keyCombination, handlers, options]) => {
            const trigger = makeKeyTrigger(keyCombination, direction);
            trigger.ignoreKeyboardLayout = options === null || options === void 0 ? void 0 : options.ignoreKeyboardLayout;
            if (typeof handlers === 'function') {
                keyListener.addListener('keydown', trigger, handlers);
            }
            else {
                handlers.keydown && keyListener.addListener('keydown', trigger, handlers.keydown);
                handlers.keyup && keyListener.addListener('keyup', trigger, handlers.keyup);
                handlers.keypress && keyListener.addListener('keypress', trigger, handlers.keypress);
            }
        });
        return () => {
            keyListener.reset();
        };
    }, [direction, handleInputs, keyMap, ref]);
    return {
        ref: setRef,
        element: ref,
    };
}
export const WithKeyCombinationHandler = props => {
    const { map, handleInputs, children } = props;
    const { ref } = useKeyCombinationHandler(map, { handleInputs });
    return _jsx(_Fragment, { children: children({ ref }) });
};
export const KeyCombinationHandler = props => {
    const { children, map, handleInputs } = props;
    const { ref } = useKeyCombinationHandler(map, { handleInputs });
    return (_jsx(
        "div",
        { className: styles.shortcuts, ref: ref, tabIndex: -1, children: children }
    ));
};
