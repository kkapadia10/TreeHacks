import { jsx as _jsx } from "react/jsx-runtime";
import { UnreachableError } from '../../../../base/preconditions';
import classNames from 'classnames';
import * as React from 'react';
import { useThemedMedia } from '../../theme/escape_hatch';
import styles, { getStyle } from './base_icon.css';
const renderIcon = ({ className, style, glyph }) => {
    let children = null;
    let innerHtml;
    if (!glyph || typeof glyph === 'string') {
        innerHtml = { __html: glyph };
    }
    else {
        const GlyphComponent = glyph;
        children = _jsx(GlyphComponent, {});
    }
    return (_jsx("span", { "aria-hidden": "true", className: className, style: style, dangerouslySetInnerHTML: innerHtml, children: children }));
};
const createIconClass = (glyphs, { extraClassName, followDirection } = {}) => {
    const Component = (props) => {
        const { className, size, tone, ...restProps } = props;
        const [glyph, style] = getGlyphAndClassForSize(size, glyphs);
        const classes = classNames(className, style, extraClassName, tone ? getStyle(tone) : undefined, { [styles.followDirection]: followDirection });
        return renderIcon({ ...restProps, glyph, className: classes });
    };
    Component.sizes = glyphs;
    Component.followDirection = followDirection;
    return Component;
};
export function getGlyphAndClassForSize(size, glyphs) {
    switch (size) {
        case 'tiny':
            return [glyphs.tiny, styles.tiny];
        case 'small':
            return [glyphs.small, styles.small];
        case 'medium':
            return [glyphs.medium, styles.medium];
        case 'large':
            return [glyphs.large, styles.large];
        default:
            throw new UnreachableError(size);
    }
}
export const Internal = {
    create: (sources, followDirection) => createIconClass(sources, { followDirection }),
    createSpinning: (sources, followDirection) => createIconClass(sources, { extraClassName: styles.spinning, followDirection }),
    createWithExtraClassname: (sources, extraClassName, followDirection) => createIconClass(sources, { extraClassName, followDirection }),
    createThemed: (defaultMedia, themedMedia, followDirection) => {
        const Icon = (props) => {
            const media = useThemedMedia(themedMedia);
            const sources = {
                ...defaultMedia,
                ...media,
            };
            const Component = createIconClass(sources, { followDirection });
            return _jsx(Component, { ...props, tone: "primary" });
        };
        Icon.sizes = defaultMedia;
        Icon.followDirection = followDirection;
        return Icon;
    },
};
