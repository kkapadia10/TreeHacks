import { Preconditions } from '../../../base/preconditions';
import { autorun, reaction } from 'mobx';
import { useContext, useEffect, useRef, useState } from 'react';
import { ThemeContext } from './internal';
export function useThemeValues(ref, cssProperties, maybeStore) {
    const context = useContext(ThemeContext);
    const store = maybeStore !== null && maybeStore !== void 0 ? maybeStore : context.store;
    const [value, setValue] = useState();
    const callbackRef = useRef();
    callbackRef.current = () => {
        const computedStyle = window.getComputedStyle(Preconditions.checkExists(ref.current));
        const cssPropertyEntries = Object.entries(cssProperties);
        setValue(cssPropertyEntries.reduce((acc, [key, cssProperty]) => {
            const value = computedStyle.getPropertyValue(cssProperty).trim();
            acc[key] = value === '' ? undefined : value;
            return acc;
        }, {}));
    };
    const timeoutRef = useRef(undefined);
    useEffect(() => reaction(() => store.currentTheme, 
    () => (timeoutRef.current = window.setTimeout(() => { var _a; return (_a = callbackRef.current) === null || _a === void 0 ? void 0 : _a.call(callbackRef); })), { fireImmediately: true }), [store]);
    useEffect(() => () => window.clearTimeout(timeoutRef.current), []);
    return value;
}
export function WithThemeValues({ properties, children, }) {
    const ref = useRef(null);
    const values = useThemeValues(ref, properties);
    return children(ref, values);
}
export function useThemedMedia(media, maybeStore) {
    const context = useContext(ThemeContext);
    const store = maybeStore !== null && maybeStore !== void 0 ? maybeStore : context.store;
    const [theme, setTheme] = useState(store.currentTheme);
    useEffect(() => autorun(() => setTheme(store.currentTheme)), [store]);
    if (theme == null) {
        return undefined;
    }
    const themedMediaEntries = Object.entries(media);
    return themedMediaEntries.reduce((themedMedia, [key, mediaOptions]) => {
        themedMedia[key] = mediaOptions === null || mediaOptions === void 0 ? void 0 : mediaOptions[theme];
        return themedMedia;
    }, {});
}
export function WithThemedMedia({ media, children, }) {
    const values = useThemedMedia(media);
    return children(values);
}
