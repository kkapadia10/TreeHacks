var _a;
import { loadFromWindow } from '../../../base/bootstrap/bootstrap';
import IntlMessageFormat from 'intl-messageformat';
import { uiBootstrapKey } from '../bootstrap/key';
import { UiBootstrap } from '../bootstrap/ui_bootstrap_proto';
const window_ = typeof window === 'undefined' ? undefined : window;
let strings_ = ((_a = window_ === null || window_ === void 0 ? void 0 : window_['cmsg']) === null || _a === void 0 ? void 0 : _a['strings']) || {};
const cache_ = new Map();
let locale_;
export const getLocale = () => { var _a; return (locale_ = locale_ || ((_a = window_ === null || window_ === void 0 ? void 0 : window_['cmsg']) === null || _a === void 0 ? void 0 : _a['locale']) || 'en'); };
let exposeStringIds = false;
if (window_ != null) {
    const bootstrap = loadFromWindow(uiBootstrapKey, UiBootstrap.deserialize, {
        applyOverrides: true,
    });
    exposeStringIds = bootstrap.exposeStringIds;
}
export function encodeAsInvisibleUnicode(id) {
    return id
        .replace(/./g, s => s.charCodeAt(0).toString(2).padStart(8, '0'))
        .replace(/0/g, '\u2062')
        .replace(/1/g, '\u2064');
}
function addInvisibleStringId(string, id) {
    return '\u2062' + string + encodeAsInvisibleUnicode(id);
}
export function setTranslationBundlesContainer(cmsgContainer, locale) {
    var _a;
    cache_.clear();
    locale_ = locale;
    strings_ = ((_a = cmsgContainer === null || cmsgContainer === void 0 ? void 0 : cmsgContainer['cmsg']) === null || _a === void 0 ? void 0 : _a['strings']) || {};
}
export function formatId(
    id,
    args,
    fallbackString,
    locale = getLocale(),
    strings = strings_,
    cache = cache_,
    createIntlMessageFormat = createIntlMessageFormat_
) {
    const argumentzRecord = {};
    for (let i = 0; i < args.length; ++i) {
        argumentzRecord[i] = args[i];
    }
    const cached = cache.get(id);
    if (cached) {
        const result = cached.format(argumentzRecord);
        return exposeStringIds ? addInvisibleStringId(result, id) : result;
    }
    const localeStrings = strings[locale];
    let string = localeStrings && localeStrings[id];
    if (string == null) {
        string = fallbackString;
    }
    if (string == null) {
        throw new Error(`Could not find string for ${locale} ${id}`);
    }
    const format = createIntlMessageFormat(string, locale);
    cache.set(id, format);
    const result = format.format(argumentzRecord);
    return exposeStringIds ? addInvisibleStringId(result, id) : result;
}
export function getString(id, fallbackString, locale = getLocale(), strings = strings_) {
    const localeStrings = strings[locale];
    let string = localeStrings && localeStrings[id];
    if (string == null) {
        string = fallbackString;
    }
    if (string == null) {
        throw new Error(`Could not find string for ${locale} ${id}`);
    }
    return exposeStringIds ? addInvisibleStringId(string, id) : string;
}
const formats = {
    date: {
        ['weekday']: { weekday: 'long' },
        ['mediumNoYear']: { month: 'short', day: 'numeric' },
        ['mediumNoYearUTC']: { month: 'short', day: 'numeric', timeZone: 'UTC' },
        ['monthUTC']: { month: 'long', timeZone: 'UTC' },
        ['shortMonthUTC']: { month: 'short', timeZone: 'UTC' },
        ['monthYear']: { month: 'long', year: 'numeric' },
        ['monthYearUTC']: { month: 'long', year: 'numeric', timeZone: 'UTC' },
        ['longNoYear']: { month: 'long', day: 'numeric' },
        ['longUTC']: { month: 'long', day: 'numeric', year: 'numeric', timeZone: 'UTC' },
    },
};
export const intlNormalizedLocale = (locale) => {
    let _locale = locale;
    switch (locale) {
        case 'en-psaccent':
            _locale = 'en';
            break;
        case 'ar':
        case 'ar-AE':
        case 'ar-EG':
        case 'ar-SA':
        case 'fa-IR':
        case 'he-IL':
        case 'pa-PK':
        case 'ur-PK':
        case 'ckb-IQ':
        case 'ug-CN':
            _locale = `${locale}-u-nu-latn`;
            break;
        default:
            _locale = locale;
            break;
    }
    try {
        IntlMessageFormat.resolveLocale(_locale);
    }
    catch (err) {
        _locale = IntlMessageFormat.defaultLocale;
    }
    return _locale;
};
function createIntlMessageFormat_(ztring, locale) {
    return new IntlMessageFormat(ztring, intlNormalizedLocale(locale), formats, { ignoreTag: true });
}
export function formatString(ztring, values, locale) {
    return new IntlMessageFormat(ztring, locale ? intlNormalizedLocale(locale) : undefined, formats, {
        ignoreTag: true,
    }).format(Object.fromEntries(Object.entries(values)));
}
