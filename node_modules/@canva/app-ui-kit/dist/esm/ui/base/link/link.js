import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import classNames from 'classnames';
import * as React from 'react';
import { getButtonAriaAttributes } from '../a11y/button_aria_attributes/button_aria_attributes';
import { ScreenReaderContent } from '../a11y/screen_reader_content/screen_reader_content';
import { canHover } from '../device_capabilities/device_capabilities';
import { OpenInNewIcon } from '../icons/open_in_new/icon';
import styles, { getStyle } from './link.css';
import { LinkMessages } from './link.messages';
function renderLink(props, ref) {
    const { href, target, children, className, id, title, variant = 'regular', draggable = false, onClick, role, ariaLabel, ariaLabelledBy, ariaCurrent, ariaOwns, ariaRoleDescription, ariaDescribedBy, ariaControls, ariaHidden, tabIndex, active, disclosure, disabled, withOpenInNewIcon = false, } = props;
    let { rel } = props;
    const targetBlank = target === '_blank';
    if (targetBlank && !rel) {
        rel = 'noopener';
    }
    const onKeyDown = React.useCallback((e) => {
        if (e.key === ' ' && onClick) {
            if (role === 'button' && e.target === e.currentTarget) {
                onClick(e);
            }
        }
    }, [onClick, role]);
    return (_jsxs("a", { className: classNames(className, getStyle(variant), {
                [styles.hoverSupported]: canHover(),
                [styles.disabled]: disabled,
            }), id: id, href: disabled ? undefined : href, ref: ref, draggable: draggable, onClick: disabled ? undefined : onClick, onKeyDown: disabled ? undefined : onKeyDown, target: target, title: title, rel: rel, role: role, "aria-current": ariaCurrent, ...getButtonAriaAttributes({
                tagName: 'a',
                ariaLabel,
                ariaLabelledBy,
                ariaControls,
                ariaOwns,
                ariaRoleDescription,
                ariaDescribedBy,
                ariaHidden,
                tabIndex,
                active,
                disabled,
                disclosure,
                role,
            }), children: [children, withOpenInNewIcon && _jsx(OpenInNewIcon, { size: "small", className: styles.openInNewIcon }), targetBlank && (_jsx(ScreenReaderContent, { tagName: "span", children: LinkMessages.opensInNewWindow() }))] }));
}
function renderClickable({ onClick, ...props }, ref) {
    const wrappedOnClick = React.useCallback((event) => {
        event.preventDefault();
        if (onClick) {
            onClick(event);
        }
    }, [onClick]);
    const href = props.href || '#';
    return _jsx(Link, { role: "button", ...props, ref: ref, href: href, onClick: wrappedOnClick });
}
export const BaseLink = React.forwardRef(function BaseLink(props, ref) {
    return renderLink(props, ref);
});
export const Link = React.forwardRef(function Link(props, ref) {
    return renderLink({ ...props }, ref);
});
export const Clickable = React.forwardRef(function Clickable(props, ref) {
    return renderClickable(props, ref);
});
