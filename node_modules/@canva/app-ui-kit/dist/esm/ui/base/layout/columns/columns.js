import { UnreachableError } from '../../../../base/preconditions';
import classNames from 'classnames';
import * as React from 'react';
import { commonPropsToDOMProps } from '../../box/types';
import { getSpaceValue } from '../../metrics/metrics';
import { generateStyle } from '../../responsive/responsive';
import styles, { customProperties } from './columns.css';
export const Column = React.forwardRef(({ width, children, tagName = 'div', role }, ref) => React.createElement(tagName, {
    className: classNames(styles.column, getWidthStyle(width)),
    children,
    role,
    ref,
}));
Column.displayName = 'Column';
const spacingPropertyMap = {
    default: customProperties.spacing,
    smallUp: customProperties.smallUpSpacing,
    mediumUp: customProperties.mediumUpSpacing,
    largeUp: customProperties.largeUpSpacing,
};
const alignPropertyMap = {
    default: customProperties.align,
    smallUp: customProperties.smallUpAlign,
    mediumUp: customProperties.mediumUpAlign,
    largeUp: customProperties.largeUpAlign,
};
const alignYPropertyMap = {
    default: customProperties.alignY,
    smallUp: customProperties.smallUpAlignY,
    mediumUp: customProperties.mediumUpAlignY,
    largeUp: customProperties.largeUpAlignY,
};
const getAlignValue = (align) => {
    switch (align) {
        case 'start':
            return 'flex-start';
        case 'center':
            return 'center';
        case 'end':
            return 'flex-end';
        case 'spaceBetween':
            return 'space-between';
        default:
            throw new UnreachableError(align);
    }
};
const getAlignYValue = (alignY) => alignY === 'start' || alignY === 'end' ? `flex-${alignY}` : alignY;
export const Columns = React.forwardRef(({ children, spacing, align, alignY, tagName = 'div', reversed, collapseBelow, collapsed, ...rest }, ref) => {
    return React.createElement(tagName, {
        className: classNames(styles.columns, reversed && (collapsed || collapseBelow) && styles.rowReverse, collapseBelow && collapseBelowClassNames[collapseBelow], collapsed && styles.collapsed),
        style: {
            ...(spacing && generateStyle(spacingPropertyMap, spacing, getSpaceValue)),
            ...(align && generateStyle(alignPropertyMap, align, getAlignValue)),
            ...(alignY && generateStyle(alignYPropertyMap, alignY, getAlignYValue)),
        },
        children: reversed && !collapsed && !collapseBelow
            ? React.Children.toArray(children).reverse()
            : children,
        ref,
        ...commonPropsToDOMProps(rest),
    });
});
Columns.displayName = 'Columns';
const collapseBelowClassNames = {
    small: styles.collapseBelowSmall,
    medium: styles.collapseBelowMedium,
    large: styles.collapseBelowLarge,
};
const widthStyles = {
    content: styles.widthContent,
    containedContent: styles.withContainedContent,
    ['1/2']: styles.width1Over2,
    ['1/3']: styles.width1Over3,
    ['2/3']: styles.width2Over3,
    ['1/4']: styles.width1Over4,
    ['3/4']: styles.width3Over4,
    ['1/5']: styles.width1Over5,
    ['2/5']: styles.width2Over5,
    ['3/5']: styles.width3Over5,
    ['4/5']: styles.width4Over5,
};
function getWidthStyle(width) {
    if (width) {
        return widthStyles[width];
    }
    return styles.widthFluid;
}
