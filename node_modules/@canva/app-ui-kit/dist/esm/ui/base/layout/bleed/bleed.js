import classNames from 'classnames';
import * as React from 'react';
import { commonPropsToDOMProps } from '../../box/types';
import { getSpaceValue } from '../../metrics/metrics';
import { generateStyle } from '../../responsive/responsive';
import styles, { customProperties } from './bleed.css';
export const Bleed = React.forwardRef(function Bleed(props, ref) {
    const { all, x, y, top, bottom, start, end, tagName = 'div', children, ...rest } = props;
    const preventMarginCollapse = all || y || top || bottom;
    const Content = React.createElement(tagName, {
        className: classNames(styles.hasBleed, { [styles.block]: tagName === 'span' }),
        style: {
            ...(all && generateStyle(allPropertyMap, all, getSpaceValue)),
            ...(x && generateStyle(xPropertyMap, x, getSpaceValue)),
            ...(y && generateStyle(yPropertyMap, y, getSpaceValue)),
            ...(top && generateStyle(topPropertyMap, top, getSpaceValue)),
            ...(bottom && generateStyle(bottomPropertyMap, bottom, getSpaceValue)),
            ...(start && generateStyle(startPropertyMap, start, getSpaceValue)),
            ...(end && generateStyle(endPropertyMap, end, getSpaceValue)),
        },
        ...commonPropsToDOMProps(rest),
        ref: preventMarginCollapse ? undefined : ref,
    }, children);
    return preventMarginCollapse
        ? React.createElement(tagName, { className: styles.noCollapse, ref }, Content)
        : Content;
});
const allPropertyMap = {
    default: customProperties.bleed,
    smallUp: customProperties.smallUpBleed,
    mediumUp: customProperties.mediumUpBleed,
    largeUp: customProperties.largeUpBleed,
};
const xPropertyMap = {
    default: customProperties.bleedX,
    smallUp: customProperties.smallUpBleedX,
    mediumUp: customProperties.mediumUpBleedX,
    largeUp: customProperties.largeUpBleedX,
};
const yPropertyMap = {
    default: customProperties.bleedY,
    smallUp: customProperties.smallUpBleedY,
    mediumUp: customProperties.mediumUpBleedY,
    largeUp: customProperties.largeUpBleedY,
};
const topPropertyMap = {
    default: customProperties.bleedTop,
    smallUp: customProperties.smallUpBleedTop,
    mediumUp: customProperties.mediumUpBleedTop,
    largeUp: customProperties.largeUpBleedTop,
};
const bottomPropertyMap = {
    default: customProperties.bleedBottom,
    smallUp: customProperties.smallUpBleedBottom,
    mediumUp: customProperties.mediumUpBleedBottom,
    largeUp: customProperties.largeUpBleedBottom,
};
const startPropertyMap = {
    default: customProperties.bleedStart,
    smallUp: customProperties.smallUpBleedStart,
    mediumUp: customProperties.mediumUpBleedStart,
    largeUp: customProperties.largeUpBleedStart,
};
const endPropertyMap = {
    default: customProperties.bleedEnd,
    smallUp: customProperties.smallUpBleedEnd,
    mediumUp: customProperties.mediumUpBleedEnd,
    largeUp: customProperties.largeUpBleedEnd,
};
