import { UnreachableError } from '../../../../base/preconditions';
import classNames from 'classnames';
import * as React from 'react';
import { commonPropsToDOMProps } from '../../box/types';
import { getSpaceValue } from '../../metrics/metrics';
import { generateStyle } from '../../responsive/responsive';
import styles, { customProperties } from './grid.css';
const spacingPropertyMap = {
    default: customProperties.spacing,
    smallUp: customProperties.smallUpSpacing,
    mediumUp: customProperties.mediumUpSpacing,
    largeUp: customProperties.largeUpSpacing,
};
const spacingXPropertyMap = {
    default: customProperties.spacingX,
    smallUp: customProperties.smallUpSpacingX,
    mediumUp: customProperties.mediumUpSpacingX,
    largeUp: customProperties.largeUpSpacingX,
};
const spacingYPropertyMap = {
    default: customProperties.spacingY,
    smallUp: customProperties.smallUpSpacingY,
    mediumUp: customProperties.mediumUpSpacingY,
    largeUp: customProperties.largeUpSpacingY,
};
const columnsPropertyMap = {
    default: customProperties.columns,
    smallUp: customProperties.smallUpColumns,
    mediumUp: customProperties.mediumUpColumns,
    largeUp: customProperties.largeUpColumns,
};
const rowSizePropertyMap = {
    default: customProperties.rowSize,
    smallUp: customProperties.smallUpRowSize,
    mediumUp: customProperties.mediumUpRowSize,
    largeUp: customProperties.largeUpRowSize,
};
const alignYPropertyMap = {
    default: customProperties.alignY,
    smallUp: customProperties.smallUpAlignY,
    mediumUp: customProperties.mediumUpAlignY,
    largeUp: customProperties.largeUpAlignY,
};
const alignXPropertyMap = {
    default: customProperties.alignX,
    smallUp: customProperties.smallUpAlignX,
    mediumUp: customProperties.mediumUpAlignX,
    largeUp: customProperties.largeUpAlignX,
};
export const Grid = React.forwardRef(({ children, spacing, spacingX, spacingY, columns, rowSize, tagName = 'div', alignY, alignX, ...rest }, ref) => {
    return React.createElement(tagName, {
        className: classNames(styles.grid),
        style: {
            ...(spacing && generateStyle(spacingPropertyMap, spacing, getSpaceValue)),
            ...(spacingX && generateStyle(spacingXPropertyMap, spacingX, getSpaceValue)),
            ...(spacingY && generateStyle(spacingYPropertyMap, spacingY, getSpaceValue)),
            ...(columns && generateStyle(columnsPropertyMap, columns)),
            ...(rowSize && generateStyle(rowSizePropertyMap, rowSize, getRowSizeValue)),
            ...(alignY && generateStyle(alignYPropertyMap, alignY)),
            ...(alignX && generateStyle(alignXPropertyMap, alignX)),
        },
        children,
        ref,
        ...commonPropsToDOMProps(rest),
    });
});
Grid.displayName = 'Grid';
function getRowSizeValue(rowSize) {
    switch (rowSize) {
        case 'auto':
            return 'auto';
        case 'equal':
            return '1fr';
        default:
            throw new UnreachableError(rowSize);
    }
}
