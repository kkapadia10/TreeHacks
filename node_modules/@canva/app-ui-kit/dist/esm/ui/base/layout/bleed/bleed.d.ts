import * as React from 'react';
import type { CommonProps } from '../../box/types';
import type { Space } from '../../metrics/metrics';
import type { ResponsiveValue } from '../../responsive/responsive';
type BleedOptions = {
    x: ResponsiveValue<Space>;
    y: ResponsiveValue<Space>;
    start: ResponsiveValue<Space>;
    end: ResponsiveValue<Space>;
    top: ResponsiveValue<Space>;
    bottom: ResponsiveValue<Space>;
    all: ResponsiveValue<Space>;
};
type Directions = keyof BleedOptions;
type OneDirectionOrMore = {
    [D in Directions]-?: Required<Pick<BleedOptions, D>> & Partial<Omit<BleedOptions, D>>;
}[Directions];
type BleedProps = {
    children: React.ReactNode;
    tagName?: 'div' | 'span'
} & OneDirectionOrMore & CommonProps;
export declare const Bleed: React.ForwardRefExoticComponent<BleedProps & React.RefAttributes<HTMLElement>>;
export {};
