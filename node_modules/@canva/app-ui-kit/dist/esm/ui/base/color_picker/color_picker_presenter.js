import { makeObservable } from '../../../base/make_observable/make_observable';
import { __decorate } from "tslib";
import { Preconditions } from '../../../base/preconditions';
import * as mobx from 'mobx';
import { HsvColor } from './hsv_color/hsv_color';
export class ColorStoreImpl {
  static _makeObservable(instance) {
    makeObservable(instance, {
      color: mobx.observable.ref,
      alpha: mobx.observable.ref
    });
  }
  constructor(color, alpha) {
    ColorStoreImpl._makeObservable(this);
    this.color = color;
    this.alpha = alpha;
  }
}
export class ColorPickerStore {
  static _makeObservable(instance) {
    makeObservable(instance, {
      lastHsvColor: mobx.observable.ref,
      color: mobx.computed.struct
    });
  }
  constructor(colorStore) {
    ColorPickerStore._makeObservable(this);
    this.colorStore = colorStore;
    this.lastHsvColor = undefined;
  }
  get color() {
    if (this.lastHsvColor == null) {
      const {
        h,
        s,
        v
      } = HsvColor.fromHexString(this.colorStore.color);
      return new HsvColor(h, s, v, this.colorStore.alpha);
    }
    const {
      h,
      s,
      v,
      alpha
    } = this.lastHsvColor.matchHexString(this.colorStore.color);
    return new HsvColor(h, s, v, alpha);
  }
}
export class ColorPickerStores {
  static _makeObservable(instance) {
    makeObservable(instance, {
      lastHsvColor: mobx.observable.ref,
      _color: mobx.observable.ref,
      color: mobx.computed.struct
    });
  }
  constructor(color) {
    ColorPickerStores._makeObservable(this);
    this.lastHsvColor = undefined;
    this._color = color;
  }
  get color() {
    return this.lastHsvColor == null ? HsvColor.fromHexString(this._color) : this.lastHsvColor.matchHexString(this._color);
  }
}
export class ColorPickerPresenter {
  static _makeObservable(instance) {
    makeObservable(instance, {
      onInputChange: mobx.action.bound,
      onSatValChange: mobx.action.bound,
      onHueChange: mobx.action.bound,
      onAlphaChange: mobx.action.bound
    });
  }
  constructor(store, onChange) {
    ColorPickerPresenter._makeObservable(this);
    this.store = store;
    this.onChange = onChange;
  }
  onInputChange(hex) {
    this.onChange(hex, 'hex');
  }
  onSatValChange(color) {
    Preconditions.checkArgument(color.h === this.store.color.h);
    const {
      h,
      s,
      v
    } = color;
    const {
      alpha
    } = this.store.color;
    this.store.lastHsvColor = new HsvColor(h, s, v, alpha);
    this.onChange(color.toRgb().toHexString(), 'satVal', alpha);
  }
  onHueChange(hue) {
    const {
      s,
      v,
      alpha
    } = this.store.color;
    const newColor = new HsvColor(hue, s, v, alpha);
    this.store.lastHsvColor = newColor;
    if (v > 0 && s > 0) {
      this.onChange(newColor.toRgb().toHexString(), 'hue', alpha);
    }
  }
  onAlphaChange(alpha) {
    const {
      h,
      s,
      v
    } = this.store.color;
    const newColor = new HsvColor(h, s, v, alpha);
    this.store.lastHsvColor = newColor;
    this.onChange(newColor.toRgb().toHexString(), 'alpha', alpha);
  }
}