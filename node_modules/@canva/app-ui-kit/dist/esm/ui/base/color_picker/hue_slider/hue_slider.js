import { makeObservable } from '../../../../base/make_observable/make_observable';
import { __decorate } from "tslib";
import { jsx as _jsx } from "react/jsx-runtime";
import classNames from 'classnames';
import * as mobx from 'mobx';
import * as mobxReact from 'mobx-react';
import * as React from 'react';
import { BaseSlider } from '../../form/slider/base_slider';
import styles from './hue_slider.css';
const Track = () => _jsx("div", {
  className: styles.track
});
const Knob = ({
  focused,
  hovering
}) => _jsx("div", {
  className: classNames(styles.knob, {
    [styles.knobHoverOrFocus]: focused || hovering
  })
});
let HueSlider = class HueSlider extends React.Component {
  static _makeObservable(instance) {
    makeObservable(instance, {
      knobAtEnd: mobx.observable.ref,
      knobPosition: mobx.computed,
      onHueChange: mobx.action
    });
  }
  constructor() {
    super(...arguments);
    HueSlider._makeObservable(this);
    this.knobAtEnd = false;
    this.onHueChange = hue => {
      this.knobAtEnd = hue === 1;
      this.props.onChange(hue);
    };
  }
  render() {
    return _jsx("div", {
      className: styles.container,
      children: _jsx("div", {
        className: styles.widener,
        children: _jsx(BaseSlider, {
          value: this.knobPosition,
          min: 0,
          max: 1,
          step: 0.005,
          onChange: this.onHueChange,
          onDragStart: this.props.onDragStart,
          onDragEnd: this.props.onDragEnd,
          ariaLabel: this.props.ariaLabel,
          Knob: Knob,
          Track: Track
        })
      })
    });
  }
  get knobPosition() {
    return this.knobAtEnd && this.props.hue === 0 ? 1 : this.props.hue;
  }
};
HueSlider = __decorate([mobxReact.observer], HueSlider);
export { HueSlider };