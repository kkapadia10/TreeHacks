import { makeObservable } from '../../../../base/make_observable/make_observable';
import { __decorate } from "tslib";
import { jsx as _jsx } from "react/jsx-runtime";
import classNames from 'classnames';
import * as mobx from 'mobx';
import * as mobxReact from 'mobx-react';
import * as React from 'react';
import { BaseSlider } from '../../form/slider/base_slider';
import styles from './alpha_slider.css';
const Knob = ({
  focused,
  hovering
}) => _jsx("div", {
  className: classNames(styles.knob, {
    [styles.knobHoverOrFocus]: focused || hovering
  })
});
let AlphaSlider = class AlphaSlider extends React.Component {
  static _makeObservable(instance) {
    makeObservable(instance, {
      onAlphaChange: mobx.action
    });
  }
  constructor() {
    super(...arguments);
    AlphaSlider._makeObservable(this);
    this.onAlphaChange = alpha => {
      this.props.onChange(alpha);
    };
  }
  render() {
    return _jsx("div", {
      className: styles.container,
      children: _jsx("div", {
        className: styles.widener,
        children: _jsx(BaseSlider, {
          value: this.props.alpha,
          min: 0,
          max: 1,
          step: 0.005,
          onChange: this.onAlphaChange,
          onDragStart: this.props.onDragStart,
          onDragEnd: this.props.onDragEnd,
          ariaLabel: this.props.ariaLabel,
          Knob: Knob,
          Track: this.Track
        })
      })
    });
  }
  get Track() {
    return () => _jsx("div", {
      className: styles.track,
      children: _jsx("div", {
        className: styles.overlay,
        style: {
          background: `linear-gradient(to right, transparent, ${this.props.color})`
        }
      })
    });
  }
};
AlphaSlider = __decorate([mobxReact.observer], AlphaSlider);
export { AlphaSlider };