import { makeObservable } from '../../../base/make_observable/make_observable';
import { __decorate } from "tslib";
import { jsx as _jsx } from "react/jsx-runtime";
import { action, observable, reaction } from 'mobx';
import { Observer } from 'mobx-react';
import * as React from 'react';
import { Box } from '../box/box';
import { Flyout } from '../surface/flyout/flyout';
import { AddColorButton } from '../swatch/swatch';
import { ColorPicker } from './color_picker';
export class ColorPickerFlyoutStore {
  static _makeObservable(instance) {
    makeObservable(instance, {
      open: observable.ref
    });
  }
  constructor() {
    ColorPickerFlyoutStore._makeObservable(this);
    this.open = false;
  }
}
export const ColorPickerFlyout = ({
  trigger,
  color,
  alpha,
  ariaLabel,
  ariaLabelledBy,
  onChange,
  onChangeStart,
  onChangeComplete,
  onStartEyedropper,
  onOpen,
  onClose
}) => {
  const storeRef = React.useRef(null);
  if (storeRef.current == null) {
    storeRef.current = new ColorPickerFlyoutStore();
  }
  const store = storeRef.current;
  const toggleFlyout = React.useMemo(() => {
    return action(() => store.open = !store.open);
  }, [store]);
  React.useEffect(() => {
    return reaction(() => store.open, open => open ? onOpen === null || onOpen === void 0 ? void 0 : onOpen() : onClose === null || onClose === void 0 ? void 0 : onClose());
  }, [store, onOpen, onClose]);
  const triggerId = React.useId();
  return _jsx(Observer, {
    children: () => _jsx(StatelessColorPickerFlyout, {
      trigger: trigger,
      open: store.open,
      id: triggerId,
      onClick: toggleFlyout,
      ariaLabel: ariaLabel,
      ariaLabelledBy: ariaLabelledBy,
      color: color,
      alpha: alpha,
      onChange: onChange,
      onChangeStart: onChangeStart,
      onChangeComplete: onChangeComplete,
      onStartEyedropper: onStartEyedropper
    })
  });
};
export function StatelessColorPickerFlyout(props) {
  const {
    trigger = props => _jsx(AddColorButton, {
      size: "small",
      ...props
    }),
    open,
    id,
    ariaLabel,
    ariaLabelledBy,
    color,
    alpha,
    onClick,
    onChange,
    onChangeStart,
    onChangeComplete,
    onStartEyedropper
  } = props;
  return _jsx(Flyout, {
    role: "dialog",
    ariaLabelledBy: id,
    placement: "bottom-start",
    open: open,
    onRequestClose: onClick,
    captureFocus: true,
    width: "40u",
    trigger: triggerProps => trigger({
      id,
      ariaLabel,
      ariaLabelledBy,
      onClick,
      ...triggerProps
    }),
    children: ({
      mode
    }) => _jsx(Box, {
      padding: mode === 'popover' ? '2u' : '0',
      children: _jsx(ColorPicker, {
        sizingMode: mode === 'popover' ? 'fixed' : 'fill',
        color: color,
        alpha: alpha,
        onChange: onChange,
        onChangeStart: onChangeStart,
        onChangeComplete: onChangeComplete,
        onStartEyedropper: onStartEyedropper
      })
    })
  });
}