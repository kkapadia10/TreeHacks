import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { UnreachableError } from '../../../base/preconditions';
import classNames from 'classnames';
import * as React from 'react';
import { Box } from '../box/box';
import { Button } from '../button/button';
import { CloseIcon } from '../icons/close/icon';
import { InfoIcon } from '../icons/info/icon';
import { TickIcon } from '../icons/tick/icon';
import { WarningOffIcon } from '../icons/warning_off/icon';
import { Column, Columns } from '../layout/layout';
import { InheritColor, Text } from '../typography/typography';
import styles from './alert.css';
import { AlertMessages } from './alert.messages';
export const AlertIcon = ({ tone, size = 'medium' }) => {
    switch (tone) {
        case 'critical':
        case 'warn':
            return _jsx(WarningOffIcon, { size: size });
        case 'positive':
            return _jsx(TickIcon, { size: size });
        case 'info':
            return _jsx(InfoIcon, { size: size });
        case 'neutral':
            return null;
        default:
            throw new UnreachableError(tone);
    }
};
export const Alert = (props) => {
    const { children, className, title, tone, dismissible, onDismiss, size = 'medium', rounded = true, showIcon = size !== 'small', } = props;
    let iconElement;
    if (showIcon) {
        if (props.Icon) {
            iconElement =
                props.size === 'small' ? _jsx(props.Icon, { size: "small" }) : _jsx(props.Icon, { size: "medium" });
        }
        else {
            iconElement = _jsx(AlertIcon, { tone: tone, size: size });
        }
    }
    return (_jsx(Box, { background: `${tone}Low`, borderRadius: rounded ? 'standard' : 'none', padding: size === 'medium' ? '2u' : '1.5u', width: "full", className: classNames(className, styles.alert, {
            [styles.small]: size === 'small',
        }), role: tone === 'critical' ? 'alert' : undefined, ariaLive: tone !== 'critical' ? 'polite' : undefined, children: _jsx(Text, { tagName: "div", size: size, tone: InheritColor, children: _jsxs(Columns, { spacing: "1u", alignY: "baseline", children: [iconElement && _jsx(Column, { width: "content", children: iconElement }), _jsxs(Column, { children: [title && (_jsxs(_Fragment, { children: [_jsx("strong", { children: title }), ' '] })), children] }), dismissible && (_jsx(Column, { width: "content", children: _jsx(Button, { variant: "tertiary", className: styles.close, onClick: onDismiss, icon: CloseIcon, ariaLabel: AlertMessages.dismiss(), size: "small", iconSize: size }) }))] }) }) }));
};
