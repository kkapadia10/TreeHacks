import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import classNames from 'classnames';
import { Observer } from 'mobx-react';
import * as React from 'react';
import { accessModeState } from '../a11y/access_mode_state/access_mode_state';
import { Box } from '../box/box';
import { canHover } from '../device_capabilities/device_capabilities';
import { useFocusableRef } from '../focusable/focusable';
import styles, { getStyle } from './badge.css';
export const tones = [
    'primary',
    'contrast',
    'neutral',
    'positive',
    'warn',
    'info',
    'critical',
    'neutralLow',
    'positiveLow',
    'warnLow',
    'infoLow',
    'criticalLow',
];
export const Badge = ({ className, icon, text, shape = 'regular', tone, ariaLabel, }) => (_jsxs(Box, { tagName: "span", background: tone !== 'primary' ? tone : undefined, className: classNames(styles.badge, {
        [styles.primary]: tone === 'primary',
        [styles.circle]: shape === 'circle',
    }, className), ariaLabel: ariaLabel, children: [icon && (_jsx("span", { className: classNames(styles.icon, text && styles.withText), children: typeof icon === 'function' ? icon() : icon })), text] }));
function preventFocusOutline() {
    accessModeState.setAccessMode('mouse');
}
export const badgeButtonTones = ['primary', 'secondary'];
function isMenuButtonProps(props) {
    return props.ariaHasPopup === 'menu';
}
export const PrimaryButtonBadge = (props) => (_jsx(ButtonBadge, { ...props, tone: "primary" }));
export const SecondaryButtonBadge = (props) => (_jsx(ButtonBadge, { ...props, tone: "secondary" }));
export const ButtonBadge = ({ className, disabled, onMouseDown, onClick, children, tone, ariaLabel, focusRef, ...extraProps }) => {
    const buttonRef = useFocusableRef(focusRef);
    const onMouseDownHandler = React.useCallback(e => {
        if (onMouseDown) {
            onMouseDown(e);
        }
        preventFocusOutline();
    }, [onMouseDown]);
    return (_jsx(Observer, { children: () => (_jsx("button", { ref: buttonRef, onClick: onClick, onMouseDown: onMouseDownHandler, disabled: disabled, className: classNames(styles.buttonBadge, getStyle(`${tone}Button`), className, {
                [styles.hoverSupported]: canHover(),
                [styles.hideOutline]: accessModeState.isMouseMode,
                [styles.disabled]: disabled,
                [styles.expanded]: isMenuButtonProps(extraProps) ? extraProps.expanded : undefined,
            }), "aria-label": ariaLabel, "aria-expanded": isMenuButtonProps(extraProps) ? extraProps.expanded : undefined, "aria-controls": isMenuButtonProps(extraProps) ? extraProps.ariaControls : undefined, "aria-haspopup": isMenuButtonProps(extraProps) ? extraProps.ariaHasPopup : undefined, children: children })) }));
};
export const IconBadgeContainer = ({ className, Icon, size, children, }) => {
    return (_jsxs("div", { className: classNames(styles.iconContainer, getStyle(size), className), children: [_jsx(Icon, { size: size, className: styles.badgeContainerMainIcon }), children] }));
};
