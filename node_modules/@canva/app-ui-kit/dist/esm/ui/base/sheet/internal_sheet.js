import { makeObservable } from '../../../base/make_observable/make_observable';
var InternalSheet_1;
import { __decorate } from "tslib";
import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { IdGenerator } from '../../../base/id_generator/id_generator';
import classNames from 'classnames';
import { action, computed, observable, reaction } from 'mobx';
import { disposeOnUnmount, observer } from 'mobx-react';
import * as React from 'react';
import { supportsSafeAreaInsetValues } from '../device_capabilities/device_capabilities';
import { WithLayerParent } from '../layer/layer';
import { MobileEventHandler } from '../mobile_event_handler/mobile_event_handler';
import { WithThemeData } from '../theme/theme';
import { ANIMATION_TIME } from './internal/layer_view';
import styles from './internal/sheet.css';
const defaultPlaceholder = () => null;
let InternalSheet = InternalSheet_1 = class InternalSheet extends React.Component {
  static _makeObservable(instance) {
    makeObservable(instance, {
      contentElement: observable.ref,
      outerElement: observable.ref,
      parentLayerContainer: observable.ref,
      show: observable.ref,
      currentContent: observable.ref,
      currentOuterContent: observable.ref,
      themeData: observable.ref,
      themeClass: computed,
      window: observable.ref,
      supportsSafeAreaInset: computed,
      setThemeData: action.bound,
      componentDidMount: action,
      componentDidUpdate: action
    });
  }
  get themeClass() {
    var _a;
    return (_a = this.themeData) === null || _a === void 0 ? void 0 : _a.className;
  }
  get supportsSafeAreaInset() {
    return this.window ? supportsSafeAreaInsetValues(this.window.navigator) : undefined;
  }
  constructor(props) {
    super(props);
    InternalSheet._makeObservable(this);
    this.id = InternalSheet_1.ids.next();
    this.closeTimeout = 0;
    this.onBackButton = event => {
      const {
        onBackButton,
        open
      } = this.props;
      onBackButton && open && onBackButton(event);
    };
    if (props.sheetBehavior) {
      this.sheetDragInternal = {
        sheetBehavior: props.sheetBehavior
      };
    }
    this.easelConfiguration = props.easelConfiguration;
    this.show = !!this.props.open;
    if (this.show || props.mountBehaviour === 'eager') {
      this.currentContent = props.content;
      this.currentOuterContent = props.outerContent;
    }
  }
  render() {
    return _jsxs(_Fragment, {
      children: [_jsx(WithThemeData, {
        children: this.setThemeData
      }), _jsx(MobileEventHandler, {
        onBackButton: this.onBackButton,
        children: _jsx(WithLayerParent, {
          parentLayer: this.parentLayerContainer,
          children: this.contentElement && this.outerElement && _jsxs(_Fragment, {
            children: [this.renderPortal(this.currentContent, this.contentElement), this.renderPortal(this.currentOuterContent, this.outerElement)]
          })
        })
      })]
    });
  }
  setThemeData(data) {
    this.themeData = data;
    return null;
  }
  renderPortal(content, element) {
    if (!content) {
      return null;
    }
    const Content = typeof content === 'function' ? content() : content;
    return this.props.createPortal(Content, element);
  }
  componentDidMount() {
    var _a;
    this.window = (_a = this.props.windowOverride) !== null && _a !== void 0 ? _a : window;
    this.outerElement = this.window.document.createElement('div');
    this.contentElement = this.window.document.createElement('div');
    this.outerElement.className = classNames(styles.sheetElement, styles.scrollable);
    this.contentElement.className = classNames(styles.sheetElement, {
      [styles.scrollable]: this.props.scrollable
    });
    this.contentElement.style.display = this.props.open ? '' : 'none';
    if (this.currentContent) {
      this.props.layers.addSheet(this);
    }
    window.clearTimeout(this.closeTimeout);
    disposeOnUnmount(this, [
    reaction(() => {
      var _a, _b;
      return (_b = (_a = this.themeData) === null || _a === void 0 ? void 0 : _a.classNames) !== null && _b !== void 0 ? _b : [];
    }, (next, previous) => {
      if (this.outerElement == null || this.contentElement == null) {
        return;
      }
      if (previous != null) {
        this.contentElement.classList.remove(...previous);
        this.outerElement.classList.remove(...previous);
      }
      this.contentElement.classList.add(...next);
      this.outerElement.classList.add(...next);
    }, {
      fireImmediately: true
    })]);
  }
  componentWillUnmount() {
    this.props.layers.removeSheet(this);
    if (this.props.open && this.props.onCloseAnimationComplete) {
      this.closeTimeout = window.setTimeout(this.props.onCloseAnimationComplete, this.enableAnimations ? ANIMATION_TIME : 0);
    }
  }
  componentDidUpdate(prevProps) {
    var _a, _b;
    const {
      open,
      content,
      outerContent,
      layers,
      placeholder = defaultPlaceholder,
      scrollable,
      onCloseAnimationComplete
    } = this.props;
    if (this.outerElement == null || this.contentElement == null || this.window == null) {
      return;
    }
    this.contentElement.classList.toggle(styles.scrollable, scrollable);
    if (open && !prevProps.open) {
      this.show = true;
      this.contentElement.style.display = '';
      window.clearTimeout(this.closeTimeout);
      if (!this.currentContent) {
        this.currentContent = placeholder;
        this.currentOuterContent = outerContent;
        window.setTimeout(action(() => {
          this.currentContent = content;
        }));
      }
      layers.addSheet(this);
    } else if (!open && prevProps.open) {
      this.show = false;
      (_b = (_a = this.sheetDragInternal) === null || _a === void 0 ? void 0 : _a.sheetBehavior) === null || _b === void 0 ? void 0 : _b.closeSheet();
      this.closeTimeout = window.setTimeout(action(() => {
        if (this.unmountOnClose) {
          this.currentContent = undefined;
          this.currentOuterContent = undefined;
        }
        if (this.contentElement != null) {
          this.contentElement.style.display = 'none';
        }
        onCloseAnimationComplete && onCloseAnimationComplete();
      }), this.enableAnimations ? ANIMATION_TIME : 0);
      this.unmountOnClose && layers.removeSheet(this);
    }
    if (this.contentShouldUpdate()) {
      this.currentContent = content;
      this.currentOuterContent = outerContent;
    }
  }
  contentShouldUpdate() {
    const {
      placeholder = defaultPlaceholder,
      mountBehaviour
    } = this.props;
    if (placeholder != null && this.currentContent === placeholder) {
      return false;
    }
    return this.show || mountBehaviour === 'eager';
  }
  get unmountOnClose() {
    return !this.props.mountBehaviour || this.props.mountBehaviour === 'open';
  }
  get applyInsetStyles() {
    const {
      expandContentIntoUnsafeArea = false,
      sheetContainsTextInput = false
    } = this.props;
    return !!this.supportsSafeAreaInset && !expandContentIntoUnsafeArea && !sheetContainsTextInput;
  }
  get from() {
    const {
      from,
      easelConfiguration: {
        direction
      }
    } = this.props;
    if (from === 'right' && direction === 'RTL') {
      return 'left';
    } else if (from === 'left' && direction === 'RTL') {
      return 'right';
    } else {
      return from || 'bottom';
    }
  }
  get onBottom() {
    return this.props.position === 'bottom';
  }
  get roundedCorners() {
    const {
      roundedCorners = true,
      largeRoundedCorners = false
    } = this.props;
    if (roundedCorners && largeRoundedCorners) {
      return 'large';
    }
    if (roundedCorners) {
      return 'small';
    }
    return 'none';
  }
  get autoFocusOnOpen() {
    const {
      overlay,
      open,
      autoFocusOnContent = true
    } = this.props;
    return !!(overlay && open && autoFocusOnContent);
  }
  get enableAnimations() {
    var _a;
    return ((_a = this.props.enableAnimations) !== null && _a !== void 0 ? _a : true) && this.props.easelConfiguration.enableAnimations;
  }
  get isFullscreen() {
    const {
      size,
      minSize
    } = this.props;
    if (!size) {
      return false;
    }
    const sheetSize = size || minSize;
    return sheetSize === '100%' || sheetSize === '100vh';
  }
  get contentStyles() {
    const {
      from,
      size,
      minSize,
      maxSize
    } = this.props;
    const nSize = (minSize != null || maxSize != null) && size == null ? 'inherit' : size;
    const nMaxSize = maxSize || '100%';
    return from === 'left' || from === 'right' ? {
      width: nSize,
      minWidth: minSize,
      maxWidth: nMaxSize
    } : {
      height: nSize,
      minHeight: minSize,
      maxHeight: nMaxSize
    };
  }
};
InternalSheet.defaultProps = {
  scrollable: true
};
InternalSheet.ids = new IdGenerator('sheet__');
InternalSheet = InternalSheet_1 = __decorate([observer], InternalSheet);
export { InternalSheet };