import { jsx as _jsx } from "react/jsx-runtime";
import classNames from 'classnames';
import * as React from 'react';
import { useCallback, useRef } from 'react';
import { CSSTransition } from 'react-transition-group';
import styles from './overlay.css';
const cssTransitionClassnames = {
    enter: styles.overlayEnter,
    enterActive: styles.overlayEnterActive,
    exit: styles.overlayExit,
};
export const Overlay = React.memo(function Overlay({ ariaLabel, show, opacity = 'default', transitionTimeout = 0, onClick, }) {
    const nodeRef = useRef(null);
    const captureRef = useCallback((newNode) => {
        var _a;
        newNode === null || newNode === void 0 ? void 0 : newNode.addEventListener('touchmove', preventDefault, { passive: false });
        (_a = nodeRef.current) === null || _a === void 0 ? void 0 : _a.removeEventListener('touchmove', preventDefault);
        nodeRef.current = newNode;
    }, []);
    const maybeOnClickAccessibleProp = onClick
        ? { tabIndex: 0, ['aria-label']: ariaLabel, role: 'button', onClick }
        : {};
    return (_jsx(CSSTransition, { in: show, timeout: transitionTimeout, unmountOnExit: true, mountOnEnter: true, classNames: cssTransitionClassnames, nodeRef: nodeRef, children: _jsx("div", { ref: captureRef, className: classNames(styles.overlay, {
                [styles.enableAnimation]: transitionTimeout !== 0,
                [styles.overlayTransparent]: opacity === 'transparent',
            }), ...maybeOnClickAccessibleProp }) }));
});
function preventDefault(event) {
    event.preventDefault();
}
