import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { UnreachableError } from '../../../../../../../base/preconditions';
import { CardBottomBadge, CardImageThumbnail, CardVideoThumbnail, CoverCard, } from '../../../../../../base/card/card';
import { formatDuration } from '../../../../../../base/date_time/duration/duration';
import { VideoCardMessages as Messages } from './video.messages';
export const VideoCard = (props) => {
    const { ariaLabel, thumbnailUrl, mimeType, onDragStart, onClick, } = props;
    if (isVideoProps(props)) {
        const badgeLabel = getBadgeLabel(mimeType, props.durationInSeconds);
        return (_jsxs(CoverCard, { buttonAriaLabel: ariaLabel, onClick: onClick, draggable: onDragStart != null, onDragStart: onDragStart, hasHoverEffect: false, children: [_jsx(CardVideoThumbnail, { imageUrl: thumbnailUrl, videoUrl: props.videoPreviewUrl, whenToPlay: "on-hover" }), _jsx(CardBottomBadge, { message: badgeLabel })] }));
    }
    return (_jsxs(CoverCard, { buttonAriaLabel: ariaLabel, onClick: onClick, draggable: onDragStart != null, onDragStart: onDragStart, hasHoverEffect: false, children: [_jsx(CardImageThumbnail, { url: thumbnailUrl, alt: props.alt }), _jsx(CardBottomBadge, { message: Messages.gifLabel() })] }));
};
const isVideoProps = (props) => {
    return props.videoPreviewUrl !== undefined;
};
const getBadgeLabel = (mimeType, duration) => {
    switch (mimeType) {
        case 'video/avi':
        case 'video/x-m4v':
        case 'video/x-matroska':
        case 'video/quicktime':
        case 'video/mp4':
        case 'video/mpeg':
        case 'video/webm':
            return duration ? formatDuration(duration, 'short') : Messages.defaultLabel();
        case 'image/gif':
            return Messages.gifLabel();
        default:
            throw new UnreachableError(mimeType);
    }
};
