import type { UnitSpace as Space } from '../metrics/metrics';
export declare const backgroundTones: readonly ["contrast", "neutral", "neutralLow"];
/** 
 * The border of a box.
 */
export declare const borders: readonly ["none", "standard", "critical", "low"];
/** 
 * The border radius of a box.
 */
export declare const borderRadiuses: readonly ["none", "standard", "large"];
/** 
 * The size of a box.
 */
export declare const sizes: readonly ["unset", "full"];
export type BackgroundLevel = 'canvas' | 'tabdock' | 'page' | 'surface';
/** 
 * The background of a box.
 */
export type Background = BackgroundLevel | (typeof backgroundTones)[number];
/** 
 * The border of a box.
 */
export type Border = (typeof borders)[number];
/** 
 * The border radius of a box.
 */
export type BorderRadius = (typeof borderRadiuses)[number];
/** 
 * The size of a box.
 */
export type Size = (typeof sizes)[number];
/** 
 * The props for a `Box` component.
 */
export type BoxProps = {
    /** 
         * The background of the box. This prop restricts the text color that descendant typography components can inherit.
         */
    background?: Background;
    /** 
         * A border that's applied to all edges of the box.
         * @defaultValue "none"
         */
    border?: Border;
    /** 
         * The curvature of the box's corners.
         * @defaultValue "none"
         */
    borderRadius?: BorderRadius;
    /** 
         * The padding for all edges of the box, in units.
         * @defaultValue "0"
         */
    padding?: Space;
    /** 
         * The padding for the horizontal edges of the box, in units.
         * @defaultValue "0"
         */
    paddingX?: Space;
    /** 
         * The padding for the vertical edges of the box, in units.
         * @defaultValue "0"
         */
    paddingY?: Space;
    /** 
         * The padding for the top edge of the box, in units.
         * @defaultValue "0"
         */
    paddingTop?: Space;
    /** 
         * The padding for the bottom edge of the box, in units.
         * @defaultValue "0"
         */
    paddingBottom?: Space;
    /** 
         * The padding for the starting edge of the box, in units.
         * @defaultValue "0"
         */
    paddingStart?: Space;
    /** 
         * The padding for the ending edge of the box, in units.
         * @defaultValue "0"
         */
    paddingEnd?: Space;
    /** 
         * The width of the box. If `"full"`, the box fills the available width.
         * @defaultValue "unset"
         */
    width?: Size;
    /** 
         * The height of the box. If `"full"`, the box fills the available height.
         * @defaultValue "unset"
         */
    height?: Size;
    /** 
         * The content of the box.
         */
    children?: React.ReactNode;
    /** 
         * An ID for the underlying `HTMLDivElement`.
         */
    id?: string;
};
/** 
 * An `HTMLDivElement` with a restricted set of props that adhere to Canva's design system.
 */
export declare function Box(props: BoxProps): JSX.Element;
