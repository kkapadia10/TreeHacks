export type SpinButtonRelatedProps = {
    hasSpinButtons: true;
    /** 
         * Label for spin button that decrements the value.
         */
    decrementAriaLabel: string;
    /** 
         * Label for spin button that increments the value.
         */
    incrementAriaLabel: string;
} | {
    hasSpinButtons?: false;
    decrementAriaLabel?: never;
    incrementAriaLabel?: never;
};
export type NumberInputProps = {
    /** 
         * Initial value of the input in uncontrolled mode.
         */
    defaultValue?: number;
    /** 
         * When true, it blocks interaction with the number input.
         */
    disabled?: boolean;
    /** 
         * If true, applies error styling and alerts screen readers that there is an error.
         */
    error?: boolean;
    /** 
         * If true, spin buttons to increment and decrement value are rendered as decorators.
         */
    hasSpinButtons?: boolean;
    /** 
         * DOM ID for the input element.
         */
    id?: string;
    /** 
         * Maximum value.
         */
    max?: number;
    /** 
         * The maximum number of fraction digits to format the final value.
         * Note that this will round the final value after user commits their change in number input
         * but will not format `value` prop.
         */
    maximumFractionDigits?: number;
    /** 
         * Maximum length of characters of input value.
         */
    maxLength?: number;
    /** 
         * Minimum value.
         */
    min?: number;
    /** 
         * Name of the form control.
         */
    name?: string;
    /** 
         * Called any time the value changes, including react change events
         * on the input element but also on `onChangeComplete` events.
         *
         * `valueAsNumber` is `undefined` if the value is empty, `NaN` if it is not a valid number.
         * See `value` prop to learn more about the controlled mode.
         */
    onChange?(valueAsNumber: number | undefined, valueAsString: string): void;
    /** 
         * Called when value is committed through these events:
         * - Input blur
         * - ArrowUp and ArrowDown key down
         * - Spin button click
         *
         * Value is `undefined` if empty or invalid string value.
         */
    onChangeComplete?(value: number | undefined): void;
    /** 
         * Regular expression which the input's value must match
         * for the value to pass constraint validation.
         */
    pattern?: string;
    /** 
         * Text that appears when this input has no value.
         */
    placeholder?: string;
    /** 
         * Value to increment by.
         */
    step?: number;
    /** 
         * Value of the input in controlled mode.
         * It can be number or string because while value input is still in progress,
         * some valid values may not be represented accurately as a number value.
         * For example, '-' will parse as `NaN` and '2.' will parse as 2 without the trailing period.
         *
         * If you want to handle number value only, it is recommended to use uncontrolled mode
         * with `onChangeComplete` prop instead of `value` and `onChange` prop combination.
         * Alternatively if value can be non-negative number only, you can use `onChange`
         * and rely on `value` always being a valid number.
         */
    value?: string | number;
} & SpinButtonRelatedProps;
/** 
 *  Input for number-based values. */
export declare function NumberInput(props: NumberInputProps): JSX.Element;
