"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppUiProvider = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const React = require("react");
const provider_1 = require('../../../../../base/provider/provider');
const theme_1 = require('../../../../../base/theme/theme');
/** 
 * A wrapper that provides theming and user preferences to App UI Kit components.
 * This component must appear once — and only once — at the root of an app, as the other components depend on it.
 */
function AppUiProvider({ children }) {
    const [theme, setTheme] = React.useState();
    function setThemeFromContext(context) {
        setTheme(context.theme);
    }
    React.useEffect(() => {
        const wrappedWindow = window;
        const uiKit = wrappedWindow['__canva__']['uiKit'];
        uiKit.getUiContext().then(setThemeFromContext);
        uiKit.onUiContextChange(setThemeFromContext);
    }, []);
    if (!theme) {
        return (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, {});
    }
    return ((0, jsx_runtime_1.jsxs)(provider_1.EaselProvider, { enableAnimations: true, 
        direction: "LTR", disableFocusTraps: true, enableUserSelection: false, disableDialogBlur: false, enableEaselUiRefresh: false, children: [(0, jsx_runtime_1.jsx)(theme_1.ApplyThemeRoot, { appearance: theme, classicLight: theme, classicDark: theme, light: theme, dark: theme }), children] }));
}
exports.AppUiProvider = AppUiProvider;
