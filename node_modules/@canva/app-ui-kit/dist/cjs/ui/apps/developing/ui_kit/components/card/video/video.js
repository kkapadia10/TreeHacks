"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VideoCard = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const preconditions_1 = require('../../../../../../../base/preconditions');
const card_1 = require('../../../../../../base/card/card');
const duration_1 = require('../../../../../../base/date_time/duration/duration');
const video_messages_1 = require("./video.messages");
const VideoCard = (props) => {
    const { ariaLabel, thumbnailUrl, mimeType, onDragStart, onClick, } = props;
    if (isVideoProps(props)) {
        const badgeLabel = getBadgeLabel(mimeType, props.durationInSeconds);
        return ((0, jsx_runtime_1.jsxs)(card_1.CoverCard, { buttonAriaLabel: ariaLabel, onClick: onClick, draggable: onDragStart != null, onDragStart: onDragStart, hasHoverEffect: false, children: [(0, jsx_runtime_1.jsx)(card_1.CardVideoThumbnail, { imageUrl: thumbnailUrl, videoUrl: props.videoPreviewUrl, whenToPlay: "on-hover" }), (0, jsx_runtime_1.jsx)(card_1.CardBottomBadge, { message: badgeLabel })] }));
    }
    return ((0, jsx_runtime_1.jsxs)(card_1.CoverCard, { buttonAriaLabel: ariaLabel, onClick: onClick, draggable: onDragStart != null, onDragStart: onDragStart, hasHoverEffect: false, children: [(0, jsx_runtime_1.jsx)(card_1.CardImageThumbnail, { url: thumbnailUrl, alt: props.alt }), (0, jsx_runtime_1.jsx)(card_1.CardBottomBadge, { message: video_messages_1.VideoCardMessages.gifLabel() })] }));
};
exports.VideoCard = VideoCard;
const isVideoProps = (props) => {
    return props.videoPreviewUrl !== undefined;
};
const getBadgeLabel = (mimeType, duration) => {
    switch (mimeType) {
        case 'video/avi':
        case 'video/x-m4v':
        case 'video/x-matroska':
        case 'video/quicktime':
        case 'video/mp4':
        case 'video/mpeg':
        case 'video/webm':
            return duration ? (0, duration_1.formatDuration)(duration, 'short') : video_messages_1.VideoCardMessages.defaultLabel();
        case 'image/gif':
            return video_messages_1.VideoCardMessages.gifLabel();
        default:
            throw new preconditions_1.UnreachableError(mimeType);
    }
};
