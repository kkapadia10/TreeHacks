import * as React from 'react';
export declare const enum LayerLevel {
    CONTENT = 0,
    PINS = 1,
    LIGHTBOXES = 2,
    MODALS = 3,
    COMPLIANCE_NOTICES = 4,
    TOASTS = 5,
    TOOLTIPS = 6
}
type Props = {
    open?: boolean;
    children?: any;
    level?: LayerLevel;
    onOutsideLayerPointerDown?(event?: Event): void
    parentLayer?: HTMLElement;
};
export declare class LayerError extends Error {
}
declare const LayerContext: React.Context<{
    parentLayer?: HTMLDivElement | undefined;
}>;
export type WithLayerParentProps = {
    parentLayer: HTMLDivElement | undefined;
    children: React.ReactNode;
};
export declare function WithLayerParent({ parentLayer, children }: WithLayerParentProps): import("react/jsx-runtime").JSX.Element;
export declare class Layer extends React.Component<Props> {
    private layerRoot?;
    private layerContent?;
    private parentLayer?;
    private parentDocument;
    private hasEventListeners;
    static contextType: React.Context<{
        parentLayer?: HTMLDivElement | undefined;
    }>;
    context: React.ContextType<typeof LayerContext>;
    componentDidMount(): void;
    componentWillUnmount(): void;
    private maybeAddPointerEventListeners;
    private maybeRemovePointerEventListeners;
    private close;
    private get parentGlobal();
    private show;
    private findLastLayerRoot;
    render(): React.ReactNode;
    private readonly onDocumentMouseDown;
    private readonly onDocumentTouchStart;
}
export {};
