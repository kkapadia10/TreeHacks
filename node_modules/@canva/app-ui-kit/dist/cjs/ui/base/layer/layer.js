"use strict";

const makeObservable = require('../../../base/make_observable/make_observable').makeObservable;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Layer = exports.WithLayerParent = exports.LayerError = exports.LayerLevel = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const mobx = require("mobx");
const mobxReact = require("mobx-react");
const React = require("react");
const ReactDOM = require("react-dom");
const theme_1 = require('../theme/theme');
const layer_css_1 = require("./layer.css");
var LayerLevel;
(function (LayerLevel) {
  LayerLevel[LayerLevel["CONTENT"] = 0] = "CONTENT";
  LayerLevel[LayerLevel["PINS"] = 1] = "PINS";
  LayerLevel[LayerLevel["LIGHTBOXES"] = 2] = "LIGHTBOXES";
  LayerLevel[LayerLevel["MODALS"] = 3] = "MODALS";
  LayerLevel[LayerLevel["COMPLIANCE_NOTICES"] = 4] = "COMPLIANCE_NOTICES";
  LayerLevel[LayerLevel["TOASTS"] = 5] = "TOASTS";
  LayerLevel[LayerLevel["TOOLTIPS"] = 6] = "TOOLTIPS";
})(LayerLevel || (exports.LayerLevel = LayerLevel = {}));
class LayerError extends Error {}
exports.LayerError = LayerError;
const LayerContext = React.createContext({});
function WithLayerParent(
  {
    parentLayer,
    children
  }
) {
  return (0, jsx_runtime_1.jsx)(LayerContext.Provider, {
    value: {
      parentLayer
    },
    children: children
  });
}
exports.WithLayerParent = WithLayerParent;
let Layer = class Layer extends React.Component {
  static _makeObservable(instance) {
    makeObservable(instance, {
      layerContent: mobx.observable.ref,
      close: mobx.action,
      show: mobx.action
    });
  }
  constructor() {
    super(...arguments);
    Layer._makeObservable(this);
    this.layerRoot = undefined;
    this.layerContent = undefined;
    this.parentDocument = document;
    this.hasEventListeners = false;
    this.onDocumentMouseDown = event => {
      if (this.props.onOutsideLayerPointerDown == null) {
        return;
      }
      if (this.layerRoot == null) {
        return;
      }
      if (!(event.target instanceof this.parentGlobal.Node)) {
        return;
      }
      if (!this.layerRoot.contains(event.target)) {
        this.props.onOutsideLayerPointerDown(event);
      }
    };
    this.onDocumentTouchStart = event => {
      this.onDocumentMouseDown(event);
    };
  }
  componentDidMount() {
    this.parentLayer = this.props.parentLayer || this.context.parentLayer || document.body;
    this.parentDocument = this.parentLayer && this.parentLayer.ownerDocument || document;
    mobxReact.disposeOnUnmount(this, [mobx.reaction(() => this.props.open, open => open ? this.show(this.props.level) : this.close(), {
      fireImmediately: true
    }), mobx.reaction(() => this.props.onOutsideLayerPointerDown, outsideLayerPointerDown => {
      outsideLayerPointerDown != null ? this.maybeAddPointerEventListeners() : this.maybeRemovePointerEventListeners();
    }, {
      fireImmediately: true
    })]);
  }
  componentWillUnmount() {
    this.maybeRemovePointerEventListeners();
    this.close();
  }
  maybeAddPointerEventListeners() {
    if (!this.hasEventListeners && this.layerRoot != null) {
      this.parentDocument.addEventListener('mousedown', this.onDocumentMouseDown);
      this.parentDocument.addEventListener('touchstart', this.onDocumentTouchStart);
      this.hasEventListeners = true;
    }
  }
  maybeRemovePointerEventListeners() {
    if (this.hasEventListeners) {
      this.parentDocument.removeEventListener('mousedown', this.onDocumentMouseDown);
      this.parentDocument.removeEventListener('touchstart', this.onDocumentTouchStart);
      this.hasEventListeners = false;
    }
  }
  close() {
    if (!this.layerRoot || !this.layerContent) {
      return;
    }
    if (this.parentLayer == null || this.layerRoot.parentNode !== this.parentLayer) {
      throw new LayerError('Closed before mount.');
    }
    this.parentLayer.removeChild(this.layerRoot);
    this.layerRoot = undefined;
    this.layerContent = undefined;
    this.parentDocument.dispatchEvent(new this.parentGlobal.CustomEvent('layerclose'));
  }
  get parentGlobal() {
    return this.parentDocument.defaultView || window;
  }
  show(level) {
    if (!this.layerRoot || !this.layerContent) {
      if (!this.parentLayer) {
        throw new LayerError('Shown before mount.');
      }
      this.layerContent = this.parentDocument.createElement('div');
      this.layerContent.classList.add(layer_css_1.default.layerContent);
      this.layerRoot = this.parentDocument.createElement('div');
      if (this.parentLayer === this.parentDocument.body) {
        this.layerRoot.addEventListener('click', () => 0);
      }
      this.layerRoot.classList.add(layer_css_1.default.layerRoot);
      this.layerRoot.appendChild(this.layerContent);
      const lastLayerRoot = this.findLastLayerRoot(this.parentLayer);
      if (lastLayerRoot) {
        lastLayerRoot.after(this.layerRoot);
      } else {
        this.parentLayer.prepend(this.layerRoot);
      }
    }
    this.layerRoot.style.zIndex = String(level != null ? level : LayerLevel.PINS);
  }
  findLastLayerRoot(parentLayer) {
    let lastLayerRoot = null;
    for (const parentLayerChild of parentLayer.children) {
      if (!parentLayerChild.classList.contains(layer_css_1.default.layerRoot)) {
        break;
      }
      lastLayerRoot = parentLayerChild;
    }
    return lastLayerRoot;
  }
  render() {
    if (this.layerContent) {
      return ReactDOM.createPortal((0, jsx_runtime_1.jsx)(LayerContext.Provider, {
        value: {
          parentLayer: this.layerRoot
        },
        children: (0, jsx_runtime_1.jsx)(theme_1.WithThemeData, {
          children: data => (0, jsx_runtime_1.jsx)("div", {
            className: data.className,
            children: this.props.children
          })
        })
      }), this.layerContent);
    }
    return null;
  }
};
exports.Layer = Layer;
Layer.contextType = LayerContext;
exports.Layer = Layer = tslib_1.__decorate([mobxReact.observer], Layer);