"use strict";

const makeObservable = require('../../../base/make_observable/make_observable').makeObservable;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MouseTracker = void 0;
const tslib_1 = require("tslib");
const mobx = require("mobx");
const client_position_1 = require("./client_position");
const drag_handler_1 = require("./drag_handler");
class MouseTracker {
  static _makeObservable(instance) {
    makeObservable(instance, {
      onMouseMove: mobx.action.bound,
      onMouseUp: mobx.action.bound
    });
  }
  constructor(drag, simulateMove, onStopped) {
    MouseTracker._makeObservable(this);
    this.drag = drag;
    this.onStopped = onStopped;
    this.type = 'mouse';
    this.onSimulateMove = () => {
      this.drag.forceStart();
      this.drag.handleMove(this.drag.currentPosition, this.drag.modifiers);
    };
    document.addEventListener('mousemove', this.onMouseMove, {
      capture: true,
      passive: true
    });
    document.addEventListener('mouseup', this.onMouseUp, {
      capture: true,
      passive: true
    });
    this.simulateMoveSubscription = simulateMove && simulateMove.subscribe(this.onSimulateMove);
  }
  stop() {
    try {
      this.drag.stop();
    } finally {
      document.removeEventListener('mousemove', this.onMouseMove, {
        capture: true
      });
      document.removeEventListener('mouseup', this.onMouseUp, {
        capture: true
      });
      if (this.simulateMoveSubscription) {
        this.simulateMoveSubscription.unsubscribe();
        this.simulateMoveSubscription = undefined;
      }
      this.onStopped();
    }
  }
  onMouseMove(evt) {
    this.drag.handleMove(client_position_1.ClientPosition.fromEvent(evt), drag_handler_1.DragHandler.modifiersFromEvent(evt));
  }
  onMouseUp(evt) {
    try {
      this.drag.updateAndMayStart(client_position_1.ClientPosition.fromEvent(evt), drag_handler_1.DragHandler.modifiersFromEvent(evt));
    } finally {
      this.stop();
    }
  }
}
exports.MouseTracker = MouseTracker;