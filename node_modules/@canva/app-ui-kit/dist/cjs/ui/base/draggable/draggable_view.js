"use strict";

const makeObservable = require('../../../base/make_observable/make_observable').makeObservable;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DraggableView = void 0;
const tslib_1 = require("tslib");
const mobx = require("mobx");
const mobx_react_1 = require("mobx-react");
const React = require("react");
const draggable_1 = require("./draggable");
let DraggableView = class DraggableView extends React.Component {
  static _makeObservable(instance) {
    makeObservable(instance, {
      onMouseDown: mobx.action,
      onTouchStart: mobx.action
    });
  }
  constructor() {
    super(...arguments);
    DraggableView._makeObservable(this);
    this.draggable = new draggable_1.Draggable(new Proxy({}, {
      get: (target, p) => this.props[p]
    }));
    this.onMouseDown = e => {
      const {
        onMouseDown
      } = this.props;
      onMouseDown && onMouseDown(e);
      this.draggable.onMouseDown(e);
    };
    this.onTouchStart = e => {
      const {
        onTouchStart
      } = this.props;
      onTouchStart && onTouchStart(e);
      this.draggable.onTouchStart(e);
    };
  }
  componentWillUnmount() {
    if (!this.props.continueAfterUnmount) {
      this.draggable.stopInProgressDrag();
    }
  }
  render() {
    return this.props.children({
      onMouseDown: this.onMouseDown,
      onTouchStart: this.onTouchStart
    });
  }
};
exports.DraggableView = DraggableView;
exports.DraggableView = DraggableView = tslib_1.__decorate([mobx_react_1.observer], DraggableView);