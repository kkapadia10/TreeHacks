"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyCombinationHandler = exports.WithKeyCombinationHandler = exports.useKeyCombinationHandler = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const React = require("react");
const provider_1 = require('../provider/provider');
const key_combination_1 = require("./key_combination");
const key_combination_handler_css_1 = require("./key_combination_handler.css");
const key_listener_1 = require("./key_listener");
function useKeyCombinationHandler(keyMap, { handleInputs, }) {
    const [ref, setRef] = React.useState(null);
    const direction = (0, provider_1.useDirection)();
    React.useEffect(() => {
        if (!ref) {
            return;
        }
        const keyListener = new key_listener_1.KeyListener(ref, {
            ignoreInput: !handleInputs,
        });
        keyMap.forEach(([keyCombination, handlers, options]) => {
            const trigger = (0, key_combination_1.makeKeyTrigger)(keyCombination, direction);
            trigger.ignoreKeyboardLayout = options === null || options === void 0 ? void 0 : options.ignoreKeyboardLayout;
            if (typeof handlers === 'function') {
                keyListener.addListener('keydown', trigger, handlers);
            }
            else {
                handlers.keydown && keyListener.addListener('keydown', trigger, handlers.keydown);
                handlers.keyup && keyListener.addListener('keyup', trigger, handlers.keyup);
                handlers.keypress && keyListener.addListener('keypress', trigger, handlers.keypress);
            }
        });
        return () => {
            keyListener.reset();
        };
    }, [direction, handleInputs, keyMap, ref]);
    return {
        ref: setRef,
        element: ref,
    };
}
exports.useKeyCombinationHandler = useKeyCombinationHandler;
const WithKeyCombinationHandler = props => {
    const { map, handleInputs, children } = props;
    const { ref } = useKeyCombinationHandler(map, { handleInputs });
    return (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: children({ ref }) });
};
exports.WithKeyCombinationHandler = WithKeyCombinationHandler;
const KeyCombinationHandler = props => {
    const { children, map, handleInputs } = props;
    const { ref } = useKeyCombinationHandler(map, { handleInputs });
    return ((0, jsx_runtime_1.jsx)(
        "div",
        { className: key_combination_handler_css_1.default.shortcuts, ref: ref, tabIndex: -1, children: children }
    ));
};
exports.KeyCombinationHandler = KeyCombinationHandler;
