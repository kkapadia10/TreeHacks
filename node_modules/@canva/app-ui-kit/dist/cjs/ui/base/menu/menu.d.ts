import * as React from 'react';
import type { TouchOrMouseEvent } from '../button/button';
import type { ButtonProps } from '../button/internal/internal_button';
import type { Focusable } from '../focusable/focusable';
import type { Space } from '../metrics/metrics';
type MenuVariant = 'regular' | 'rounded';
type MenuSpacing = Extract<Space, '0' | '1u'>;
type MenuRole = 'list' | 'menu' | 'menubar' | 'navigation' | 'listbox' | 'group';
type MenuDirection = 'vertical' | 'horizontal';
export type MenuContextType = {
    menuRole: MenuRole;
    menuDirection?: MenuDirection;
    menuVariant?: MenuVariant;
    menuSpacing?: MenuSpacing;
    registerToggleMenu: () => void;
} | undefined;
type MenuProps = {
    children?: React.ReactNode;
    id?: string;
    className?: string;
    variant?: MenuVariant
    spacing?: MenuSpacing
    role: MenuRole
    tagName?: 'ul' | 'ol'
    ariaActiveDescendant?: string;
    ariaMultiSelectable?: boolean;
    ariaLabel?: string;
    ariaLabelledBy?: string;
} & BleedProps & DirectionProps;
type BleedProps = {
    variant: Extract<MenuVariant, 'rounded'>;
    direction?: 'vertical';
    bleedX: boolean;
} | {
    bleedX?: false;
};
type DirectionProps = {
    role: Exclude<MenuRole, 'listbox'>;
    direction?: 'vertical' | 'horizontal';
} | {
    direction?: never;
};
export declare const Menu: React.ForwardRefExoticComponent<MenuProps & React.RefAttributes<HTMLElement>>;
export type MenuItemProps = {
    id?: string;
    buttonId?: string;
} & MenuItemButtonSharedProps;
type Decorator = (() => React.ReactNode) | React.ReactNode;
type MenuItemButtonSharedProps = {
    children?: React.ReactNode;
    className?: string;
    href?: string
    target?: string
    onClick?: (event: TouchOrMouseEvent<any>) => void
    start?: Decorator
    end?: Decorator
    label?: string
    description?: string
    lineClamp?: number
    active?: boolean
    disabled?: boolean
    onFocus?: React.FocusEventHandler
    onBlur?: React.FocusEventHandler
    onMouseEnter?: (event: TouchOrMouseEvent<any>) => void
    onMouseLeave?: (event: TouchOrMouseEvent<any>) => void
    buttonRef?: React.Ref<HTMLElement>
    focusRef?: React.Ref<Focusable>;
    ariaSelected?: boolean;
} & Pick<ButtonProps, 'ariaLabel' | 'ariaLabelledBy' | 'ariaControls' | 'disclosure' | 'draggable' | 'ariaHasPopup' | 'tabIndex' | 'tooltipLabel'>;
type MenuItemButtonProps = MenuItemButtonSharedProps & {
    id?: string;
    alignment?: 'start' | 'center';
} & Pick<ButtonProps, 'role'>;
export declare const MenuItem: React.NamedExoticComponent<MenuItemProps>;
export declare const MenuItemButton: ({ id, role, alignment, children, className, active, disabled, draggable, disclosure, onFocus, onBlur, onMouseEnter, onMouseLeave, tabIndex, start, end, label, description, lineClamp, buttonRef, focusRef, tooltipLabel, ariaLabel, ariaLabelledBy, ariaHasPopup, ariaControls, ariaSelected, ...props }: MenuItemButtonProps) => import("react/jsx-runtime").JSX.Element;
export declare const MenuDivider: React.NamedExoticComponent<{
    id?: string | undefined;
    children?: React.ReactNode;
}>;
type ToggleMenuProps = MenuProps & {
    id?: string;
    menuId?: string
    labelId?: string
    label: string
    labelNode?: React.ReactNode
    href?: string
    onToggleClick?: () => void
    onClick?: (event: TouchOrMouseEvent<any>) => void
    toggleLabel?: string
    defaultExpanded?: boolean
    expanded?: boolean
    buttonClassName?: string
} & Pick<MenuItemButtonSharedProps, 'start' | 'end' | 'active' | 'buttonRef' | 'tooltipLabel' | 'disabled' | 'draggable'>;
export declare const ToggleMenu: React.ForwardRefExoticComponent<ToggleMenuProps & React.RefAttributes<HTMLElement>>;
export {};
