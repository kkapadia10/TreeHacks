"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Clickable = exports.Link = exports.BaseLink = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const classnames_1 = require("classnames");
const React = require("react");
const button_aria_attributes_1 = require('../a11y/button_aria_attributes/button_aria_attributes');
const screen_reader_content_1 = require('../a11y/screen_reader_content/screen_reader_content');
const device_capabilities_1 = require('../device_capabilities/device_capabilities');
const icon_1 = require('../icons/open_in_new/icon');
const link_css_1 = require("./link.css");
const link_messages_1 = require("./link.messages");
function renderLink(props, ref) {
    const { href, target, children, className, id, title, variant = 'regular', draggable = false, onClick, role, ariaLabel, ariaLabelledBy, ariaCurrent, ariaOwns, ariaRoleDescription, ariaDescribedBy, ariaControls, ariaHidden, tabIndex, active, disclosure, disabled, withOpenInNewIcon = false, } = props;
    let { rel } = props;
    const targetBlank = target === '_blank';
    if (targetBlank && !rel) {
        rel = 'noopener';
    }
    const onKeyDown = React.useCallback((e) => {
        if (e.key === ' ' && onClick) {
            if (role === 'button' && e.target === e.currentTarget) {
                onClick(e);
            }
        }
    }, [onClick, role]);
    return ((0, jsx_runtime_1.jsxs)(
        "a",
        { className: (0, classnames_1.default)(className, (0, link_css_1.getStyle)(variant), {
                [link_css_1.default.hoverSupported]: (0, device_capabilities_1.canHover)(),
                [link_css_1.default.disabled]: disabled,
            }), id: id, href: disabled ? undefined : href, ref: ref, draggable: draggable, onClick: disabled ? undefined : onClick, onKeyDown: disabled ? undefined : onKeyDown, target: target, title: title, rel: rel, role: role, "aria-current": ariaCurrent, ...(0, button_aria_attributes_1.getButtonAriaAttributes)({
                tagName: 'a',
                ariaLabel,
                ariaLabelledBy,
                ariaControls,
                ariaOwns,
                ariaRoleDescription,
                ariaDescribedBy,
                ariaHidden,
                tabIndex,
                active,
                disabled,
                disclosure,
                role,
            }), children: [children, withOpenInNewIcon && (0, jsx_runtime_1.jsx)(icon_1.OpenInNewIcon, { size: "small", className: link_css_1.default.openInNewIcon }), targetBlank && ((0, jsx_runtime_1.jsx)(screen_reader_content_1.ScreenReaderContent, { tagName: "span", children: link_messages_1.LinkMessages.opensInNewWindow() }))] }
    ));
}
function renderClickable({ onClick, ...props }, ref) {
    const wrappedOnClick = React.useCallback((event) => {
        event.preventDefault();
        if (onClick) {
            onClick(event);
        }
    }, [onClick]);
    const href = props.href || '#';
    return (0, jsx_runtime_1.jsx)(exports.Link, { role: "button", ...props, ref: ref, href: href, onClick: wrappedOnClick });
}
exports.BaseLink = React.forwardRef(function BaseLink(props, ref) {
    return renderLink(props, ref);
});
exports.Link = React.forwardRef(function Link(props, ref) {
    return renderLink({ ...props }, ref);
});
exports.Clickable = React.forwardRef(function Clickable(props, ref) {
    return renderClickable(props, ref);
});
