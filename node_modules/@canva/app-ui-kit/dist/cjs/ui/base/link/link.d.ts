import * as React from 'react';
import type { ButtonAriaProps } from '../a11y/button_aria_attributes/button_aria_attributes';
type AriaProps = Pick<ButtonAriaProps, 'active' | 'ariaLabel' | 'ariaLabelledBy' | 'ariaHidden' | 'tabIndex'> & {
    role?: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox'
    ariaCurrent?: 'page' | 'step' | 'location'
};
type CommonProps = {
    children?: React.ReactNode
    draggable?: boolean
    className?: string
    id?: string
    title?: string
    ref?: React.Ref<HTMLAnchorElement>;
    disabled?: boolean
    variant?: Variant
};
type AnchorProps = {
    href: string
    rel?: string
    target?: string
    withOpenInNewIcon?: boolean
};
export type ClickableProps = CommonProps & AriaProps & Pick<ButtonAriaProps, 'disclosure' | 'ariaRoleDescription' | 'ariaControls' | 'ariaOwns' | 'ariaDescribedBy' | 'ariaHasPopup'> & {
    onClick: React.MouseEventHandler<HTMLAnchorElement>;
} & (AnchorProps | {
    href?: string;
    rel?: undefined;
});
export type LinkProps = CommonProps & AnchorProps & Omit<AriaProps, 'role'> & {
    onClick?: React.MouseEventHandler<HTMLAnchorElement>;
    role?: AriaProps['role'] | 'button'
};
export type Variant = 'regular' | 'semiBold' | 'subtle' | 'muted' | 'unstyled' | 'critical';
export type BaseLinkProps = Omit<LinkProps, 'className'> & {
    variant: Variant;
};
export declare const BaseLink: (props: BaseLinkProps) => React.ReactElement;
export declare const Link: (props: LinkProps) => React.ReactElement;
export declare const Clickable: (props: ClickableProps) => React.ReactElement;
export {};
