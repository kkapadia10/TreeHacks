"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Grid = void 0;
const preconditions_1 = require('../../../../base/preconditions');
const classnames_1 = require("classnames");
const React = require("react");
const types_1 = require('../../box/types');
const metrics_1 = require('../../metrics/metrics');
const responsive_1 = require('../../responsive/responsive');
const grid_css_1 = require("./grid.css");
const spacingPropertyMap = {
    default: grid_css_1.customProperties.spacing,
    smallUp: grid_css_1.customProperties.smallUpSpacing,
    mediumUp: grid_css_1.customProperties.mediumUpSpacing,
    largeUp: grid_css_1.customProperties.largeUpSpacing,
};
const spacingXPropertyMap = {
    default: grid_css_1.customProperties.spacingX,
    smallUp: grid_css_1.customProperties.smallUpSpacingX,
    mediumUp: grid_css_1.customProperties.mediumUpSpacingX,
    largeUp: grid_css_1.customProperties.largeUpSpacingX,
};
const spacingYPropertyMap = {
    default: grid_css_1.customProperties.spacingY,
    smallUp: grid_css_1.customProperties.smallUpSpacingY,
    mediumUp: grid_css_1.customProperties.mediumUpSpacingY,
    largeUp: grid_css_1.customProperties.largeUpSpacingY,
};
const columnsPropertyMap = {
    default: grid_css_1.customProperties.columns,
    smallUp: grid_css_1.customProperties.smallUpColumns,
    mediumUp: grid_css_1.customProperties.mediumUpColumns,
    largeUp: grid_css_1.customProperties.largeUpColumns,
};
const rowSizePropertyMap = {
    default: grid_css_1.customProperties.rowSize,
    smallUp: grid_css_1.customProperties.smallUpRowSize,
    mediumUp: grid_css_1.customProperties.mediumUpRowSize,
    largeUp: grid_css_1.customProperties.largeUpRowSize,
};
const alignYPropertyMap = {
    default: grid_css_1.customProperties.alignY,
    smallUp: grid_css_1.customProperties.smallUpAlignY,
    mediumUp: grid_css_1.customProperties.mediumUpAlignY,
    largeUp: grid_css_1.customProperties.largeUpAlignY,
};
const alignXPropertyMap = {
    default: grid_css_1.customProperties.alignX,
    smallUp: grid_css_1.customProperties.smallUpAlignX,
    mediumUp: grid_css_1.customProperties.mediumUpAlignX,
    largeUp: grid_css_1.customProperties.largeUpAlignX,
};
exports.Grid = React.forwardRef(({ children, spacing, spacingX, spacingY, columns, rowSize, tagName = 'div', alignY, alignX, ...rest }, ref) => {
    return React.createElement(tagName, {
        className: (0, classnames_1.default)(grid_css_1.default.grid),
        style: {
            ...(spacing && (0, responsive_1.generateStyle)(spacingPropertyMap, spacing, metrics_1.getSpaceValue)),
            ...(spacingX && (0, responsive_1.generateStyle)(spacingXPropertyMap, spacingX, metrics_1.getSpaceValue)),
            ...(spacingY && (0, responsive_1.generateStyle)(spacingYPropertyMap, spacingY, metrics_1.getSpaceValue)),
            ...(columns && (0, responsive_1.generateStyle)(columnsPropertyMap, columns)),
            ...(rowSize && (0, responsive_1.generateStyle)(rowSizePropertyMap, rowSize, getRowSizeValue)),
            ...(alignY && (0, responsive_1.generateStyle)(alignYPropertyMap, alignY)),
            ...(alignX && (0, responsive_1.generateStyle)(alignXPropertyMap, alignX)),
        },
        children,
        ref,
        ...(0, types_1.commonPropsToDOMProps)(rest),
    });
});
exports.Grid.displayName = 'Grid';
function getRowSizeValue(rowSize) {
    switch (rowSize) {
        case 'auto':
            return 'auto';
        case 'equal':
            return '1fr';
        default:
            throw new preconditions_1.UnreachableError(rowSize);
    }
}
