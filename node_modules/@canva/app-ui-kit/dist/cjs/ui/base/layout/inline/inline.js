"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Inline = void 0;
const classnames_1 = require("classnames");
const React = require("react");
const types_1 = require('../../box/types');
const metrics_1 = require('../../metrics/metrics');
const responsive_1 = require('../../responsive/responsive');
const inline_css_1 = require("./inline.css");
const spacingPropertyMap = {
    default: inline_css_1.customProperties.spacing,
    smallUp: inline_css_1.customProperties.smallUpSpacing,
    mediumUp: inline_css_1.customProperties.mediumUpSpacing,
    largeUp: inline_css_1.customProperties.largeUpSpacing,
};
const alignPropertyMap = {
    default: inline_css_1.customProperties.align,
    smallUp: inline_css_1.customProperties.smallUpAlign,
    mediumUp: inline_css_1.customProperties.mediumUpAlign,
    largeUp: inline_css_1.customProperties.largeUpAlign,
};
const alignYPropertyMap = {
    default: inline_css_1.customProperties.alignY,
    smallUp: inline_css_1.customProperties.smallUpAlignY,
    mediumUp: inline_css_1.customProperties.mediumUpAlignY,
    largeUp: inline_css_1.customProperties.largeUpAlignY,
};
const getAlignValue = (align) => (align !== 'spaceBetween' ? align : 'space-between');
const getAlignYValue = (alignY) => alignY === 'start' || alignY === 'end' ? `flex-${alignY}` : alignY;
exports.Inline = React.forwardRef(({ children, spacing, align, alignY, collapseBelow, collapsed, tagName = 'div', ...rest }, ref) => {
    const isList = tagName === 'ul' || tagName === 'ol';
    const childTagName = isList ? 'li' : 'span';
    const isPhrasingContent = tagName === 'span';
    const containerTagName = isPhrasingContent ? 'span' : 'div';
    return React.createElement(containerTagName, {
        className: inline_css_1.default.container,
        ref,
    }, React.createElement(tagName, {
        className: (0, classnames_1.default)(inline_css_1.default.inline, collapseBelow && collapseBelowClassNames[collapseBelow], collapsed && inline_css_1.default.collapsed),
        children: wrapOrCloneChildren(children, childTagName),
        style: {
            ...(spacing && (0, responsive_1.generateStyle)(spacingPropertyMap, spacing, metrics_1.getSpaceValue)),
            ...(align && (0, responsive_1.generateStyle)(alignPropertyMap, align, getAlignValue)),
            ...(alignY && (0, responsive_1.generateStyle)(alignYPropertyMap, alignY, getAlignYValue)),
        },
        ...(0, types_1.commonPropsToDOMProps)(rest),
    }));
});
exports.Inline.displayName = 'Inline';
function wrapOrCloneChildren(children, tagName) {
    return React.Children.map(flattenChildren(children), child => {
        if (!child) {
            return null;
        }
        if (tagName === 'li'
            && React.isValidElement(child)
            && child.type === 'li') {
            return React.cloneElement(child, {
                className: (0, classnames_1.default)(child.props.className, inline_css_1.default.element),
            });
        }
        return React.createElement(tagName, {
            className: inline_css_1.default.element,
        }, child);
    });
}
function isFragment(node) {
    return React.isValidElement(node) && node.type === React.Fragment;
}
function flattenChildren(children, depth = 0, keys = []) {
    return React.Children.toArray(children).reduce((acc, node, nodeIndex) => {
        if (isFragment(node)) {
            acc.push(...flattenChildren(node.props.children, depth + 1, keys.concat(node.key || nodeIndex)));
        }
        else {
            if (React.isValidElement(node)) {
                acc.push(React.cloneElement(node, {
                    key: keys.concat(String(node.key)).join('.'),
                }));
            }
            else if (typeof node === 'string' || typeof node === 'number') {
                acc.push(node);
            }
        }
        return acc;
    }, []);
}
const collapseBelowClassNames = {
    small: inline_css_1.default.collapseBelowSmall,
    medium: inline_css_1.default.collapseBelowMedium,
    large: inline_css_1.default.collapseBelowLarge,
};
