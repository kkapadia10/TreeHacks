"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Columns = exports.Column = void 0;
const preconditions_1 = require('../../../../base/preconditions');
const classnames_1 = require("classnames");
const React = require("react");
const types_1 = require('../../box/types');
const metrics_1 = require('../../metrics/metrics');
const responsive_1 = require('../../responsive/responsive');
const columns_css_1 = require("./columns.css");
exports.Column = React.forwardRef(({ width, children, tagName = 'div', role }, ref) => React.createElement(tagName, {
    className: (0, classnames_1.default)(columns_css_1.default.column, getWidthStyle(width)),
    children,
    role,
    ref,
}));
exports.Column.displayName = 'Column';
const spacingPropertyMap = {
    default: columns_css_1.customProperties.spacing,
    smallUp: columns_css_1.customProperties.smallUpSpacing,
    mediumUp: columns_css_1.customProperties.mediumUpSpacing,
    largeUp: columns_css_1.customProperties.largeUpSpacing,
};
const alignPropertyMap = {
    default: columns_css_1.customProperties.align,
    smallUp: columns_css_1.customProperties.smallUpAlign,
    mediumUp: columns_css_1.customProperties.mediumUpAlign,
    largeUp: columns_css_1.customProperties.largeUpAlign,
};
const alignYPropertyMap = {
    default: columns_css_1.customProperties.alignY,
    smallUp: columns_css_1.customProperties.smallUpAlignY,
    mediumUp: columns_css_1.customProperties.mediumUpAlignY,
    largeUp: columns_css_1.customProperties.largeUpAlignY,
};
const getAlignValue = (align) => {
    switch (align) {
        case 'start':
            return 'flex-start';
        case 'center':
            return 'center';
        case 'end':
            return 'flex-end';
        case 'spaceBetween':
            return 'space-between';
        default:
            throw new preconditions_1.UnreachableError(align);
    }
};
const getAlignYValue = (alignY) => alignY === 'start' || alignY === 'end' ? `flex-${alignY}` : alignY;
exports.Columns = React.forwardRef(({ children, spacing, align, alignY, tagName = 'div', reversed, collapseBelow, collapsed, ...rest }, ref) => {
    return React.createElement(tagName, {
        className: (0, classnames_1.default)(columns_css_1.default.columns, reversed && (collapsed || collapseBelow) && columns_css_1.default.rowReverse, collapseBelow && collapseBelowClassNames[collapseBelow], collapsed && columns_css_1.default.collapsed),
        style: {
            ...(spacing && (0, responsive_1.generateStyle)(spacingPropertyMap, spacing, metrics_1.getSpaceValue)),
            ...(align && (0, responsive_1.generateStyle)(alignPropertyMap, align, getAlignValue)),
            ...(alignY && (0, responsive_1.generateStyle)(alignYPropertyMap, alignY, getAlignYValue)),
        },
        children: reversed && !collapsed && !collapseBelow
            ? React.Children.toArray(children).reverse()
            : children,
        ref,
        ...(0, types_1.commonPropsToDOMProps)(rest),
    });
});
exports.Columns.displayName = 'Columns';
const collapseBelowClassNames = {
    small: columns_css_1.default.collapseBelowSmall,
    medium: columns_css_1.default.collapseBelowMedium,
    large: columns_css_1.default.collapseBelowLarge,
};
const widthStyles = {
    content: columns_css_1.default.widthContent,
    containedContent: columns_css_1.default.withContainedContent,
    ['1/2']: columns_css_1.default.width1Over2,
    ['1/3']: columns_css_1.default.width1Over3,
    ['2/3']: columns_css_1.default.width2Over3,
    ['1/4']: columns_css_1.default.width1Over4,
    ['3/4']: columns_css_1.default.width3Over4,
    ['1/5']: columns_css_1.default.width1Over5,
    ['2/5']: columns_css_1.default.width2Over5,
    ['3/5']: columns_css_1.default.width3Over5,
    ['4/5']: columns_css_1.default.width4Over5,
};
function getWidthStyle(width) {
    if (width) {
        return widthStyles[width];
    }
    return columns_css_1.default.widthFluid;
}
