"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Easings = void 0;
var Easings;
(function (Easings) {
    Easings.quadraticIn = (startPosition, endPosition, progress, duration) => {
        const step = progress / duration;
        const change = endPosition - startPosition;
        return startPosition + change * (step * step);
    };
    Easings.quadraticOut = (startPosition, endPosition, progress, duration) => {
        const step = progress / duration;
        return startPosition + (endPosition - startPosition) * step * (2 - step);
    };
    Easings.quadraticInOut = (startPosition, endPosition, progress, duration) => {
        const step = progress / duration;
        return (startPosition + (endPosition - startPosition) * (step < 0.5 ? 2 * step * step : (4 - 2 * step) * step - 1));
    };
    Easings.linear = (startPosition, endPosition, progress, duration) => {
        return startPosition + (endPosition - startPosition) * (progress / duration);
    };
    Easings.cubicIn = (startPosition, endPosition, progress, duration) => {
        const step = progress / duration;
        const change = endPosition - startPosition;
        return startPosition + change * Math.pow(step, 3);
    };
    Easings.cubicOut = (startPosition, endPosition, progress, duration) => {
        const step = progress / duration - 1;
        return startPosition + (endPosition - startPosition) * (Math.pow(step, 3) + 1);
    };
    Easings.cubicInOut = (startPosition, endPosition, progress, duration) => {
        const step = progress / duration;
        return (startPosition
            + (endPosition - startPosition)
                * (step < 0.5 ? 4 * Math.pow(step, 3) : 1 - Math.pow(-2 * step + 2, 3) / 2));
    };
    Easings.quarticIn = (startPosition, endPosition, progress, duration) => {
        const step = progress / duration;
        return startPosition + (endPosition - startPosition) * Math.pow(step, 4);
    };
    Easings.quarticOut = (startPosition, endPosition, progress, duration) => {
        const step = progress / duration - 1;
        return startPosition - (endPosition - startPosition) * (Math.pow(step, 4) - 1);
    };
    Easings.exponentialOut = (startPosition, endPosition, progress, duration) => {
        const step = progress / duration;
        return startPosition + (endPosition - startPosition) * (-Math.pow(2, -10 * step) + 1);
    };
    Easings.sineIn = (startPosition, endPosition, progress, duration) => {
        const step = progress / duration;
        const change = endPosition - startPosition;
        return startPosition + change - change * Math.cos(step * (Math.PI / 2));
    };
})(Easings || (exports.Easings = Easings = {}));
