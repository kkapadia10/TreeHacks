"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Alert = exports.AlertIcon = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const preconditions_1 = require('../../../base/preconditions');
const classnames_1 = require("classnames");
const React = require("react");
const box_1 = require('../box/box');
const button_1 = require('../button/button');
const icon_1 = require('../icons/close/icon');
const icon_2 = require('../icons/info/icon');
const icon_3 = require('../icons/tick/icon');
const icon_4 = require('../icons/warning_off/icon');
const layout_1 = require('../layout/layout');
const typography_1 = require('../typography/typography');
const alert_css_1 = require("./alert.css");
const alert_messages_1 = require("./alert.messages");
const AlertIcon = ({ tone, size = 'medium' }) => {
    switch (tone) {
        case 'critical':
        case 'warn':
            return (0, jsx_runtime_1.jsx)(icon_4.WarningOffIcon, { size: size });
        case 'positive':
            return (0, jsx_runtime_1.jsx)(icon_3.TickIcon, { size: size });
        case 'info':
            return (0, jsx_runtime_1.jsx)(icon_2.InfoIcon, { size: size });
        case 'neutral':
            return null;
        default:
            throw new preconditions_1.UnreachableError(tone);
    }
};
exports.AlertIcon = AlertIcon;
const Alert = (props) => {
    const { children, className, title, tone, dismissible, onDismiss, size = 'medium', rounded = true, showIcon = size !== 'small', } = props;
    let iconElement;
    if (showIcon) {
        if (props.Icon) {
            iconElement =
                props.size === 'small' ? (0, jsx_runtime_1.jsx)(props.Icon, { size: "small" }) : (0, jsx_runtime_1.jsx)(props.Icon, { size: "medium" });
        }
        else {
            iconElement = (0, jsx_runtime_1.jsx)(exports.AlertIcon, { tone: tone, size: size });
        }
    }
    return ((0, jsx_runtime_1.jsx)(box_1.Box, { background: `${tone}Low`, borderRadius: rounded ? 'standard' : 'none', padding: size === 'medium' ? '2u' : '1.5u', width: "full", className: (0, classnames_1.default)(className, alert_css_1.default.alert, {
            [alert_css_1.default.small]: size === 'small',
        }), role: tone === 'critical' ? 'alert' : undefined, ariaLive: tone !== 'critical' ? 'polite' : undefined, children: (0, jsx_runtime_1.jsx)(typography_1.Text, { tagName: "div", size: size, tone: typography_1.InheritColor, children: (0, jsx_runtime_1.jsxs)(layout_1.Columns, { spacing: "1u", alignY: "baseline", children: [iconElement && (0, jsx_runtime_1.jsx)(layout_1.Column, { width: "content", children: iconElement }), (0, jsx_runtime_1.jsxs)(layout_1.Column, { children: [title && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)("strong", { children: title }), ' '] })), children] }), dismissible && ((0, jsx_runtime_1.jsx)(layout_1.Column, { width: "content", children: (0, jsx_runtime_1.jsx)(button_1.Button, { variant: "tertiary", className: alert_css_1.default.close, onClick: onDismiss, icon: icon_1.CloseIcon, ariaLabel: alert_messages_1.AlertMessages.dismiss(), size: "small", iconSize: size }) }))] }) }) }));
};
exports.Alert = Alert;
