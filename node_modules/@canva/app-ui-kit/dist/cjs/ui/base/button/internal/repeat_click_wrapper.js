"use strict";

const makeObservable = require('../../../../base/make_observable/make_observable').makeObservable;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RepeatClickWrapper = exports.FAST_REPEAT_INTERVAL = exports.SLOW_REPEAT_INTERVAL = exports.FAST_REPEAT_DELAY = exports.SLOW_REPEAT_DELAY = void 0;
const tslib_1 = require("tslib");
const mobx_1 = require("mobx");
const mobx_react_1 = require("mobx-react");
const React = require("react");
const device_capabilities_1 = require('../../device_capabilities/device_capabilities');
exports.SLOW_REPEAT_DELAY = 450;
exports.FAST_REPEAT_DELAY = 350;
exports.SLOW_REPEAT_INTERVAL = 100;
exports.FAST_REPEAT_INTERVAL = 40;
let RepeatClickWrapper = class RepeatClickWrapper extends React.Component {
  static _makeObservable(instance) {
    makeObservable(instance, {
      repeatDelayTimeoutId: mobx_1.observable.ref,
      repeatIntervalId: mobx_1.observable.ref,
      clearTimers: mobx_1.action.bound,
      onPointerDown: mobx_1.action.bound
    });
  }
  constructor() {
    super(...arguments);
    RepeatClickWrapper._makeObservable(this);
    this.isPointerDown = false;
    this.onPointerUp = e => {
      if (this.isPointerDown) {
        this.isPointerDown = false;
        if (!this.repeatIntervalId) {
          this.maybeClick(e);
        }
        this.clearTimers();
      }
      e.preventDefault();
    };
    this.onPointerLeave = e => {
      this.isPointerDown = false;
      this.clearTimers();
      e.preventDefault();
    };
    this.preventContextMenu = e => {
      e.preventDefault();
      return false;
    };
  }
  componentWillUnmount() {
    this.clearTimers();
  }
  clearTimers() {
    if (this.repeatDelayTimeoutId) {
      window.clearTimeout(this.repeatDelayTimeoutId);
      this.repeatDelayTimeoutId = undefined;
    }
    if (this.repeatIntervalId) {
      window.clearInterval(this.repeatIntervalId);
      this.repeatIntervalId = undefined;
    }
  }
  onPointerDown(e) {
    this.isPointerDown = true;
    const {
      repeatSpeed
    } = this.props;
    const repeatInterval = repeatSpeed === 'fast' ? exports.FAST_REPEAT_INTERVAL : exports.SLOW_REPEAT_INTERVAL;
    const repeatDelay = repeatSpeed === 'fast' ? exports.FAST_REPEAT_DELAY : exports.SLOW_REPEAT_DELAY;
    this.clearTimers();
    this.repeatDelayTimeoutId = window.setTimeout(() => {
      (0, mobx_1.runInAction)(() => {
        this.maybeClick(e);
        this.repeatIntervalId = window.setInterval(() => {
          this.maybeClick(e);
        }, repeatInterval);
      });
    }, repeatDelay);
  }
  maybeClick(e) {
    var _a, _b;
    if (!this.props.disabled) {
      (_b = (_a = this.props).onClick) === null || _b === void 0 ? void 0 : _b.call(_a, e);
    }
  }
  render() {
    if (this.props.repeatSpeed !== 'none' && (0, device_capabilities_1.isPointerEventsSupported)()) {
      return this.props.children({
        onPointerDown: this.onPointerDown,
        onPointerUp: this.onPointerUp,
        onPointerLeave: this.onPointerLeave,
        onContextMenu: this.preventContextMenu,
        onClick: undefined
      });
    }
    return this.props.children({
      onClick: this.props.onClick
    });
  }
};
exports.RepeatClickWrapper = RepeatClickWrapper;
RepeatClickWrapper.defaultProps = {
  repeatSpeed: 'none'
};
exports.RepeatClickWrapper = RepeatClickWrapper = tslib_1.__decorate([mobx_react_1.observer], RepeatClickWrapper);