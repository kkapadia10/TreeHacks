import * as React from 'react';
import type { ButtonAriaProps, ButtonRoles } from '../../a11y/button_aria_attributes/button_aria_attributes';
import type { TouchOrMouseEvent } from '../button';
import type { Focusable } from '../../focusable/focusable';
import type { Icon, IconSize } from '../../icons/icons';
import type { KeyCombination } from '../../key_combinations/key_combination';
import type { BoundariesElement } from '../../pin/pin';
import type { Placement } from '../../tooltip/tooltip';
import { SubmitStore } from './submit_store';
export type IconPosition = 'start' | 'end' | 'top';
export type Size = 'default' | 'tiny' | 'xsmall' | 'small' | 'medium' | 'large';
export type Shape = 'block' | 'circle';
export type Alignment = 'start' | 'center' | 'end';
type IconProps = {
    icon?: Icon<any>
    iconSize?: IconSize;
    iconPosition?: IconPosition;
};
type Tone = 'primary' | 'secondary' | 'tertiary' | 'critical' | 'contrast';
export type Variant = Tone | 'linkButton' | 'subtleLinkButton';
type AllVariant = Variant | 'basic' | 'primaryNeutral' | 'secondaryNeutral' | 'tertiaryNeutral';
export type CommonProps = ButtonAriaProps & React.PropsWithChildren<{
    stretch?: boolean;
    draggable?: boolean;
    children?: any;
    className?: string;
    role?: Exclude<ButtonRoles, 'button'>
    tabIndex?: -1
    active?: boolean
    loading?: boolean
    loadingMessage?: string
    onFocus?: React.FocusEventHandler;
    onBlur?: React.FocusEventHandler;
    onDragStart?: React.DragEventHandler
    onDragEnd?: React.DragEventHandler
    size?: Size
    expandClickableArea?: boolean
    focusRef?: React.Ref<Focusable>;
    id?: string;
    _submitStore?: SubmitStore
    disabled?: boolean
    onMouseEnter?: (event: TouchOrMouseEvent<any>) => void
    onMouseLeave?: (event: TouchOrMouseEvent<any>) => void
    onContextMenu?: (event: TouchOrMouseEvent<any>) => void;
    tooltipOverflowBoundariesElement?: BoundariesElement;
    tooltipLabel?: string
    tooltipDisabled?: boolean;
    tooltipShortcut?: KeyCombination;
    tooltipPlacement?: Placement;
    alignment?: Alignment;
    tooltipCloseOnClick?: boolean;
} & IconProps>;
type ButtonOnlyProps = {
    type?: 'submit' | 'button' | 'reset';
    onClick?: (event: TouchOrMouseEvent<any>) => void
    onMouseDown?: (event: TouchOrMouseEvent<any>) => void;
    onMouseUp?: (event: TouchOrMouseEvent<any>) => void;
    form?: string;
    repeatSpeed?: 'slow' | 'fast' | 'none'
    ariaPressed?: boolean
};
type AnchorOnlyProps = {
    rel?: string;
    download?: string | boolean
    href: string;
    target?: string
    onClick?: (event: TouchOrMouseEvent<HTMLAnchorElement>) => void;
};
export type BasicVariantOnlyProps = {
    noChildWrapper?: boolean
    buttonRef?: React.Ref<HTMLElement>
    LoadingIcon?: Icon<any>
};
export type ButtonProps = CommonProps & ButtonOnlyProps;
export type AnchorProps = CommonProps & AnchorOnlyProps;
type AllButtonProps = ButtonProps & BasicVariantOnlyProps & {
    variant: AllVariant;
    shape?: Shape;
    LoadingIcon?: Icon<any>;
};
export declare const InternalButton: (props: AllButtonProps & {
    tooltipLabel?: never;
}) => import("react/jsx-runtime").JSX.Element;
type AllAnchorProps = AnchorProps & BasicVariantOnlyProps & {
    variant: AllVariant;
    shape?: Shape;
};
export declare const Anchor: (props: AllAnchorProps & {
    tooltipLabel?: never;
}) => import("react/jsx-runtime").JSX.Element;
export declare const ButtonWithTooltip: (props: AllButtonProps & {
    tooltipLabel: string;
}) => import("react/jsx-runtime").JSX.Element;
export declare const AnchorWithTooltip: (props: AllAnchorProps & {
    tooltipLabel: string;
}) => import("react/jsx-runtime").JSX.Element;
type CommonCircleButtonProps = ButtonProps & {
    alignment?: never;
} & {
    elevated?: boolean;
    containerClassName?: string;
};
export type CircleButtonPropsWithChildren = CommonCircleButtonProps & Required<Pick<CommonProps, 'children'>> & {
    ariaLabelledBy?: never;
    ariaLabel?: never;
};
export type CircleButtonPropsWithoutChildren = CommonCircleButtonProps & (Required<Pick<CommonProps, 'ariaLabelledBy'>> | Required<Pick<CommonProps, 'ariaLabel'>> | {
    tooltipLabel: string;
}) & {
    children?: never;
};
export declare const CircleButtonWithoutLabel: (props: CircleButtonPropsWithoutChildren & {
    variant: Variant;
}) => import("react/jsx-runtime").JSX.Element;
export declare function CircleButtonWithLabel({ variant, children, ...props }: CircleButtonPropsWithChildren & {
    variant: Variant;
}): import("react/jsx-runtime").JSX.Element;
export declare const renderButton: (props: AllButtonProps) => import("react/jsx-runtime").JSX.Element;
export declare const renderAnchor: (props: AllAnchorProps) => import("react/jsx-runtime").JSX.Element;
export declare const renderButtonOrAnchor: (props: AllButtonProps | (AllAnchorProps & {
    type: 'link';
})) => import("react/jsx-runtime").JSX.Element;
export {};
