"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Label = exports.LabelMediumText = exports.LabelText = exports.CheckboxLabelText = exports.RadioLabelText = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const classnames_1 = require("classnames");
const React = require("react");
const typography_1 = require('../../typography/typography');
const label_text_css_1 = require("./label_text.css");
const label_text_messages_1 = require("./label_text.messages");
const BaseLabelText = ({ id, className, disabled = false, fontVariant, children, }) => {
    if (!children && children !== 0) {
        return null;
    }
    const classes = (0, classnames_1.default)(className, label_text_css_1.default.label, (0, label_text_css_1.getStyle)(fontVariant), {
        [label_text_css_1.default.disabled]: disabled,
    });
    return typeof children === 'string'
        ? ((0, jsx_runtime_1.jsx)("p", { id: id, className: classes, children: children }))
        : ((0, jsx_runtime_1.jsx)("div", { id: id, className: classes, children: children }));
};
const MediumLabelText = (props) => ((0, jsx_runtime_1.jsx)(BaseLabelText, { fontVariant: "medium", ...props }));
exports.RadioLabelText = MediumLabelText;
exports.CheckboxLabelText = MediumLabelText;
const LabelText = (props) => ((0, jsx_runtime_1.jsx)(BaseLabelText, { fontVariant: "small", ...props }));
exports.LabelText = LabelText;
const LabelMediumText = (props) => ((0, jsx_runtime_1.jsx)(BaseLabelText, { fontVariant: "medium", ...props }));
exports.LabelMediumText = LabelMediumText;
const Label = ({ children, disabled, htmlFor, id, variant = 'bold', size = 'medium', stopClickPropagation, marker, }) => {
    const tagName = React.useMemo(() => (typeof children === 'string' ? 'span' : 'div'), [children]);
    if (children == null) {
        return null;
    }
    const stopPropagation = (event) => event.stopPropagation();
    return ((0, jsx_runtime_1.jsxs)(
     "label",
     { id: id, htmlFor: htmlFor, onClick: stopClickPropagation ? stopPropagation : undefined, children: [(0, jsx_runtime_1.jsx)(typography_1.Text, { tagName: tagName, size: size, weight: variant, className: (0, classnames_1.default)(label_text_css_1.default.labelText, {
                     [label_text_css_1.default.disabled]: disabled,
                 }), tone: disabled ? 'tertiary' : 'primary', children: children }), marker === 'optional' && ((0, jsx_runtime_1.jsx)(typography_1.Text, { tagName: "span", size: size, weight: variant, tone: "tertiary", children: ` ${label_text_messages_1.LabelMessages.optionalText()}` }))] }
    ));
};
exports.Label = Label;
