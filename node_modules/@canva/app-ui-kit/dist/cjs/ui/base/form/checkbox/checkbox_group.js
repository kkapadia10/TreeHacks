"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckboxGroup = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const React = require("react");
const controllable_value_1 = require('../../controllable_value/controllable_value');
const checkbox_1 = require("./checkbox");
const checkbox_group_css_1 = require("./checkbox_group.css");
function CheckboxGroup(props) {
    const { value: valueProp, defaultValue: defaultValueProp, options, onChange: onChangeProp, disabled, id, ariaLabel, ariaLabelledBy, ariaDescribedBy, focusRef, onFocus, onBlur, } = props;
    const groupRef = React.useRef(null);
    const [value, setValue] = (0, controllable_value_1.useControllableValue)({
        value: valueProp,
        defaultValue: defaultValueProp || [],
    });
    const onChange = React.useCallback((newValue, checked) => {
        const newValues = checked ? value.concat(newValue) : value.filter(v => v !== newValue);
        setValue(newValues);
        onChangeProp === null || onChangeProp === void 0 ? void 0 : onChangeProp(newValues);
    }, [onChangeProp, setValue, value]);
    const onItemFocus = React.useCallback((e) => {
        var _a;
        const previouslyFocussedElement = e.relatedTarget;
        if (previouslyFocussedElement && ((_a = groupRef === null || groupRef === void 0 ? void 0 : groupRef.current) === null || _a === void 0 ? void 0 : _a.contains(previouslyFocussedElement))) {
            return;
        }
        onFocus === null || onFocus === void 0 ? void 0 : onFocus(e);
    }, [onFocus]);
    const onItemBlur = React.useCallback((e) => {
        var _a;
        const nextElementToBeFocussed = e.relatedTarget;
        if (nextElementToBeFocussed && ((_a = groupRef === null || groupRef === void 0 ? void 0 : groupRef.current) === null || _a === void 0 ? void 0 : _a.contains(nextElementToBeFocussed))) {
            return;
        }
        onBlur === null || onBlur === void 0 ? void 0 : onBlur(e);
    }, [onBlur]);
    return ((0, jsx_runtime_1.jsx)("div", { role: "group", id: id, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, "aria-describedby": ariaDescribedBy, className: checkbox_group_css_1.default.checkboxGroup, ref: groupRef, children: options.map((option, index) => {
            var _a;
            const checked = value.indexOf(option.value) >= 0;
            return ((0, react_1.createElement)(checkbox_1.Checkbox, { ...option, disabled: (_a = option.disabled) !== null && _a !== void 0 ? _a : disabled, checked: checked, key: index, size: "small", onChange: onChange, focusRef: index === 0 ? focusRef : undefined, onFocus: onFocus && onItemFocus, onBlur: onBlur && onItemBlur }));
        }) }));
}
exports.CheckboxGroup = CheckboxGroup;
