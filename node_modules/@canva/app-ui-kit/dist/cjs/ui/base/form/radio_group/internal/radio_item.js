"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RadioItem = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const compose_react_refs_1 = require("@seznam/compose-react-refs");
const classnames_1 = require("classnames");
const mobx_react_1 = require("mobx-react");
const React = require("react");
const access_mode_state_1 = require('../../../a11y/access_mode_state/access_mode_state');
const use_key_combination_handler_1 = require('../../../key_combinations/use_key_combination_handler');
const typography_1 = require('../../../typography/typography');
const radio_item_css_1 = require("./radio_item.css");
const setToKeyboardMode = () => {
    access_mode_state_1.accessModeState.setAccessMode('keyboard');
};
const inputKeyMap = [
    ['ArrowUp', setToKeyboardMode],
    ['ArrowDown', setToKeyboardMode],
    ['ArrowLeft', setToKeyboardMode],
    ['ArrowRight', setToKeyboardMode],
];
function RadioItem(
    { label, description, className, disabled, checked, ariaLabel, focusRef, name, value, onChange: _onChange, onFocus, onBlur, }
) {
    const formatValue = () => {
        if (value === undefined) {
            return undefined;
        }
        if (typeof value === 'string' || typeof value === 'number') {
            return value;
        }
        return JSON.stringify(value);
    };
    const onChange = (event) => {
        if (_onChange != null && !checked) {
            _onChange(value, event);
        }
    };
    const inputId = React.useId();
    const descriptionId = React.useId();
    return ((0, jsx_runtime_1.jsx)(
        use_key_combination_handler_1.WithKeyCombinationHandler,
        { map: inputKeyMap, handleInputs: true, children: ({ ref }) => ((0, jsx_runtime_1.jsx)(mobx_react_1.Observer, { children: () => ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)("input", { id: inputId, "aria-describedby": description ? descriptionId : undefined, type: "radio", className: radio_item_css_1.default.radio, onChange: onChange, "aria-label": ariaLabel, ref: (0, compose_react_refs_1.default)(focusRef, ref), value: formatValue(), disabled: disabled, checked: checked, name: name, onFocus: onFocus, onBlur: onBlur }), (0, jsx_runtime_1.jsxs)("label", { htmlFor: inputId, 
                            onClick: event => event.stopPropagation(), className: (0, classnames_1.default)(radio_item_css_1.default.label, className, {
                                [radio_item_css_1.default.hideOutline]: access_mode_state_1.accessModeState.isMouseMode,
                                [radio_item_css_1.default.disabled]: disabled,
                            }), children: [(0, jsx_runtime_1.jsx)("span", { "aria-hidden": true, className: (0, classnames_1.default)(radio_item_css_1.default.uiRadio, { [radio_item_css_1.default.hasLabelText]: !!label }) }), (0, jsx_runtime_1.jsx)(RadioItemLabel, { label: label, description: description, descriptionId: descriptionId, disabled: disabled })] })] })) })) }
    ));
}
exports.RadioItem = RadioItem;
function RadioItemLabel({ label, description, disabled, descriptionId, }) {
    const labelElement = typeof label === 'string'
        ? ((0, jsx_runtime_1.jsx)(typography_1.Text, { tagName: "span", margins: "none", tone: disabled ? 'tertiary' : 'primary', children: label }))
        : (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: label });
    if (!description) {
        return labelElement;
    }
    return ((0, jsx_runtime_1.jsxs)("div", { children: [labelElement, (0, jsx_runtime_1.jsx)("div", { "aria-hidden": true, children: (0, jsx_runtime_1.jsx)(typography_1.Text, { id: descriptionId, tone: "tertiary", size: "small", children: description }) })] }));
}
