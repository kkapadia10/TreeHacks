import * as React from 'react';
import { Validation } from '../../validation/validation';
export type ValidationError = string | string[];
export type ValidationFn<T> = Validation.Fn<T | undefined, ValidationError>;
export type BooleanValidationFn<T> = Validation.Fn<T | undefined, true>;
export type ValidationMessageTuple<T> = [BooleanValidationFn<T>, string];
export type Validator<T> = ValidationFn<T> | ValidationMessageTuple<T> | (ValidationFn<T> | ValidationMessageTuple<T>)[];
export type ValidationResult = Validation.State<ValidationError>;
export type BooleanValidationResult = Validation.State<true>;
export declare const valid: typeof Validation.valid;
export declare const invalid: typeof Validation.invalid;
export declare class FieldValidationStore<T> {
    value: T | undefined;
    validationStarted: boolean;
    private validationFn;
    constructor({ value, validator }: {
        value?: T;
        validator?: Validator<T>;
    });
    get validator(): ValidationFn<T> | undefined;
    set validator(validator: Validator<T> | undefined);
}
export declare const setValue: <T>(store: FieldValidationStore<T>, value: T | undefined) => void;
export declare const startValidation: <T>(store: FieldValidationStore<T>) => void;
export declare const getResult: <T>(store: FieldValidationStore<T>) => Validation.State<ValidationError>;
export declare const getError: <T>(store: FieldValidationStore<T>) => ValidationError | undefined;
export declare const validateAll: (...stores: (FieldValidationStore<any> | undefined)[]) => boolean;
export declare const isValid: (...stores: (FieldValidationStore<any> | undefined)[]) => boolean;
type UseFieldValidationProps<T> = {
    store?: FieldValidationStore<T>;
    name: string | undefined;
    value?: T;
    validator?: Validator<T>;
};
export declare function useFieldValidation<T>({ store: storeProp, name, value, validator, }: UseFieldValidationProps<T>): FieldValidationStore<T> | undefined;
type WithFieldValidationProps<T> = {
    children: (props: {
        store?: FieldValidationStore<T>;
    }) => React.ReactNode;
} & UseFieldValidationProps<T>;
export declare const WithFieldValidation: <T>({ children, ...rest }: WithFieldValidationProps<T>) => import("react/jsx-runtime").JSX.Element;
export declare function getValidationFn<T>(validator: Validator<T>): ValidationFn<T>;
export declare const mapErrorMessage: <T>(boolValidator: BooleanValidationFn<T>, errorMessage: string) => ValidationFn<T>;
export declare const anyError: <T>(validators: (ValidationFn<T> | ValidationMessageTuple<T>)[]) => ValidationFn<T>;
export declare const allErrors: <T>(validators: (ValidationFn<T> | ValidationMessageTuple<T>)[]) => (value: T | undefined) => Validation.State<string[]>;
export declare const ignoreNullValue: <T, E>(validationFn: Validation.Fn<T, E>) => (value: T | undefined) => {
    state: "valid";
} | {
    state: "invalid";
    error: true;
} | {
    state: "invalid";
    error: E;
};
export declare const ignoreNullValueInFactory: <T, E, A>(fnFactory: (args: A) => Validation.Fn<T, E>) => (args: A) => (value: T | undefined) => {
    state: "valid";
} | {
    state: "invalid";
    error: true;
} | {
    state: "invalid";
    error: E;
};
export {};
