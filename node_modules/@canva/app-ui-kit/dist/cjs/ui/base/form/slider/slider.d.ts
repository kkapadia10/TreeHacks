import * as React from 'react';
import type { NumberInputProps } from '../input/number_input';
import type { TypographySize } from '../../typography/typography';
import type { SharedSliderProps } from './base_slider';
export type SliderProps = SharedSliderProps & {
    value?: number
    defaultValue?: number;
    onChange?: (value: number) => void
    NumericInput?: React.ComponentType<SliderNumericInputProps> | 'none';
    autoFocusNumericInput?: 'on-desktop' | 'always'
    colorVariant?: 'mono' | 'alternate'
    blurOnDragEnd?: boolean
    onDragEnd?(): void
    label?: string
    labelSize?: Extract<TypographySize, 'small' | 'medium'>
};
export declare const Slider: ({ id, min, max, snap, step, origin, value: valueProp, defaultValue, onDragStart, onDragEnd: onDragEndProp, trackFill, label, labelSize, ariaLabelledBy, disabled, autoFocusNumericInput, NumericInput, colorVariant, blurOnDragEnd, ariaLabel, ariaDescribedBy, ariaValueText, onChange: onChangeProp, onChangeComplete, }: SliderProps) => import("react/jsx-runtime").JSX.Element;
export type SliderNumericInputProps = Pick<NumberInputProps, 'className' | 'inputClassName' | 'min' | 'max' | 'step' | 'disabled' | 'autoFocus' | 'onChange' | 'ariaLabel' | 'ariaLabelledBy' | 'ariaDescribedBy' | 'placeholder' | 'onBlur' | 'onFocus' | 'onKeyDown'> & {
    value?: string;
    onChangeComplete: (value: number) => void
};
type SliderNumberInputProps = Omit<SliderNumericInputProps, 'value'> & {
    NumericInput: React.ComponentType<SliderNumericInputProps> | undefined;
    value: number | undefined;
};
type SliderNumberInputState = {
    previousValueProp?: number;
    inputStringValue?: string;
};
export declare class SliderNumberInput extends React.Component<SliderNumberInputProps, SliderNumberInputState> {
    constructor(props: SliderNumberInputProps);
    static getDerivedStateFromProps(props: SliderNumberInputProps, state: SliderNumberInputState): SliderNumberInputState;
    render(): import("react/jsx-runtime").JSX.Element;
    private inlineInputRef;
    private readonly onChange;
    private readonly onChangeComplete;
    private readonly onFocus;
    private readonly onBlur;
}
export {};
