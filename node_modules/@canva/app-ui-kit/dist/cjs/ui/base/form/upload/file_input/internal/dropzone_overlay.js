"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DropzoneOverlay = exports.DropzoneOverlayInternal = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const classnames_1 = require("classnames");
const React = require("react");
const icon_1 = require('../../../../icons/image/icon');
const icon_2 = require('../../../../icons/music/icon');
const icon_3 = require('../../../../icons/print_document/icon');
const icon_4 = require('../../../../icons/uploads/icon');
const icon_5 = require('../../../../icons/video/icon');
const layout_1 = require('../../../../layout/layout');
const typography_1 = require('../../../../typography/typography');
const dropzone_context_1 = require("./dropzone_context");
const dropzone_overlay_css_1 = require("./dropzone_overlay.css");
const dropzone_overlay_messages_1 = require("./dropzone_overlay.messages");
exports.DropzoneOverlayInternal = React.memo((props) => {
    const dropzoneContext = (0, dropzone_context_1.useDropzoneContext)();
    const { variant = 'surface', isOver, multiple, icon: Icon = icon_4.UploadsIcon, title, description, acceptCategories, disabled, } = {
        ...dropzoneContext,
        ...props,
    };
    const mainText = title !== null && title !== void 0 ? title : (multiple ? dropzone_overlay_messages_1.DropzoneOverlayMessages.mainText() : dropzone_overlay_messages_1.DropzoneOverlayMessages.mainTextSingleFile());
    return ((0, jsx_runtime_1.jsx)("div", { className: (0, classnames_1.default)(dropzone_overlay_css_1.default.dropzoneOverlay, {
            [dropzone_overlay_css_1.default.input]: variant === 'input',
            [dropzone_overlay_css_1.default.surface]: variant === 'surface',
            [dropzone_overlay_css_1.default.fileHovering]: isOver,
            [dropzone_overlay_css_1.default.disabled]: disabled,
        }), "aria-hidden": !isOver || disabled, children: (0, jsx_runtime_1.jsxs)(layout_1.Rows, { spacing: "0", align: "center", children: [(0, jsx_runtime_1.jsx)(Icon, { size: "large", tone: "primary" }), (0, jsx_runtime_1.jsx)(typography_1.Text, { tone: "primary", size: "large", weight: "bold", tagName: "span", alignment: "center", children: mainText }), description != null && ((0, jsx_runtime_1.jsx)(typography_1.Text, { tone: "secondary", size: "small", tagName: "span", alignment: "center", children: description })), acceptCategories != null && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(layout_1.Spacer, { direction: "vertical", size: "3u" }), (0, jsx_runtime_1.jsx)(FileCategoryList, { acceptCategories: acceptCategories })] }))] }) }));
});
const FileCategory = ({ category, icon: Icon, fileTypes, }) => {
    return ((0, jsx_runtime_1.jsxs)(layout_1.Rows, { spacing: "0", children: [(0, jsx_runtime_1.jsxs)(layout_1.Inline, { align: "center", alignY: "center", spacing: "0.5u", children: [Icon && (0, jsx_runtime_1.jsx)(Icon, { size: "small", tone: "secondary" }), (0, jsx_runtime_1.jsx)(typography_1.Text, { weight: "bold", tone: "secondary", children: category })] }), (0, jsx_runtime_1.jsx)(typography_1.Text, { size: "small", tone: "secondary", alignment: "center", children: fileTypes.map(s => s.toUpperCase()).join(dropzone_overlay_messages_1.DropzoneOverlayMessages.separator()) })] }));
};
const FileCategoryList = ({ acceptCategories }) => {
    return ((0, jsx_runtime_1.jsxs)(layout_1.Rows, { spacing: "2u", children: [acceptCategories['file'] != null && ((0, jsx_runtime_1.jsx)(FileCategory, { category: dropzone_overlay_messages_1.DropzoneOverlayMessages.files(), icon: icon_3.PrintDocumentIcon, fileTypes: acceptCategories['file'] })), acceptCategories['image'] != null && ((0, jsx_runtime_1.jsx)(FileCategory, { category: dropzone_overlay_messages_1.DropzoneOverlayMessages.images(), icon: icon_1.ImageIcon, fileTypes: acceptCategories['image'] })), acceptCategories['video'] != null && ((0, jsx_runtime_1.jsx)(FileCategory, { category: dropzone_overlay_messages_1.DropzoneOverlayMessages.videos(), icon: icon_5.VideoIcon, fileTypes: acceptCategories['video'] })), acceptCategories['audio'] != null && ((0, jsx_runtime_1.jsx)(FileCategory, { category: dropzone_overlay_messages_1.DropzoneOverlayMessages.audio(), icon: icon_2.MusicIcon, fileTypes: acceptCategories['audio'] }))] }));
};
const DropzoneOverlay = (props) => {
    return (0, jsx_runtime_1.jsx)(exports.DropzoneOverlayInternal, { ...props });
};
exports.DropzoneOverlay = DropzoneOverlay;
