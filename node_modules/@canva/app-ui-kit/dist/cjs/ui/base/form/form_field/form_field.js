"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormField = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const mobx_react_1 = require("mobx-react");
const React = require("react");
const description_1 = require('../description/description');
const label_text_1 = require('../label_text/label_text');
const field_validation_1 = require('../validation/field_validation');
const layout_1 = require('../../layout/layout');
exports.FormField = (0, mobx_react_1.observer)(function FormField({ label, labelSize, description, error, tone, children, control, mode = 'none', value, validator, store: storeProp, name, }) {
    const labelId = React.useId();
    const descriptionId = React.useId();
    const errorId = React.useId();
    const controlId = React.useId();
    const store = (0, field_validation_1.useFieldValidation)({
        store: storeProp,
        name,
        value,
        validator,
    });
    const fieldError = error !== null && error !== void 0 ? error : (store != null ? (0, field_validation_1.getError)(store) : undefined);
    const wrappedLabel = ((0, jsx_runtime_1.jsx)(label_text_1.Label, { size: labelSize, marker: mode === 'optional' ? 'optional' : 'none', id: labelId, htmlFor: controlId, children: label }));
    const wrappedDescription = description && !fieldError
        ? ((0, jsx_runtime_1.jsx)(description_1.Description, { id: descriptionId, tone: tone, children: description }))
        : null;
    const wrappedError = fieldError
        ? ((0, jsx_runtime_1.jsx)(description_1.Description, { id: errorId, tone: "critical", children: fieldError }))
        : null;
    const onBlur = React.useMemo(() => (store != null ? () => (0, field_validation_1.startValidation)(store) : undefined), [store]);
    const wrappedControl = control({
        id: controlId,
        ariaLabelledBy: labelId,
        ariaDescribedBy: (fieldError && errorId) || (description && descriptionId) || undefined,
        error: !!fieldError,
        value: storeProp != null ? storeProp.value : value,
        onBlur,
    });
    const layout = children !== null && children !== void 0 ? children : defaultFormFieldLayout;
    return layout({
        label: wrappedLabel,
        error: wrappedError,
        description: wrappedDescription,
        control: wrappedControl,
    });
});
function defaultFormFieldLayout({ label, description, error, control }) {
    return ((0, jsx_runtime_1.jsxs)(layout_1.Rows, { spacing: "1u", children: [label, control, description, error] }));
}
