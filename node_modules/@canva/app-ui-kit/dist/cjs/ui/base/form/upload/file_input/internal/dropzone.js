"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dropzone = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const React = require("react");
const react_dnd_1 = require("react-dnd");
const react_dnd_html5_backend_1 = require("react-dnd-html5-backend");
const dropzone_css_1 = require("./dropzone.css");
const dropzone_context_1 = require("./dropzone_context");
const dropzone_overlay_1 = require("./dropzone_overlay");
const file_validation_1 = require("./file_validation");
const Dropzone = ({ disabled, multiple, accept, onDropAcceptedFiles, onDropRejectedFiles, children, showOverlay = true, }) => {
    const onDrop = React.useCallback((files) => {
        if (disabled) {
            return;
        }
        const { acceptedFiles, rejectedFiles } = (0, file_validation_1.getValidatedFiles)(files, multiple, accept);
        acceptedFiles.length > 0 && (onDropAcceptedFiles === null || onDropAcceptedFiles === void 0 ? void 0 : onDropAcceptedFiles(acceptedFiles));
        rejectedFiles.length > 0 && (onDropRejectedFiles === null || onDropRejectedFiles === void 0 ? void 0 : onDropRejectedFiles(rejectedFiles));
    }, [accept, disabled, multiple, onDropAcceptedFiles, onDropRejectedFiles]);
    const [{ isOver }, dropRef] = (0, react_dnd_1.useDrop)({
        accept: [react_dnd_html5_backend_1.NativeTypes.FILE],
        collect: monitor => ({ isOver: monitor.isOver() }),
        drop(e) {
            const { files } = e;
            files && onDrop(files);
        },
    });
    const dropzoneContext = React.useMemo(() => ({ isOver, disabled, accept, onDropAcceptedFiles, onDropRejectedFiles }), [accept, disabled, isOver, onDropAcceptedFiles, onDropRejectedFiles]);
    return ((0, jsx_runtime_1.jsx)("div", { className: dropzone_css_1.default.dropzone, ref: dropRef, children: (0, jsx_runtime_1.jsxs)(dropzone_context_1.DropzoneContext.Provider, { value: dropzoneContext, children: [children, showOverlay && (0, jsx_runtime_1.jsx)(dropzone_overlay_1.DropzoneOverlay, {})] }) }));
};
exports.Dropzone = Dropzone;
