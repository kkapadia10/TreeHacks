"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.usePropOverrides = exports.BaseInputContextProvider = exports.useInputValue = exports.useInputControls = exports.useCreateInputControls = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const preconditions_1 = require('../../../../../base/preconditions');
const React = require("react");
const InputControlsContext = React.createContext(undefined);
const InputValueContext = React.createContext('undefined');
function useCreateInputControls(controls) {
    const innerControls = React.useRef(controls);
    innerControls.current.focus = controls.focus;
    innerControls.current.setValue = controls.setValue;
    innerControls.current.setType = controls.setType;
    innerControls.current.setDisabled = controls.setDisabled;
    return innerControls.current;
}
exports.useCreateInputControls = useCreateInputControls;
function useInputControls() {
    return preconditions_1.Preconditions.checkExists(React.useContext(InputControlsContext));
}
exports.useInputControls = useInputControls;
function useInputValue() {
    return preconditions_1.Preconditions.checkExists(React.useContext(InputValueContext));
}
exports.useInputValue = useInputValue;
function BaseInputContextProvider(props) {
    return ((0, jsx_runtime_1.jsx)(InputControlsContext.Provider, { value: props.controls, children: (0, jsx_runtime_1.jsx)(InputValueContext.Provider, { value: props.value, children: props.children }) }));
}
exports.BaseInputContextProvider = BaseInputContextProvider;
function usePropOverrides(props) {
    const [overrides, setPropOverrides] = React.useState(undefined);
    return {
        props: overrides != null ? { ...props, ...overrides } : props,
        setPropOverrides,
    };
}
exports.usePropOverrides = usePropOverrides;
