"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileInput = exports.FileInputItem = exports.DndContext = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const React = require("react");
const file_selector_1 = require('../file_selector/file_selector');
const dropzone_1 = require("./internal/dropzone");
const dropzone_context_1 = require("./internal/dropzone_context");
const dropzone_overlay_1 = require("./internal/dropzone_overlay");
const file_input_internal_1 = require("./internal/file_input_internal");
const file_validation_1 = require("./internal/file_validation");
var dndcontext_1 = require("./internal/dndcontext");
Object.defineProperty(exports, "DndContext", { enumerable: true, get: function () { return dndcontext_1.DndContext; } });
var file_input_item_1 = require("./internal/file_input_item");
Object.defineProperty(exports, "FileInputItem", { enumerable: true, get: function () { return file_input_item_1.FileInputItem; } });
const FileInput = (props) => {
    const dropzoneContext = (0, dropzone_context_1.useDropzoneContext)();
    const { disabled, accept, onDropAcceptedFiles, onDropRejectedFiles, multiple, mode = 'droparea', } = {
        ...dropzoneContext,
        ...props,
    };
    const selectFile = (files) => {
        const { acceptedFiles, rejectedFiles } = (0, file_validation_1.getValidatedFiles)(files, multiple, accept);
        acceptedFiles.length > 0 && (onDropAcceptedFiles === null || onDropAcceptedFiles === void 0 ? void 0 : onDropAcceptedFiles(acceptedFiles));
        rejectedFiles.length > 0 && (onDropRejectedFiles === null || onDropRejectedFiles === void 0 ? void 0 : onDropRejectedFiles(rejectedFiles));
    };
    const inputWithSelector = ((0, jsx_runtime_1.jsx)(file_selector_1.WithFileSelector, { onSelectFiles: selectFile, mimeTypes: accept, multiple: multiple, children: ({ onClick }) => ((0, jsx_runtime_1.jsx)(file_input_internal_1.FileInputInternal, { ...props, disabled: !!disabled, accept: accept, multiple: multiple, onClick: onClick })) }));
    return dropzoneContext != null || mode === 'button'
        ? inputWithSelector
        : ((0, jsx_runtime_1.jsx)(FileInputDropzone, { disabled: disabled, accept: accept, multiple: multiple, onDropAcceptedFiles: onDropAcceptedFiles, onDropRejectedFiles: onDropRejectedFiles, children: inputWithSelector }));
};
exports.FileInput = FileInput;
const FileInputDropzone = React.memo(({ children, ...restProps }) => {
    return ((0, jsx_runtime_1.jsxs)(dropzone_1.Dropzone, { ...restProps, showOverlay: false, children: [children, (0, jsx_runtime_1.jsx)(dropzone_overlay_1.DropzoneOverlayInternal, { variant: "input" })] }));
});
