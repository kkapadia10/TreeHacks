import * as React from 'react';
import type { GeneratedId } from '../../dom/id_generator/id_generator';
export { useInputControls, useInputValue } from './internal/input_internal';
export type BaseInputProps = {
    type: string
    id?: GeneratedId | string
    value?: string
    defaultValue?: string
    placeholder?: string
    name?: string
    pattern?: string
    inputMode?: React.HTMLAttributes<HTMLInputElement>['inputMode']
    autoCapitalize?: 'none' | 'sentences' | 'words' | 'characters'
    autoCorrect?: 'on' | 'off'
    role?: 'combobox' | 'searchbox' | 'spinbutton'
    ariaRoleDescription?: string
    ariaLabel?: string
    ariaLabelledBy?: string
    ariaDescribedBy?: string
    ariaControls?: string
    ariaAutoComplete?: 'inline' | 'list' | 'both' | 'none'
    ariaActiveDescendant?: string
    ariaExpanded?: boolean
    ariaHasPopup?: 'menu' | 'listbox' | 'tree' | 'grid' | 'dialog'
    ariaValueNow?: number
    ariaValueText?: string
    ariaValueMin?: number
    ariaValueMax?: number
    className?: string
    inputClassName?: string
    iconClassName?: string
    icon?: InputIcon
    error?: boolean
    borderless?: boolean
    textAlignCenter?: boolean
    autoComplete?: string
    autoFocus?: 'on-desktop' | 'always' | 'never'
    required?: boolean
    readOnly?: boolean
    disabled?: boolean
    disableSpellcheck?: boolean
    maxLength?: number
    min?: number | string
    max?: number | string
    step?: number | 'any'
    start?: InputDecoration
    end?: InputDecoration
    blurOnEnterKeyDown?: boolean
    onChange?: (value: string, e?: React.ChangeEvent<HTMLInputElement>) => void
    onChangeComplete?: (value: string) => void
    onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;
    onFocus?: (e: React.FocusEvent<HTMLInputElement>) => void;
    onPaste?: (e: React.ClipboardEvent<HTMLInputElement>) => void;
    onClick?: (e: React.MouseEvent<HTMLInputElement>) => void;
    onMouseDown?: (e: React.MouseEvent<HTMLInputElement>) => void
    onMouseUp?: (e: React.MouseEvent<HTMLInputElement>) => void
    onContextMenu?: (e: React.MouseEvent<HTMLInputElement>) => void;
    onKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void;
    onKeyUp?: (e: React.KeyboardEvent<HTMLInputElement>) => void;
};
export type InputIcon = {
    type: IconType;
    align: 'start' | 'end';
};
export type IconType = 'search' | 'credit-card' | 'credit-card-expiry' | 'credit-card-verification' | 'link' | 'location' | 'email' | 'person';
export type InputDecoration = (() => React.ReactNode) | React.ReactNode;
export declare function useFocusState(): {
    isFocused: boolean;
    isKeyboardMode: boolean;
    setFocused: (value: boolean) => boolean;
};
export declare function useOnWrapperMouseDown<T extends HTMLElement = HTMLInputElement>(): {
    ref: React.RefObject<T>;
    onMouseDown: (e: React.MouseEvent) => void;
};
export declare const BaseInput: React.ForwardRefExoticComponent<BaseInputProps & React.RefAttributes<HTMLInputElement>>;
