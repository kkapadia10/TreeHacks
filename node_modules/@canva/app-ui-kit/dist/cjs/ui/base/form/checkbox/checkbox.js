"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FakeCheckbox = exports.Checkbox = exports.InheritColor = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const preconditions_1 = require('../../../../base/preconditions');
const classnames_1 = require("classnames");
const mobxReact = require("mobx-react");
const React = require("react");
const access_mode_state_1 = require('../../a11y/access_mode_state/access_mode_state');
const pointer_input_state_1 = require('../../a11y/pointer_input_state/pointer_input_state');
const controllable_value_1 = require('../../controllable_value/controllable_value');
const icon_1 = require('../../icons/minus/icon');
const icon_2 = require('../../icons/tick/icon');
const typography_1 = require('../../typography/typography');
const checkbox_css_1 = require("./checkbox.css");
exports.InheritColor = Symbol('inherit');
exports.Checkbox = mobxReact.observer(function Checkbox(props) {
    const { label, description, checked: checkedProp, defaultChecked, disabled, autoComplete, value = '',
    labelClassName, className, size = 'small', id, ariaLabel, ariaLabelledBy, ariaDescribedBy, tone = 'primary', focusRef, onFocus, onBlur, onChange: onChangeProp, } = props;
    const [checked, setChecked] = (0, controllable_value_1.useControllableValue)({
        value: checkedProp === 'indeterminate' ? false : checkedProp,
        defaultValue: defaultChecked !== null && defaultChecked !== void 0 ? defaultChecked : false,
    });
    if (description != null) {
        preconditions_1.Preconditions.checkArgument(label != null, 'Provide label to display description in the checkbox');
    }
    const descriptionId = React.useId();
    const formattedValue = React.useMemo(() => {
        if (value === undefined) {
            return undefined;
        }
        if (typeof value === 'string' || typeof value === 'number') {
            return value;
        }
        return JSON.stringify(value);
    }, [value]);
    const onChange = React.useCallback((event) => {
        setChecked(event.target.checked);
        onChangeProp === null || onChangeProp === void 0 ? void 0 : onChangeProp(value, event.target.checked);
    }, [setChecked, onChangeProp, value]);
    const containerClassName = (0, classnames_1.default)(checkbox_css_1.default.container, {
        [checkbox_css_1.default.disabled]: !!disabled,
        [checkbox_css_1.default.hoverSupported]: pointer_input_state_1.pointerInputState.isMouseInput,
        [checkbox_css_1.default.labelContainer]: label != null,
    }, className);
    const labelContent = ((0, jsx_runtime_1.jsx)(typography_1.Text, { className: (0, classnames_1.default)(checkbox_css_1.default.checkboxLabel, labelClassName), tagName: typeof label === 'string' ? 'p' : 'div', tone: disabled ? 'tertiary' : 'primary', children: label }));
    return ((0, jsx_runtime_1.jsxs)("label", { className: containerClassName, children: [(0, jsx_runtime_1.jsxs)("div", { className: (0, classnames_1.default)(checkbox_css_1.default.checkboxWrapper, {
                    [checkbox_css_1.default.medium]: size === 'medium',
                    [checkbox_css_1.default.withLabel]: label != null,
                }), children: [(0, jsx_runtime_1.jsx)("input", { type: "checkbox", className: checkbox_css_1.default.checkbox, onChange: onChange, onFocus: onFocus, onBlur: onBlur, checked: checked, disabled: disabled, autoComplete: autoComplete, value: formattedValue, id: id, "aria-label": ariaLabel, "aria-describedby": ariaDescribedBy !== null && ariaDescribedBy !== void 0 ? ariaDescribedBy : (description ? descriptionId : undefined), "aria-labelledby": ariaLabelledBy, "aria-checked": checkedProp === 'indeterminate' ? 'mixed' : undefined, ref: focusRef }), (0, jsx_runtime_1.jsx)(exports.FakeCheckbox, { checked: checkedProp === 'indeterminate' ? checkedProp : checked, disabled: disabled, size: size, tone: tone, className: access_mode_state_1.accessModeState.isMouseMode ? checkbox_css_1.default.hideOutline : undefined })] }), label != null
                && (description != null
                    ? ((0, jsx_runtime_1.jsxs)("div", { className: checkbox_css_1.default.checkboxText, children: [labelContent, (0, jsx_runtime_1.jsx)("div", { "aria-hidden": true, children: (0, jsx_runtime_1.jsx)(typography_1.Text, { className: checkbox_css_1.default.checkboxDescription, id: descriptionId, tone: "tertiary", size: "small", children: description }) })] }))
                    : labelContent)] }));
});
const FakeCheckbox = ({ checked, disabled, size = 'small', tone = 'primary', className, }) => {
    return ((0, jsx_runtime_1.jsx)("span", { "aria-hidden": true, className: (0, classnames_1.default)(checkbox_css_1.default.uiCheckbox, size === 'medium' && checkbox_css_1.default.medium, tone === exports.InheritColor ? checkbox_css_1.default.inherit : (0, checkbox_css_1.getStyle)(tone), checked === true && checkbox_css_1.default.checked, checked === 'indeterminate' && checkbox_css_1.default.indeterminate, disabled && checkbox_css_1.default.disabled, className), children: checked === 'indeterminate'
            ? (0, jsx_runtime_1.jsx)(icon_1.MinusIcon, { size: size, className: checkbox_css_1.default.minus })
            : (0, jsx_runtime_1.jsx)(icon_2.TickIcon, { size: size, className: checkbox_css_1.default.tick }) }));
};
exports.FakeCheckbox = FakeCheckbox;
