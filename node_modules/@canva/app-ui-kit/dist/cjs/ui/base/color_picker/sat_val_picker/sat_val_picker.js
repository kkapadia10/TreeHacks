"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mouseToKnobCoords = exports.SatValPicker = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const React = require("react");
const react_1 = require("react");
const hsv_color_1 = require('../hsv_color/hsv_color');
const sat_val_picker_css_1 = require("./sat_val_picker.css");
class SatValPicker extends react_1.Component {
    constructor() {
        super(...arguments);
        this.captureRef = (ref) => {
            this.pickerRef = ref || undefined;
            ref === null || ref === void 0 ? void 0 : ref.addEventListener('touchmove', event => event.stopPropagation());
        };
        this.changing = false;
        this.stopChanging = () => {
            this.changing = false;
            if (this.props.onChangeComplete) {
                this.props.onChangeComplete();
            }
        };
        this.onKeyDown = (event) => {
            const INCREMENT = 0.01;
            const oldColor = this.props.color;
            let { s, v } = oldColor;
            switch (event.key) {
                case 'ArrowUp':
                    v += INCREMENT;
                    break;
                case 'ArrowDown':
                    v -= INCREMENT;
                    break;
                case 'ArrowLeft':
                    s -= INCREMENT;
                    break;
                case 'ArrowRight':
                    s += INCREMENT;
                    break;
                default:
                    return;
            }
            event.preventDefault();
            const clamp = (n) => Math.min(Math.max(0, n), 1);
            const newColor = new hsv_color_1.HsvColor(oldColor.h, clamp(s), clamp(v), oldColor.alpha);
            this.onChange(newColor);
        };
        this.onKeyUp = () => {
            this.stopChanging();
        };
        this.onMouseUp = () => {
            this.stopChanging();
        };
        this.onMouseDown = event => {
            if (event.button !== 0) {
                return;
            }
            this.pickerRef.focus();
            this.moveKnob(mouseToKnobCoords(this.pickerRef.getBoundingClientRect(), event));
        };
        this.onDragMove = (event) => {
            this.moveKnob(mouseToKnobCoords(this.pickerRef.getBoundingClientRect(), event));
        };
        this.onDragEnd = (event) => {
            this.stopChanging();
        };
    }
    render() {
        const { color, Draggable } = this.props;
        const knobPosition = {
            width: `${color.s * 100}%`,
            height: `${100 - color.v * 100}%`,
        };
        return ((0, jsx_runtime_1.jsx)(
            Draggable,
            { onMouseDown: this.onMouseDown, onDragMove: this.onDragMove, onDragEnd: this.onDragEnd, children: ({
                onMouseDown,
                onTouchStart
            }) => (
                ((0, jsx_runtime_1.jsx)(
                    "div",
                    { className: sat_val_picker_css_1.default.root, onMouseDown: onMouseDown, onTouchStart: onTouchStart, onMouseUp: this.onMouseUp, onKeyDown: this.onKeyDown, onKeyUp: this.onKeyUp, ref: this.captureRef, 
                        tabIndex: 0, style: { backgroundColor: `hsl(${color.h * 360}, 100%, 50%)` }, children: (0, jsx_runtime_1.jsx)("div", { className: sat_val_picker_css_1.default.whiteGradient, children: (0, jsx_runtime_1.jsx)("div", { className: sat_val_picker_css_1.default.blackGradient, children: (0, jsx_runtime_1.jsx)("div", { className: sat_val_picker_css_1.default.knobPositioner, style: knobPosition, children: (0, jsx_runtime_1.jsx)("div", { className: sat_val_picker_css_1.default.knob, style: {
                                            backgroundColor: color.toRgb().toHexString(),
                                        } }) }) }) }) }
                ))) }
        ));
    }
    moveKnob(knob) {
        const newColor = new hsv_color_1.HsvColor(
        this.props.color.h, 
        knob.leftPercent, 
        1 - knob.topPercent, 
        this.props.color.alpha);
        this.onChange(newColor);
    }
    onChange(newColor) {
        const { onChange, onChangeStart, color: oldColor } = this.props;
        if (!this.changing) {
            this.changing = true;
            onChangeStart && onChangeStart();
        }
        if (!newColor.equals(oldColor)) {
            onChange(newColor);
        }
    }
}
exports.SatValPicker = SatValPicker;
function mouseToKnobCoords(pickerRect, { clientX, clientY }) {
    const clamp = (val) => Math.min(1, Math.max(0, val));
    return {
        leftPercent: clamp((clientX - pickerRect.left) / pickerRect.width),
        topPercent: clamp((clientY - pickerRect.top) / pickerRect.height),
    };
}
exports.mouseToKnobCoords = mouseToKnobCoords;
