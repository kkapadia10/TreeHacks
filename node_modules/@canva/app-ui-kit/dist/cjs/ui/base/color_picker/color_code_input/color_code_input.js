"use strict";

const makeObservable = require('../../../../base/make_observable/make_observable').makeObservable;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ColorCodeInput = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const mobx = require("mobx");
const mobxReact = require("mobx-react");
const React = require("react");
const color_1 = require('../../color/color');
const text_decorator_1 = require('../../form/input/decorators/text_decorator');
const number_input_1 = require('../../form/input/number_input');
const text_input_1 = require('../../form/input/text_input');
const swatch_1 = require('../../swatch/swatch');
const color_code_input_css_1 = require("./color_code_input.css");
const color_code_input_messages_1 = require("./color_code_input.messages");
let ColorCodeInput = class ColorCodeInput extends React.Component {
  static _makeObservable(instance) {
    makeObservable(instance, {
      inputValue: mobx.observable.ref,
      onChange: mobx.action.bound,
      onAlphaChange: mobx.action.bound
    });
  }
  constructor() {
    super(...arguments);
    ColorCodeInput._makeObservable(this);
    this.input = React.createRef();
    this.inputValue = this.props.color;
    this.recentlyBlurred = false;
    this.onFocus = () => {
      if (!this.recentlyBlurred) {
        setTimeout(() => {
          var _a;
          return (_a = this.input.current) === null || _a === void 0 ? void 0 : _a.select();
        });
      }
    };
    this.onBlur = () => {
      this.recentlyBlurred = true;
      setTimeout(() => this.recentlyBlurred = false, 0);
    };
  }
  render() {
    const value = fudgeHex(this.inputValue) === this.props.color ? this.inputValue : this.props.color;
    return this.renderInput(value);
  }
  renderInput(value) {
    const shouldRenderAlpha = this.props.onAlphaChange != null;
    const {
      r,
      g,
      b
    } = color_1.RgbColor.fromHexString(fudgeHex(value));
    const valueWithAlpha = new color_1.RgbaColor(r, g, b, this.props.alpha).toRgbaString();
    return (0, jsx_runtime_1.jsx)(text_input_1.TextInput, {
      inputClassName: color_code_input_css_1.default.input,
      start: this.props.withSwatch ? (0, jsx_runtime_1.jsx)(swatch_1.Swatch, {
        size: "xxsmall",
        fill: [valueWithAlpha]
      }) : undefined,
      value: value,
      end: shouldRenderAlpha && this.renderAlphaInput(),
      disableSpellcheck: true,
      onChange: this.onChange,
      onFocus: this.onFocus,
      onBlur: this.onBlur,
      ref: this.input,
      textAlignCenter: !shouldRenderAlpha,
      autoFocus: this.props.autoFocus,
      ariaLabel: this.props.ariaLabel,
      ariaLabelledBy: this.props.ariaLabelledBy,
      ariaDescribedBy: this.props.ariaDescribedBy
    });
  }
  renderAlphaInput() {
    const alpha = this.props.alpha == null ? 1 : this.props.alpha;
    const value = Math.round(alpha * 100);
    const percentageDecoration = (0, jsx_runtime_1.jsx)(text_decorator_1.TextDecorator, {
      children: "%"
    });
    return (0, jsx_runtime_1.jsx)("div", {
      className: color_code_input_css_1.default.numInput,
      children: (0, jsx_runtime_1.jsx)(number_input_1.NumberInput, {
        value: value,
        borderless: true,
        textAlignCenter: true,
        end: percentageDecoration,
        max: 100,
        min: 0,
        onChange: this.onAlphaChange,
        ariaLabel: color_code_input_messages_1.ColorCodeInputMessages.alphaInputLabel()
      })
    });
  }
  onChange(code) {
    const inputLength = code.length;
    code = code.replace(/[^0-9a-f]/gi, '');
    const lengthDiff = inputLength - code.length;
    code = `#${code.slice(0, 6)}`;
    this.inputValue = code;
    this.props.onChange(fudgeHex(code));
    const inputRef = this.input.current;
    if (inputRef) {
      const cursorPosition = inputRef.selectionStart - lengthDiff + 1;
      inputRef.value = code;
      inputRef.selectionStart = cursorPosition;
      inputRef.selectionEnd = cursorPosition;
    }
  }
  onAlphaChange(alpha) {
    var _a, _b;
    const value = isNaN(alpha) ? 0 : Math.max(0, Math.min(100, alpha)) / 100;
    (_b = (_a = this.props).onAlphaChange) === null || _b === void 0 ? void 0 : _b.call(_a, value);
  }
};
exports.ColorCodeInput = ColorCodeInput;
exports.ColorCodeInput = ColorCodeInput = tslib_1.__decorate([mobxReact.observer], ColorCodeInput);
const fudgeHex = hex => {
  hex = hex.toLowerCase().replace(/[^0-9a-f]/g, '').slice(0, 6);
  hex = hex || 'ffffff';
  if (hex.length <= 3) {
    hex += '0'.repeat(3 - hex.length);
    hex = hex[0].repeat(2) + hex[1].repeat(2) + hex[2].repeat(2);
  } else if (hex.length < 6) {
    hex += '0'.repeat(6 - hex.length);
  }
  return `#${hex}`;
};