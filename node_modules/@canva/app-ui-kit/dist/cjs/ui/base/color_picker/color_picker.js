"use strict";

const makeObservable = require('../../../base/make_observable/make_observable').makeObservable;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ColorPicker = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const mobx = require("mobx");
const mobxReact = require("mobx-react");
const React = require("react");
const color_picker_presenter_1 = require("./color_picker_presenter");
const internal_color_picker_1 = require("./internal/internal_color_picker");
let ColorPicker = class ColorPicker extends React.Component {
  static _makeObservable(instance) {
    makeObservable(instance, {
      componentDidUpdate: mobx.action
    });
  }
  constructor(props) {
    super(props);
    ColorPicker._makeObservable(this);
    const alpha = props.alpha != null ? props.alpha : 1;
    this.colorStore = new color_picker_presenter_1.ColorStoreImpl(props.color, alpha);
    this.store = new color_picker_presenter_1.ColorPickerStore(this.colorStore);
    this.presenter = new color_picker_presenter_1.ColorPickerPresenter(this.store, props.onChange);
  }
  componentDidUpdate(previousProps) {
    if (this.props.onChange !== previousProps.onChange) {
      this.presenter = new color_picker_presenter_1.ColorPickerPresenter(this.store, this.props.onChange);
    }
    if (this.props.color !== previousProps.color || this.props.alpha !== previousProps.alpha) {
      this.colorStore.color = this.props.color;
      this.colorStore.alpha = this.props.alpha != null ? this.props.alpha : 1;
    }
  }
  render() {
    const {
      sizingMode,
      isSheet,
      autoFocusHexInput,
      alpha,
      onChangeStart,
      onChangeComplete,
      onStartEyedropper,
      onDeleteColor
    } = this.props;
    const {
      onInputChange,
      onHueChange,
      onSatValChange,
      onAlphaChange
    } = this.presenter;
    const {
      color
    } = this.store;
    return (0, jsx_runtime_1.jsx)(internal_color_picker_1.InternalColorPicker, {
      color: color,
      sizingMode: sizingMode,
      isSheet: isSheet,
      autoFocusHexInput: autoFocusHexInput,
      onChangeStart: onChangeStart,
      onChangeComplete: onChangeComplete,
      onInputChange: onInputChange,
      onHueChange: onHueChange,
      onSatValChange: onSatValChange,
      onAlphaChange: alpha != null ? onAlphaChange : undefined,
      onStartEyedropper: onStartEyedropper,
      onDeleteColor: onDeleteColor
    });
  }
};
exports.ColorPicker = ColorPicker;
exports.ColorPicker = ColorPicker = tslib_1.__decorate([mobxReact.observer], ColorPicker);