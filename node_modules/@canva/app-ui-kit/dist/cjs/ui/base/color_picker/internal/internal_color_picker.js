"use strict";

const makeObservable = require('../../../../base/make_observable/make_observable').makeObservable;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InternalColorPicker = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const classnames_1 = require("classnames");
const mobx = require("mobx");
const mobxReact = require("mobx-react");
const React = require("react");
const box_1 = require('../../box/box');
const button_1 = require('../../button/button');
const alpha_slider_1 = require('../alpha_slider/alpha_slider');
const color_code_input_1 = require('../color_code_input/color_code_input');
const hue_slider_1 = require('../hue_slider/hue_slider');
const sat_val_picker_1 = require('../sat_val_picker/sat_val_picker');
const draggable_view_1 = require('../../draggable/draggable_view');
const icon_1 = require('../../icons/eyedropper/icon');
const icon_2 = require('../../icons/trash_single/icon');
const sheet_1 = require('../../sheet/sheet');
const color_picker_messages_1 = require("../color_picker.messages");
const internal_color_picker_css_1 = require("./internal_color_picker.css");
exports.InternalColorPicker = React.memo(props => {
  const {
    color,
    sizingMode = 'fill',
    isSheet = sizingMode === 'fill',
    autoFocusHexInput = 'on-desktop',
    onStartEyedropper,
    onDeleteColor
  } = props;
  const {
    onChangeStart,
    onChangeComplete,
    onInputChange,
    onHueChange,
    onSatValChange,
    onAlphaChange
  } = props;
  const EyeDropperButton = React.useMemo(() => onStartEyedropper ? () => (0, jsx_runtime_1.jsx)(EyedropperButton, {
    onStartEyedropper: onStartEyedropper,
    isSheet: isSheet
  }) : undefined, [onStartEyedropper, isSheet]);
  const DeleteColorButton = React.useMemo(() => onDeleteColor ? () => (0, jsx_runtime_1.jsx)(DeleteColorButtonImpl, {
    onDeleteColor: onDeleteColor
  }) : undefined, [onDeleteColor]);
  if (sizingMode === 'fixed') {
    return (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, {
      children: [(0, jsx_runtime_1.jsx)(ColorPickerBody, {
        color: color,
        onChangeStart: onChangeStart,
        onChangeComplete: onChangeComplete,
        onHueChange: onHueChange,
        onSatValChange: onSatValChange,
        onAlphaChange: onAlphaChange
      }), (0, jsx_runtime_1.jsx)(ColorPickerInputGroup, {
        autoFocusHexInput: autoFocusHexInput,
        color: color,
        hexInputSizingMode: "fill",
        onInputChange: onInputChange,
        onAlphaChange: onAlphaChange,
        EyeDropperButton: EyeDropperButton,
        DeleteColorButton: DeleteColorButton
      })]
    });
  }
  return (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, {
    children: [(0, jsx_runtime_1.jsx)("div", {
      className: internal_color_picker_css_1.default.colorPickerHeader,
      children: (0, jsx_runtime_1.jsx)(ColorPickerInputGroup, {
        color: color,
        hexInputSizingMode: "fixed",
        withColoredBox: true,
        onInputChange: onInputChange,
        onAlphaChange: onAlphaChange,
        EyeDropperButton: EyeDropperButton,
        DeleteColorButton: DeleteColorButton
      })
    }), (0, jsx_runtime_1.jsx)(box_1.Box, {
      padding: "2u",
      children: (0, jsx_runtime_1.jsx)(ColorPickerBody, {
        color: color,
        showDivider: true,
        onChangeStart: onChangeStart,
        onChangeComplete: onChangeComplete,
        onHueChange: onHueChange,
        onSatValChange: onSatValChange,
        onAlphaChange: onAlphaChange
      })
    })]
  });
});
const ColorPickerInputGroup = React.memo(props => (0, jsx_runtime_1.jsxs)("div", {
  className: internal_color_picker_css_1.default.colorInputSection,
  children: [props.DeleteColorButton && (0, jsx_runtime_1.jsx)(props.DeleteColorButton, {}), (0, jsx_runtime_1.jsx)("div", {
    className: (0, classnames_1.default)(internal_color_picker_css_1.default.colorCodeInput, {
      [internal_color_picker_css_1.default.fixedWithoutAlpha]: props.hexInputSizingMode === 'fixed' && props.onAlphaChange == null,
      [internal_color_picker_css_1.default.fixedWithAlpha]: props.hexInputSizingMode === 'fixed' && props.onAlphaChange != null,
      [internal_color_picker_css_1.default.fill]: props.hexInputSizingMode === 'fill'
    }),
    children: (0, jsx_runtime_1.jsx)(color_code_input_1.ColorCodeInput, {
      autoFocus: props.autoFocusHexInput,
      color: props.color.toRgb().toHexString(),
      alpha: props.color.alpha,
      onAlphaChange: props.onAlphaChange,
      onChange: props.onInputChange,
      withSwatch: props.withColoredBox,
      ariaLabel: color_picker_messages_1.ColorPickerMessages.colorCodeInputLabel()
    })
  }), props.EyeDropperButton && (0, jsx_runtime_1.jsx)(props.EyeDropperButton, {})]
}));
const ColorPickerBody = React.memo(props => (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, {
  children: [(0, jsx_runtime_1.jsx)(sat_val_picker_1.SatValPicker, {
    color: props.color,
    onChange: props.onSatValChange,
    onChangeStart: props.onChangeStart,
    onChangeComplete: props.onChangeComplete,
    Draggable: draggable_view_1.DraggableView
  }), props.showDivider && (0, jsx_runtime_1.jsx)("div", {
    className: internal_color_picker_css_1.default.divider
  }), (0, jsx_runtime_1.jsx)(hue_slider_1.HueSlider, {
    hue: props.color.h,
    onDragStart: props.onChangeStart,
    onDragEnd: props.onChangeComplete,
    onChange: props.onHueChange,
    ariaLabel: color_picker_messages_1.ColorPickerMessages.colorCodeHueLabel()
  }), props.onAlphaChange && (0, jsx_runtime_1.jsx)(alpha_slider_1.AlphaSlider, {
    alpha: props.color.alpha,
    color: props.color.toRgb().toHexString(),
    onDragStart: props.onChangeStart,
    onDragEnd: props.onChangeComplete,
    onChange: props.onAlphaChange,
    ariaLabel: color_picker_messages_1.ColorPickerMessages.colorCodeAlphaLabel()
  })]
}));
let EyedropperButton = class EyedropperButton extends React.PureComponent {
  static _makeObservable(instance) {
    makeObservable(instance, {
      active: mobx.observable.ref,
      onStartEyedropper: mobx.action.bound
    });
  }
  constructor() {
    super(...arguments);
    EyedropperButton._makeObservable(this);
    this.active = false;
  }
  render() {
    const {
      isSheet
    } = this.props;
    return (0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, {
      children: [(0, jsx_runtime_1.jsx)(button_1.Button, {
        variant: "tertiary",
        icon: icon_1.EyedropperIcon,
        active: this.active,
        className: internal_color_picker_css_1.default.eyedropperButton,
        tooltipLabel: color_picker_messages_1.ColorPickerMessages.eyedropperTooltip(),
        onClick: this.onStartEyedropper
      }), isSheet && (0, jsx_runtime_1.jsx)(sheet_1.Sheet, {
        content: null,
        open: this.active
      })]
    });
  }
  onStartEyedropper(event) {
    this.active = true;
    this.props.onStartEyedropper(event).finally(mobx.action(() => this.active = false));
  }
};
EyedropperButton = tslib_1.__decorate([mobxReact.observer], EyedropperButton);
const DeleteColorButtonImpl = props => (0, jsx_runtime_1.jsx)(button_1.Button, {
  variant: "tertiary",
  icon: icon_2.TrashSingleIcon,
  className: internal_color_picker_css_1.default.deleteColorButton,
  tooltipLabel: color_picker_messages_1.ColorPickerMessages.deleteColorTooltip(),
  onClick: props.onDeleteColor
});