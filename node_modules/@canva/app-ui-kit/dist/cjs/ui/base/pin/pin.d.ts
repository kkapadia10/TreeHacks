import Popper from 'popper.js';
import * as React from 'react';
import type { LayerLevel } from '../layer/layer';
import type { Direction } from '../provider/provider';
import type { PinMotionWrapperProps } from './pin_motion_wrapper';
export type Placement = Popper.Placement;
export type BoundariesElement = Popper.Boundary | HTMLElement;
type PopperFactory = (reference: Element | Popper.ReferenceObject, popper: Element, options?: Popper.PopperOptions) => Popper;
export type PinProps = {
    placement?: Placement;
    level?: LayerLevel;
    positionFixed?: boolean;
    open?: boolean;
    children?: React.ReactNode;
    content?: any;
    expandChildren?: boolean;
    refObj?: Popper.ReferenceObject;
    MotionWrapper?: React.ComponentType<PinMotionWrapperProps>;
    arrow?: any;
    onChildrenPointerDown?(e?: Event): void;
    parentLayer?: HTMLElement;
    onOutsideContentPointerDown?(e?: Event): void;
    _popperFactory?: PopperFactory;
    calculateOffset?(): {
        left: number;
        top: number;
    };
    overflowBoundariesElement?: BoundariesElement;
    overflowParent?: boolean;
    onPlacementUpdate?(data: Popper.Data): void;
    noPointerEvents?: boolean;
    noPointerEventsForDisabledChildren?: boolean;
    blockOutsidePointerEvents?: boolean;
    modalBackdrop?: 'dark' | 'transparent';
    direction?: Direction;
};
export type PinRef = {
    update(): void;
    dangerouslyForceUpdate(): void
};
export declare const Pin: React.ForwardRefExoticComponent<PinProps & React.RefAttributes<PinRef>>;
export {};
