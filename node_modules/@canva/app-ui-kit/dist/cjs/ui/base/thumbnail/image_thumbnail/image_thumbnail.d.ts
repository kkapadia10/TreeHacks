import '../../../../base/platform_quirks/disable_dragging';
import type { ImageProps } from '../image/image';
import type { BaseThumbnailProps } from '../internal/base_thumbnail';
export type Fit = 'cover' | 'contain' | 'containCrop';
export type LoadingState = 'loading' | 'loaded' | 'error' | 'none';
export type ImageThumbnailProps = StaticImageThumbnailProps & {
    loadingState?: LoadingState
    placeholder?: JSX.Element
    fallback?: JSX.Element
    loadImage?: (src: string) => Promise<void>
    onImageLoad?: (loadingState: LoadingState) => void
    width?: number
    height?: number
};
export declare const ImageThumbnail: (props: ImageThumbnailProps) => import("react/jsx-runtime").JSX.Element;
export declare const ImagePlaceholder: ({ index }: {
    index?: number | undefined;
}) => import("react/jsx-runtime").JSX.Element;
type ConditionalFitProps = {
    fit?: 'cover'
    thumbnailRatio?: number
} | {
    fit: 'contain' | 'containCrop'
    thumbnailRatio: number
};
type StaticImageThumbnailProps = Omit<BaseThumbnailProps, 'children' | 'ariaLabel' | 'aspectRatio' | 'width' | 'height'> & Omit<ImageProps, 'className'> & {
    border?: boolean
    ImageComponent?: ({ id, className, alt, crossOrigin, src, elementTiming, }: ImageProps) => JSX.Element
    aspectRatio?: number
} & ConditionalFitProps;
export {};
