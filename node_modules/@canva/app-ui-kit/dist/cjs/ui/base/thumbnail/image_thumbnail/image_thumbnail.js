"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImagePlaceholder = exports.ImageThumbnail = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
require('../../../../base/platform_quirks/disable_dragging');
const classnames_1 = require("classnames");
const mobx_1 = require("mobx");
const mobx_react_lite_1 = require("mobx-react-lite");
const React = require("react");
const aspect_ratio_1 = require('../../aspect_ratio/aspect_ratio');
const icon_1 = require('../../icons/warning_off/icon');
const fader_1 = require('../../placeholder/fader');
const placeholder_1 = require('../../placeholder/placeholder');
const icon_thumbnail_1 = require("../icon_thumbnail/icon_thumbnail");
const image_1 = require("../image/image");
const base_thumbnail_1 = require("../internal/base_thumbnail");
const base_thumbnail_css_1 = require("../internal/base_thumbnail.css");
const image_thumbnail_css_1 = require("./image_thumbnail.css");
const dimension_1 = require("./internal/dimension");
const DEFAULT_ASPECT_RATIO = 4 / 3;
const ImageThumbnail = (props) => {
    var _a;
    const { loadImage = simpleLoadImage, width, height, aspectRatio: aspectRatioProp, fit } = props;
    const aspectRatio = (_a = aspectRatioProp !== null && aspectRatioProp !== void 0 ? aspectRatioProp : (width != null && height != null ? width / height : undefined)) !== null && _a !== void 0 ? _a : (fit === 'contain' || fit === 'containCrop' ? DEFAULT_ASPECT_RATIO : undefined);
    const enhancedProps = { ...props, aspectRatio };
    if (props.loadingState === 'none') {
        return maybeWrapWithSizingContainer((0, jsx_runtime_1.jsx)(InternalStaticImageThumbnail, { ...enhancedProps }), {
            aspectRatio,
            width,
            height,
        });
    }
    if (props.loadingState == null && props.src != null) {
        return ((0, jsx_runtime_1.jsx)(LoadImage, { src: props.src, loadImage: loadImage, callback: props.onImageLoad, children: loadingState => (0, jsx_runtime_1.jsx)(LoadableImageThumbnail, { ...enhancedProps, loadingState: loadingState }) }));
    }
    return (0, jsx_runtime_1.jsx)(LoadableImageThumbnail, { ...enhancedProps });
};
exports.ImageThumbnail = ImageThumbnail;
const ImagePlaceholder = ({ index }) => ((0, jsx_runtime_1.jsx)(placeholder_1.Placeholder, { index: index, shape: "sharpRectangle" }));
exports.ImagePlaceholder = ImagePlaceholder;
const LoadableImageThumbnail = ({ loadingState, src, width, height, fallback = (0, jsx_runtime_1.jsx)(icon_thumbnail_1.IconThumbnail, { Icon: icon_1.WarningOffIcon, width: width, height: height }), placeholder = (0, jsx_runtime_1.jsx)(ImageThumbnailPlaceholder, { src: src }), aspectRatio, ...imageProps }) => {
    return maybeWrapWithSizingContainer((0, jsx_runtime_1.jsx)(fader_1.PlaceholderFader, { loading: loadingState === 'loading', expand: true, Placeholder: () => placeholder, Content: () => loadingState === 'error'
            ? fallback
            : (0, jsx_runtime_1.jsx)(InternalStaticImageThumbnail, { src: src, aspectRatio: aspectRatio, ...imageProps }) }), { aspectRatio, width, height });
};
const InternalStaticImageThumbnail = ({ aspectRatio, thumbnailRatio, fit = 'cover', background, border, borderRadius, padding = 'none', ImageComponent = image_1.Image, className, ...imageProps }) => {
    const isTallThumbnailForContainCrop = fit === 'containCrop' && thumbnailRatio != null && thumbnailRatio < 1;
    const hasVisibleContainer = fit === 'containCrop' || fit === 'contain' || padding !== 'none' || background;
    const hasImageWrapper = border || isTallThumbnailForContainCrop;
    const dimensionsStyle = fit === 'cover' || thumbnailRatio == null
        ? {}
        : (0, dimension_1.getDimensions)(fit, aspectRatio || DEFAULT_ASPECT_RATIO, thumbnailRatio);
    const imageStyleClassName = (0, classnames_1.default)({
        [base_thumbnail_css_1.default.smallBorderRadius]: borderRadius === 'small',
        [base_thumbnail_css_1.default.mediumBorderRadius]: borderRadius === 'medium',
    });
    const _imageProps = {
        ...imageProps,
        alt: imageProps.alt || '',
        className: hasImageWrapper ? image_thumbnail_css_1.default.image : (0, classnames_1.default)(image_thumbnail_css_1.default.image, imageStyleClassName),
        style: hasImageWrapper ? {} : dimensionsStyle,
    };
    const image = hasImageWrapper
        ? ((0, jsx_runtime_1.jsx)("div", { className: (0, classnames_1.default)(imageStyleClassName, !hasVisibleContainer && className, {
                [image_thumbnail_css_1.default.border]: border,
                [image_thumbnail_css_1.default.tallThumbnail]: isTallThumbnailForContainCrop,
            }), style: dimensionsStyle, children: (0, jsx_runtime_1.jsx)(ImageComponent, { ..._imageProps }) }))
        : (0, jsx_runtime_1.jsx)(ImageComponent, { ..._imageProps });
    if (hasVisibleContainer) {
        return ((0, jsx_runtime_1.jsx)(base_thumbnail_1.BaseThumbnail, { borderRadius: borderRadius, background: background, padding: padding, className: (0, classnames_1.default)(className, image_thumbnail_css_1.default.centerImage), children: image }));
    }
    return image;
};
const ImageThumbnailPlaceholder = ({ src }) => ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(exports.ImagePlaceholder, {}), (0, jsx_runtime_1.jsx)("noscript", { children: (0, jsx_runtime_1.jsx)("img", { src: src, className: image_thumbnail_css_1.default.hideForNoscript, draggable: false, alt: "" }) })] }));
function simpleLoadImage(src) {
    return new Promise((resolve, reject) => {
        const img = new Image();
        img.src = src;
        img.onload = () => {
            resolve();
        };
        img.onerror = () => {
            reject();
        };
    });
}
const LoadImage = (0, mobx_react_lite_1.observer)(function LoadImage({ src, callback, children, loadImage, }) {
    const store = (0, mobx_react_lite_1.useLocalObservable)(() => ({
        loadingState: 'loading',
        setLoadingState: (0, mobx_1.action)((loadingState) => {
            store.loadingState = loadingState;
        }),
    }));
    React.useEffect(() => {
        (async () => {
            store.setLoadingState('loading');
            callback && callback('loading');
            await loadImage(src)
                .then(() => {
                store.setLoadingState('loaded');
            })
                .catch(() => {
                store.setLoadingState('error');
            });
            callback && callback(store.loadingState);
        })();
    }, [src, callback, loadImage, store]);
    return (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: children(store.loadingState) });
});
const maybeWrapWithSizingContainer = (children, { aspectRatio, width, height }) => {
    if (aspectRatio != null) {
        return ((0, jsx_runtime_1.jsx)(aspect_ratio_1.AspectRatio, { ratio: aspectRatio, width: width, height: height, children: children }));
    }
    if (width != null || height != null) {
        return (0, jsx_runtime_1.jsx)("div", { style: { width: width !== null && width !== void 0 ? width : '100%', height: height !== null && height !== void 0 ? height : '100%' }, children: children });
    }
    return children;
};
