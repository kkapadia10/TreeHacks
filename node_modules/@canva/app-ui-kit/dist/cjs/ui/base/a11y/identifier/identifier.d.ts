import * as React from 'react';
type TupleInner<T, N extends number, A extends T[]> = A['length'] extends N ? A : TupleInner<T, N, [T, ...A]>;
type Tuple<T, N extends number> = number extends N ? T[] : TupleInner<T, N, []>;
export declare function useIdentifiers<N extends number>(count: N): Tuple<string, N>;
export type WithIdentifierProps<N extends number = 1> = {
    count?: N
    children: (...ids: Tuple<string, N>) => React.ReactNode;
} & (N extends 1 ? {} : {
    count: N;
});
export declare function WithIdentifiers<N extends number = 1>({ count, children }: WithIdentifierProps<N>): import("react/jsx-runtime").JSX.Element;
export {};
