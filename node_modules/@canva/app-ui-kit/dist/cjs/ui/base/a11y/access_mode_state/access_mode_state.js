"use strict";

const makeObservable = require('../../../../base/make_observable/make_observable').makeObservable;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useIsMouseAccessMode = exports.accessModeState = void 0;
const tslib_1 = require("tslib");
const mobx_1 = require("mobx");
const React = require("react");
const initialAccessMode = 'mouse';
class AccessModeStore {
  static _makeObservable(instance) {
    makeObservable(instance, {
      _accessMode: mobx_1.observable.ref,
      isMouseMode: mobx_1.computed,
      isKeyboardMode: mobx_1.computed,
      accessMode: mobx_1.computed,
      setAccessMode: mobx_1.action
    });
  }
  constructor() {
    AccessModeStore._makeObservable(this);
    this._accessMode = initialAccessMode;
  }
  get isMouseMode() {
    return this._accessMode === 'mouse';
  }
  get isKeyboardMode() {
    return this._accessMode === 'keyboard';
  }
  get accessMode() {
    return this._accessMode;
  }
  setAccessMode(mode) {
    this._accessMode = mode;
    return this._accessMode;
  }
  resetAccessMode() {
    this.setAccessMode(initialAccessMode);
  }
}
exports.accessModeState = new AccessModeStore();
function registerDocumentListeners(document) {
  document.addEventListener('keydown', e => {
    if (e.key === 'Tab') {
      exports.accessModeState.setAccessMode('keyboard');
    }
  }, true);
  document.addEventListener('mousedown', e => exports.accessModeState.setAccessMode('mouse'), true);
  document.addEventListener('touchstart', e => exports.accessModeState.setAccessMode('mouse'), true);
}
if (typeof document !== 'undefined') {
  registerDocumentListeners(document);
}
function useReaction(expression, initialValue) {
  const [state, setState] = React.useState(initialValue);
  React.useEffect(() => {
    return (0, mobx_1.reaction)(expression, value => setState(value), {
      fireImmediately: true
    });
  }, []);
  return state;
}
function useIsMouseAccessMode() {
  return useReaction(() => exports.accessModeState.isMouseMode, true);
}
exports.useIsMouseAccessMode = useIsMouseAccessMode;