"use strict";

const makeObservable = require('../../../../base/make_observable/make_observable').makeObservable;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useIsHoveringInput = exports.useIsPenInput = exports.useIsMouseInput = exports.useIsTouchInput = exports.pointerInputState = void 0;
const tslib_1 = require("tslib");
const mobx_1 = require("mobx");
const React = require("react");
const device_capabilities_1 = require('../../device_capabilities/device_capabilities');
const initialPointerInput = 'mouse';
class PointerInputStore {
  static _makeObservable(instance) {
    makeObservable(instance, {
      _pointerInput: mobx_1.observable.ref,
      isTouchInput: mobx_1.computed,
      isMouseInput: mobx_1.computed,
      isPenInput: mobx_1.computed,
      isHoveringInput: mobx_1.computed,
      setPointerInput: mobx_1.action
    });
  }
  constructor() {
    PointerInputStore._makeObservable(this);
    this._pointerInput = initialPointerInput;
  }
  get isTouchInput() {
    return this._pointerInput === 'touch';
  }
  get isMouseInput() {
    return this._pointerInput === 'mouse';
  }
  get isPenInput() {
    return this._pointerInput === 'pen';
  }
  get isHoveringInput() {
    return this._pointerInput !== 'touch' && (0, device_capabilities_1.canHover)();
  }
  setPointerInput(input) {
    this._pointerInput = input;
    return this._pointerInput;
  }
}
const pointerInputStore = new PointerInputStore();
exports.pointerInputState = pointerInputStore;
function registerDocumentListeners(document) {
  const initialState = (0, device_capabilities_1.isTouchSupported)() ? 'touch' : 'mouse';
  pointerInputStore.setPointerInput(initialState);
  if (!(0, device_capabilities_1.isPointerEventsSupported)()) {
    return;
  }
  document.addEventListener('pointerdown', e => {
    switch (e.pointerType) {
      case 'mouse':
        pointerInputStore.setPointerInput('mouse');
        break;
      case 'touch':
        pointerInputStore.setPointerInput('touch');
        break;
      case 'pen':
        pointerInputStore.setPointerInput('pen');
        break;
      default:
    }
  }, true);
}
if (typeof document !== 'undefined') {
  registerDocumentListeners(document);
}
function useReaction(expression, initialValue) {
  const [state, setState] = React.useState(initialValue);
  React.useEffect(() => {
    return (0, mobx_1.reaction)(expression, value => setState(value), {
      fireImmediately: true
    });
  }, []);
  return state;
}
function useIsTouchInput() {
  return useReaction(() => exports.pointerInputState.isTouchInput, false);
}
exports.useIsTouchInput = useIsTouchInput;
function useIsMouseInput() {
  return useReaction(() => exports.pointerInputState.isMouseInput, true);
}
exports.useIsMouseInput = useIsMouseInput;
function useIsPenInput() {
  return useReaction(() => exports.pointerInputState.isPenInput, false);
}
exports.useIsPenInput = useIsPenInput;
function useIsHoveringInput() {
  return useReaction(() => exports.pointerInputState.isHoveringInput, true);
}
exports.useIsHoveringInput = useIsHoveringInput;