"use strict";

const makeObservable = require('../../../../base/make_observable/make_observable').makeObservable;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Layer = exports.Layers = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const mobx = require("mobx");
const React = require("react");
const ReactDOM = require("react-dom");
const layer_1 = require('../../layer/layer');
const provider_1 = require('../../provider/provider');
const layer_view_1 = require("./layer_view");
class Layers {
  constructor() {
    this.layers = [];
    this.allSheets = new Set();
    this.calculateNewLayerLevel = (onBottom, layerLevel) => {
      if (this.layers.length === 0) {
        return layerLevel;
      }
      if (onBottom) {
        const bottomLayerLevel = this.layers[this.layers.length - 1].layerLevel;
        return layerLevel > bottomLayerLevel ? bottomLayerLevel : layerLevel;
      }
      const topLayerLevel = this.layers[0].layerLevel;
      return layerLevel < topLayerLevel ? topLayerLevel : layerLevel;
    };
    this.onLayerClose = layer => {
      if (layer.sheets.length === 0) {
        ReactDOM.unmountComponentAtNode(layer.element);
        layer.element.remove();
        this.layers.splice(this.layers.indexOf(layer), 1);
      }
    };
  }
  addSheet(sheet) {
    var _a;
    if (this.allSheets.has(sheet) || sheet.window == null) {
      return;
    }
    const {
      from,
      onBottom
    } = sheet;
    const openLayers = this.layers.filter(l => l.isOpen);
    let layer = onBottom ? openLayers[openLayers.length - 1] : openLayers[0];
    if (!layer || layer.forced || layer.from !== from || sheet.props.forceLayer) {
      const layerLevel = this.calculateNewLayerLevel(onBottom, (_a = sheet.props.layerLevel) !== null && _a !== void 0 ? _a : layer_1.LayerLevel.PINS);
      layer = new Layer(from, !!sheet.props.forceLayer, sheet.window, layerLevel);
      ReactDOM.render((0, jsx_runtime_1.jsx)(provider_1.EaselProvider, {
        enableAnimations: sheet.easelConfiguration.enableAnimations,
        direction: sheet.easelConfiguration.direction,
        disableFocusTraps: sheet.easelConfiguration.disableFocusTraps,
        enableUserSelection: sheet.easelConfiguration.enableUserSelection,
        theme: sheet.easelConfiguration.theme,
        enableHighColorContrast: sheet.easelConfiguration.enableHighColorContrast,
        autoplayVideos: sheet.easelConfiguration.autoplayVideos,
        disableDialogBlur: sheet.easelConfiguration.disableDialogBlur,
        enableEaselUiRefresh: sheet.easelConfiguration.enableEaselUiRefresh,
        children: (0, jsx_runtime_1.jsx)(layer_view_1.LayerView, {
          layer: layer,
          onLayerClose: this.onLayerClose,
          window: sheet.window
        })
      }), layer.element);
      if (onBottom) {
        const bottomLayer = this.layers[this.layers.length - 1];
        sheet.window.document.body.insertBefore(layer.element, bottomLayer && bottomLayer.element);
        this.layers.push(layer);
      } else {
        sheet.window.document.body.appendChild(layer.element);
        this.layers.unshift(layer);
      }
    }
    layer.add(sheet);
    this.allSheets.add(sheet);
  }
  removeSheet(sheet) {
    const layer = this.layers.find(l => l.sheets.includes(sheet));
    if (layer) {
      layer.remove(sheet);
      this.allSheets.delete(sheet);
      !sheet.enableAnimations && this.onLayerClose(layer);
    }
  }
}
exports.Layers = Layers;
class Layer {
  static _makeObservable(instance) {
    makeObservable(instance, {
      current: mobx.observable.ref,
      previous: mobx.observable.ref,
      update: mobx.action
    });
  }
  constructor(from, forced, argWindow, layerLevel = layer_1.LayerLevel.PINS) {
    Layer._makeObservable(this);
    this.from = from;
    this.forced = forced;
    this.argWindow = argWindow;
    this.layerLevel = layerLevel;
    this.sheets = [];
    this.currentMounted = false;
    this.isHorizontal = from === 'left' || from === 'right';
    this.element = argWindow.document.createElement('div');
    this.element.addEventListener('click', () => 0);
    this.element.style.position = 'relative';
    this.element.style.zIndex = String(layerLevel);
  }
  remove(sheet) {
    this.sheets.splice(this.sheets.indexOf(sheet), 1);
    this.update();
  }
  add(sheet) {
    if (sheet.onBottom) {
      this.sheets.push(sheet);
    } else {
      this.sheets.unshift(sheet);
    }
    this.update();
  }
  get isOpen() {
    return this.sheets.some(s => s.show);
  }
  update() {
    const newCurrent = this.sheets[0];
    const oldCurrent = this.current;
    if (newCurrent !== oldCurrent) {
      this.previous = this.previous || !this.currentMounted ? undefined : oldCurrent && !oldCurrent.enableAnimations ? undefined : oldCurrent;
      this.current = newCurrent;
    }
  }
  get enableAnimations() {
    const {
      current,
      previous
    } = this;
    return current ? current.enableAnimations : previous ? previous.enableAnimations : false;
  }
  get hasOuterContent() {
    const {
      current,
      previous
    } = this;
    return !!(current && current.outerElement && current.outerElement.hasChildNodes()) || !!(previous && previous.outerElement && previous.outerElement.hasChildNodes());
  }
}
exports.Layer = Layer;