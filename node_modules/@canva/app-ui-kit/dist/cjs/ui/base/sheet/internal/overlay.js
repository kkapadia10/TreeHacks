"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Overlay = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const classnames_1 = require("classnames");
const React = require("react");
const react_1 = require("react");
const react_transition_group_1 = require("react-transition-group");
const overlay_css_1 = require("./overlay.css");
const cssTransitionClassnames = {
    enter: overlay_css_1.default.overlayEnter,
    enterActive: overlay_css_1.default.overlayEnterActive,
    exit: overlay_css_1.default.overlayExit,
};
exports.Overlay = React.memo(function Overlay({ ariaLabel, show, opacity = 'default', transitionTimeout = 0, onClick, }) {
    const nodeRef = (0, react_1.useRef)(null);
    const captureRef = (0, react_1.useCallback)((newNode) => {
        var _a;
        newNode === null || newNode === void 0 ? void 0 : newNode.addEventListener('touchmove', preventDefault, { passive: false });
        (_a = nodeRef.current) === null || _a === void 0 ? void 0 : _a.removeEventListener('touchmove', preventDefault);
        nodeRef.current = newNode;
    }, []);
    const maybeOnClickAccessibleProp = onClick
        ? { tabIndex: 0, ['aria-label']: ariaLabel, role: 'button', onClick }
        : {};
    return ((0, jsx_runtime_1.jsx)(react_transition_group_1.CSSTransition, { in: show, timeout: transitionTimeout, unmountOnExit: true, mountOnEnter: true, classNames: cssTransitionClassnames, nodeRef: nodeRef, children: (0, jsx_runtime_1.jsx)("div", { ref: captureRef, className: (0, classnames_1.default)(overlay_css_1.default.overlay, {
                [overlay_css_1.default.enableAnimation]: transitionTimeout !== 0,
                [overlay_css_1.default.overlayTransparent]: opacity === 'transparent',
            }), ...maybeOnClickAccessibleProp }) }));
});
function preventDefault(event) {
    event.preventDefault();
}
