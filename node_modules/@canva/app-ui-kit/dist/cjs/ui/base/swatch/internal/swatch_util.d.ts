export type GradientStop = {
    color: string
    transparency?: number
    position?: number
};
export type FillObject = {
    type: 'linear';
    stops: GradientStop[];
    rotation: number
} | {
    type: 'radial';
    stops: GradientStop[];
    center: {
        top: number;
        left: number;
    }
};
export type Fill = readonly (string | undefined | FillObject)[] | 'circularSpectrum' | 'linearSpectrum';
export declare function isFillObject(color: unknown): color is FillObject;
export declare const toStripePosition: (index: number, totalStripes: number) => string;
export declare const toStripeWidth: (width: number, listSize: number) => string;
export declare const getValidGradientString: (color: string) => string;
export declare const generateSwatchLabel: ({ areAllColorsTransparent, colors, colorNames, rgbToCmyk, fill, isAtleastOneColorTransparent, areNoColorsApplied, }: {
    label?: string | undefined;
    areAllColorsTransparent?: boolean | undefined;
    colors?: readonly (string | FillObject | undefined)[] | undefined;
    colorNames?: ReadonlyMap<string, string> | undefined;
    rgbToCmyk?: ReadonlyMap<string, string> | undefined;
    fill: Fill;
    isAtleastOneColorTransparent?: boolean | undefined;
    areNoColorsApplied?: boolean | undefined;
}) => string;
export declare const gradientToCssBackground: (color: FillObject) => string;
export declare function useContrastingColors(colors: Fill, shouldContrastColor: boolean): "circularSpectrum" | (string | FillObject | undefined)[];
