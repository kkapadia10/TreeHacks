"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapToUnitSpace = exports.getSpaceValue = exports.unitSpaces = exports.isLargeOrNarrower = exports.isLargeOrWider = exports.isMediumOrNarrower = exports.isMediumOrWider = exports.isSmallOrNarrower = exports.isSmallOrWider = exports.isLargeViewport = exports.isMediumViewport = exports.isSmallViewport = exports.isDefaultViewport = exports.breakpointFromScreenWidth = exports.largeBreakpoint = exports.mediumBreakpoint = exports.smallBreakpoint = exports.Breakpoint = exports.baseUnit = void 0;
const metrics_css_1 = require("./metrics.css");
exports.baseUnit = parseInt(metrics_css_1.default.baseUnit, 10) || 8;
var Breakpoint;
(function (Breakpoint) {
    Breakpoint[Breakpoint["DEFAULT"] = 0] = "DEFAULT";
    Breakpoint[Breakpoint["SMALL"] = 1] = "SMALL";
    Breakpoint[Breakpoint["MEDIUM"] = 2] = "MEDIUM";
    Breakpoint[Breakpoint["LARGE"] = 3] = "LARGE";
})(Breakpoint || (exports.Breakpoint = Breakpoint = {}));
exports.smallBreakpoint = parseInt(metrics_css_1.default.smallBreakpoint, 10) || 600;
exports.mediumBreakpoint = parseInt(metrics_css_1.default.mediumBreakpoint, 10) || 900;
exports.largeBreakpoint = parseInt(metrics_css_1.default.largeBreakpoint, 10) || 1200;
const breakpointFromScreenWidth = (width) => {
    if (width >= exports.largeBreakpoint) {
        return Breakpoint.LARGE;
    }
    else if (width >= exports.mediumBreakpoint) {
        return Breakpoint.MEDIUM;
    }
    else if (width >= exports.smallBreakpoint) {
        return Breakpoint.SMALL;
    }
    else {
        return Breakpoint.DEFAULT;
    }
};
exports.breakpointFromScreenWidth = breakpointFromScreenWidth;
const isDefaultViewport = (breakpoint) => breakpoint === Breakpoint.DEFAULT;
exports.isDefaultViewport = isDefaultViewport;
const isSmallViewport = (breakpoint) => breakpoint === Breakpoint.SMALL;
exports.isSmallViewport = isSmallViewport;
const isMediumViewport = (breakpoint) => breakpoint === Breakpoint.MEDIUM;
exports.isMediumViewport = isMediumViewport;
const isLargeViewport = (breakpoint) => breakpoint === Breakpoint.LARGE;
exports.isLargeViewport = isLargeViewport;
const isSmallOrWider = (breakpoint) => breakpoint >= Breakpoint.SMALL;
exports.isSmallOrWider = isSmallOrWider;
const isSmallOrNarrower = (breakpoint) => breakpoint <= Breakpoint.SMALL;
exports.isSmallOrNarrower = isSmallOrNarrower;
const isMediumOrWider = (breakpoint) => breakpoint >= Breakpoint.MEDIUM;
exports.isMediumOrWider = isMediumOrWider;
const isMediumOrNarrower = (breakpoint) => breakpoint <= Breakpoint.MEDIUM;
exports.isMediumOrNarrower = isMediumOrNarrower;
const isLargeOrWider = (breakpoint) => breakpoint >= Breakpoint.LARGE;
exports.isLargeOrWider = isLargeOrWider;
const isLargeOrNarrower = (breakpoint) => breakpoint <= Breakpoint.LARGE;
exports.isLargeOrNarrower = isLargeOrNarrower;
exports.unitSpaces = ['0', '0.5u', '1u', '1.5u', '2u', '3u', '4u', '6u', '8u', '12u'];
const getSpaceValue = (space) => {
    return spaceValues[space];
};
exports.getSpaceValue = getSpaceValue;
const spaceValues = {
    ['0']: metrics_css_1.default.space0,
    ['0.5u']: metrics_css_1.default.space050,
    ['1u']: metrics_css_1.default.space1,
    ['1.5u']: metrics_css_1.default.space150,
    ['2u']: metrics_css_1.default.space2,
    ['3u']: metrics_css_1.default.space3,
    ['4u']: metrics_css_1.default.space4,
    ['6u']: metrics_css_1.default.space6,
    ['8u']: metrics_css_1.default.space8,
    ['12u']: metrics_css_1.default.space12,
};
const legacySpaces = [
    'none',
    'xxxsmall',
    'xxsmall',
    'xsmall',
    'small',
    'medium',
    'large',
    'xlarge',
    'xxlarge',
    'xxxlarge',
];
const mapToUnitSpace = (legacySpace) => {
    return spaceMap[legacySpace];
};
exports.mapToUnitSpace = mapToUnitSpace;
const spaceMap = {
    ['none']: '0',
    ['xxxsmall']: '0.5u',
    ['xxsmall']: '1u',
    ['xsmall']: '1.5u',
    ['small']: '2u',
    ['medium']: '3u',
    ['large']: '4u',
    ['xlarge']: '6u',
    ['xxlarge']: '8u',
    ['xxxlarge']: '12u',
};
