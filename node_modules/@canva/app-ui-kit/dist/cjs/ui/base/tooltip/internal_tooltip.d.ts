import type Popper from 'popper.js';
import * as React from 'react';
import type { TouchOrMouseEvent } from '../button/touch_or_mouse_event/touch_or_mouse_event';
import type { KeyCombination } from '../key_combinations/key_combination';
import type { BoundariesElement } from '../pin/pin';
import type { Direction } from '../provider/provider';
import type { PixelDensitySource } from '../responsive_image/responsive_image';
import type { TooltipState } from './tooltip_presenter';
export type Placement = 'top' | 'right' | 'bottom' | 'left';
export type Alignment = 'start' | 'end' | 'center';
export type TriggerProps = {
    tooltipId: string
    tabIndex: 0
    onFocus(): void
    onBlur(): void
    onMouseEnter(): void
    onMouseLeave(): void
    onMouseDown?(): void
};
export type ToggletipTriggerProps = {
    onClick(e: TouchOrMouseEvent<HTMLButtonElement>): void
    onBlur(): void
};
type TooltipConditionalProps = {
    mode?: 'tooltip';
    children?: React.ReactNode | RenderTrigger
    forwardedRef?: React.ForwardedRef<HTMLDivElement>;
};
type ToggleTipConditionalProps = {
    mode: 'toggletip';
    children: ToggleTipRenderTrigger
    forwardedRef?: never;
};
export type ConditionalProps = TooltipConditionalProps | ToggleTipConditionalProps;
export type RenderTrigger = (props: TriggerProps) => React.ReactNode;
export type ToggleTipRenderTrigger = (props: ToggletipTriggerProps) => React.ReactNode;
export type BaseTooltipProps = {
    label: string;
    align?: Alignment
    overflowBoundariesElement?: BoundariesElement;
    shortcut?: KeyCombination
    description?: string
    thumbnail?: string | PixelDensitySource[]
    expandTooltipWrapper?: boolean
};
type InternalTooltipProps = {
    placement?: Placement;
    disabled?: boolean;
    closeOnClick?: boolean;
} & BaseTooltipProps;
export type TooltipProps = InternalTooltipProps & Pick<TooltipConditionalProps, 'children'>;
export declare function InternalTooltip(props: InternalTooltipProps & ConditionalProps): import("react/jsx-runtime").JSX.Element;
export type TriggeredTooltipProps = {
    placement?: Placement;
    state: TooltipState;
    autoclose?: boolean;
    arrow?: boolean;
    lineClamp?: number;
} & BaseTooltipProps & {
    children?: React.ReactNode;
};
export declare class TriggeredTooltip extends React.Component<TriggeredTooltipProps> {
    static readonly defaultProps: Pick<TriggeredTooltipProps, 'autoclose'>;
    private static readonly fadeOutDelay;
    private readonly presenter;
    render(): import("react/jsx-runtime").JSX.Element;
    componentDidMount(): void;
}
export type TooltipContentProps = Pick<BaseTooltipProps, 'label' | 'align' | 'shortcut' | 'description' | 'thumbnail'> & {
    id?: string;
    lineClamp?: number;
    withLayout?: boolean;
    mode?: 'tooltip' | 'toggletip';
};
export declare function TooltipContent(props: TooltipContentProps): import("react/jsx-runtime").JSX.Element;
export type TooltipArrowProps = {
    withLayout?: boolean;
};
export declare function TooltipArrow({ withLayout }: TooltipArrowProps): import("react/jsx-runtime").JSX.Element;
type StatelessTooltipProps = TooltipContentProps & BaseTooltipProps & {
    children?: React.ReactNode;
    open: boolean;
    arrow?: boolean;
    refObj?: Popper.ReferenceObject;
    placement?: Popper.Placement;
    direction?: Direction;
    expandTooltipWrapper?: boolean
};
export declare function StatelessTooltip({ children, placement, open, arrow, refObj, overflowBoundariesElement, direction, expandTooltipWrapper, ...contentProps }: StatelessTooltipProps): import("react/jsx-runtime").JSX.Element;
export {};
