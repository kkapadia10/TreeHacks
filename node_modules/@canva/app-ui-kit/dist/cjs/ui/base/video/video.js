"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VideoA11ySafe = exports.Video = exports.canA11ySafeVideoAutoplay = exports.createVideoA11ySafeComponent = exports.createVideoComponent = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const compose_react_refs_1 = require("@seznam/compose-react-refs");
const video_src_cleanup_1 = require('../../../base/platform_quirks/video_src_cleanup');
const React = require("react");
const supports_animation_1 = require('../animation/supports_animation');
const bootstrap_1 = require('../bootstrap/bootstrap');
const ui_bootstrap_proto_1 = require('../bootstrap/ui_bootstrap_proto');
function setMutedAndPlaybackRate(video, muted, playbackRate) {
    video.muted = muted;
    video.playbackRate = playbackRate;
    video.defaultPlaybackRate = playbackRate;
}
function createVideoComponent(cleanup = video_src_cleanup_1.cleanupVideoSrcOnUnmount) {
    const Video = React.forwardRef((props, ref) => {
        const videoRef = React.useRef(null);
        const { muted = false, playbackRate = 1, ariaLabel, ariaHidden, ...rest } = props;
        React.useEffect(() => {
            const video = videoRef.current;
            if (video) {
                setMutedAndPlaybackRate(video, muted, playbackRate);
            }
        }, [muted, playbackRate]);
        const onVideoRef = React.useCallback((ref) => {
            const oldRef = videoRef.current;
            videoRef.current = ref;
            if (oldRef && ref !== oldRef) {
                ref && setMutedAndPlaybackRate(ref, oldRef.muted, oldRef.playbackRate);
                cleanup(oldRef);
            }
        }, []);
        return ((0, jsx_runtime_1.jsx)(
            "video",
            { ref: (0, compose_react_refs_1.default)(onVideoRef, ref), "aria-label": ariaLabel, "aria-hidden": ariaHidden, ...rest }
        ));
    });
    Video.displayName = 'Video';
    return Video;
}
exports.createVideoComponent = createVideoComponent;
function createVideoA11ySafeComponent(Video, prefersReducedMotion = supports_animation_1.prefersReducedMotion) {
    const autoPlayingVideos = [];
    const addAutoplayingVideo = (video) => autoPlayingVideos.push(video);
    const maybeRemoveAutoplayingVideo = (video) => {
        const index = autoPlayingVideos.indexOf(video);
        if (index >= 0) {
            autoPlayingVideos.splice(index, 1);
        }
    };
    const maybeSuppressPlayError = (e) => {
        if (e.name === 'NotAllowedError') {
            return;
        }
        throw e;
    };
    window.addEventListener('blur', () => autoPlayingVideos.forEach(video => video.pause()));
    window.addEventListener('focus', () => autoPlayingVideos.forEach(video => video.play().catch(maybeSuppressPlayError)));
    const enabledAutoPlay = canA11ySafeVideoAutoplay(prefersReducedMotion);
    const VideoA11ySafe = React.forwardRef((props, ref) => {
        const videoRef = React.useRef(null);
        const { autoPlay = false, ...omitAutoPlayProps } = props;
        React.useEffect(() => {
            const video = videoRef.current;
            if (video) {
                video.autoplay = autoPlay && enabledAutoPlay;
                if (video.autoplay) {
                    addAutoplayingVideo(video);
                }
                else {
                    maybeRemoveAutoplayingVideo(video);
                }
                return () => maybeRemoveAutoplayingVideo(video);
            }
        }, [autoPlay]);
        return (0, jsx_runtime_1.jsx)(Video, { ref: (0, compose_react_refs_1.default)(videoRef, ref), ...omitAutoPlayProps });
    });
    return VideoA11ySafe;
}
exports.createVideoA11ySafeComponent = createVideoA11ySafeComponent;
function canA11ySafeVideoAutoplay(prefersReducedMotion = supports_animation_1.prefersReducedMotion) {
    var _a;
    const autoplayVideosSetting = (_a = bootstrap_1.bootstrap.autoplayVideos) !== null && _a !== void 0 ? _a : ui_bootstrap_proto_1.AutoplayVideos.ADAPTIVE;
    return (bootstrap_1.bootstrap.enableAnimations
        && (autoplayVideosSetting === ui_bootstrap_proto_1.AutoplayVideos.AUTOPLAY
            || (autoplayVideosSetting === ui_bootstrap_proto_1.AutoplayVideos.ADAPTIVE && !prefersReducedMotion())));
}
exports.canA11ySafeVideoAutoplay = canA11ySafeVideoAutoplay;
exports.Video = createVideoComponent();
exports.VideoA11ySafe = createVideoA11ySafeComponent(exports.Video);
