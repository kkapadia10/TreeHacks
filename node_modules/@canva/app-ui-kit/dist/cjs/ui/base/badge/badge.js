"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IconBadgeContainer = exports.ButtonBadge = exports.SecondaryButtonBadge = exports.PrimaryButtonBadge = exports.badgeButtonTones = exports.Badge = exports.tones = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const classnames_1 = require("classnames");
const mobx_react_1 = require("mobx-react");
const React = require("react");
const access_mode_state_1 = require('../a11y/access_mode_state/access_mode_state');
const box_1 = require('../box/box');
const device_capabilities_1 = require('../device_capabilities/device_capabilities');
const focusable_1 = require('../focusable/focusable');
const badge_css_1 = require("./badge.css");
exports.tones = [
    'primary',
    'contrast',
    'neutral',
    'positive',
    'warn',
    'info',
    'critical',
    'neutralLow',
    'positiveLow',
    'warnLow',
    'infoLow',
    'criticalLow',
];
const Badge = ({ className, icon, text, shape = 'regular', tone, ariaLabel, }) => ((0, jsx_runtime_1.jsxs)(box_1.Box, { tagName: "span", background: tone !== 'primary' ? tone : undefined, className: (0, classnames_1.default)(badge_css_1.default.badge, {
        [badge_css_1.default.primary]: tone === 'primary',
        [badge_css_1.default.circle]: shape === 'circle',
    }, className), ariaLabel: ariaLabel, children: [icon && ((0, jsx_runtime_1.jsx)("span", { className: (0, classnames_1.default)(badge_css_1.default.icon, text && badge_css_1.default.withText), children: typeof icon === 'function' ? icon() : icon })), text] }));
exports.Badge = Badge;
function preventFocusOutline() {
    access_mode_state_1.accessModeState.setAccessMode('mouse');
}
exports.badgeButtonTones = ['primary', 'secondary'];
function isMenuButtonProps(props) {
    return props.ariaHasPopup === 'menu';
}
const PrimaryButtonBadge = (props) => ((0, jsx_runtime_1.jsx)(exports.ButtonBadge, { ...props, tone: "primary" }));
exports.PrimaryButtonBadge = PrimaryButtonBadge;
const SecondaryButtonBadge = (props) => ((0, jsx_runtime_1.jsx)(exports.ButtonBadge, { ...props, tone: "secondary" }));
exports.SecondaryButtonBadge = SecondaryButtonBadge;
const ButtonBadge = ({ className, disabled, onMouseDown, onClick, children, tone, ariaLabel, focusRef, ...extraProps }) => {
    const buttonRef = (0, focusable_1.useFocusableRef)(focusRef);
    const onMouseDownHandler = React.useCallback(e => {
        if (onMouseDown) {
            onMouseDown(e);
        }
        preventFocusOutline();
    }, [onMouseDown]);
    return ((0, jsx_runtime_1.jsx)(mobx_react_1.Observer, { children: () => ((0, jsx_runtime_1.jsx)("button", { ref: buttonRef, onClick: onClick, onMouseDown: onMouseDownHandler, disabled: disabled, className: (0, classnames_1.default)(badge_css_1.default.buttonBadge, (0, badge_css_1.getStyle)(`${tone}Button`), className, {
                [badge_css_1.default.hoverSupported]: (0, device_capabilities_1.canHover)(),
                [badge_css_1.default.hideOutline]: access_mode_state_1.accessModeState.isMouseMode,
                [badge_css_1.default.disabled]: disabled,
                [badge_css_1.default.expanded]: isMenuButtonProps(extraProps) ? extraProps.expanded : undefined,
            }), "aria-label": ariaLabel, "aria-expanded": isMenuButtonProps(extraProps) ? extraProps.expanded : undefined, "aria-controls": isMenuButtonProps(extraProps) ? extraProps.ariaControls : undefined, "aria-haspopup": isMenuButtonProps(extraProps) ? extraProps.ariaHasPopup : undefined, children: children })) }));
};
exports.ButtonBadge = ButtonBadge;
const IconBadgeContainer = ({ className, Icon, size, children, }) => {
    return ((0, jsx_runtime_1.jsxs)("div", { className: (0, classnames_1.default)(badge_css_1.default.iconContainer, (0, badge_css_1.getStyle)(size), className), children: [(0, jsx_runtime_1.jsx)(Icon, { size: size, className: badge_css_1.default.badgeContainerMainIcon }), children] }));
};
exports.IconBadgeContainer = IconBadgeContainer;
