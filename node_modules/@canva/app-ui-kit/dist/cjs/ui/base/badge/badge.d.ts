import * as React from 'react';
import type { TouchOrMouseEventHandler } from '../button/button';
import type { Focusable } from '../focusable/focusable';
import type { Icon } from '../icons/icons';
export type Shape = 'regular' | 'circle';
export type Tone = (typeof tones)[number];
export declare const tones: readonly ["primary", "contrast", "neutral", "positive", "warn", "info", "critical", "neutralLow", "positiveLow", "warnLow", "infoLow", "criticalLow"];
export type BadgeProps = RegularBadgeProps | CircleBadgeProps;
type CommonBadgeProps = {
    className?: string
    text?: string | JSX.Element
    icon?: React.ReactNode | (() => React.ReactNode)
    ariaLabel?: string
    shape?: Shape
    tone: Tone
};
type RegularBadgeProps = CommonBadgeProps & {
    shape?: 'regular';
    ariaLabel?: string;
};
type CircleBadgeProps = CommonBadgeProps & {
    shape: 'circle';
    ariaLabel: string;
};
export declare const Badge: ({ className, icon, text, shape, tone, ariaLabel, }: BadgeProps) => import("react/jsx-runtime").JSX.Element;
export declare const badgeButtonTones: readonly ["primary", "secondary"];
type BadgeButtonTone = (typeof badgeButtonTones)[number];
type ButtonBadgeProps = {
    className?: string;
    disabled?: boolean;
    onClick?: TouchOrMouseEventHandler<any>;
    focusRef?: React.Ref<Focusable>;
    onMouseDown?(e: {
        stopPropagation(): void;
    }): void;
    children: React.ReactNode;
    ariaLabel?: string
    ariaHasPopup?: 'menu' | 'dialog'
} & ({
    ariaHasPopup?: 'dialog';
} | MenuButtonProps);
type MenuButtonProps = {
    ariaHasPopup: 'menu';
    expanded: boolean;
    ariaControls?: string;
};
export declare const PrimaryButtonBadge: (props: ButtonBadgeProps) => import("react/jsx-runtime").JSX.Element;
export declare const SecondaryButtonBadge: (props: ButtonBadgeProps) => import("react/jsx-runtime").JSX.Element;
export declare const ButtonBadge: ({ className, disabled, onMouseDown, onClick, children, tone, ariaLabel, focusRef, ...extraProps }: ButtonBadgeProps & {
    tone: BadgeButtonTone;
}) => import("react/jsx-runtime").JSX.Element;
type BadgeContainerIconSize = 'small' | 'medium' | 'large';
export declare const IconBadgeContainer: <T extends BadgeContainerIconSize>({ className, Icon, size, children, }: {
    className?: string | undefined;
    Icon: Icon<T>;
    size: T;
    children?: any;
}) => import("react/jsx-runtime").JSX.Element;
export {};
