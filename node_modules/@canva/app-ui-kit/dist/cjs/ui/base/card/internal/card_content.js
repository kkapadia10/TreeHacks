"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CardPreTitle = exports.CardDescription = exports.CardTitle = exports.CardContent = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const classnames_1 = require("classnames");
const mobx_react_1 = require("mobx-react");
const React = require("react");
const layout_1 = require('../../layout/layout');
const typography_1 = require('../../typography/typography');
const card_css_1 = require("../card.css");
const card_context_1 = require("./card_context");
const CardContent = function CardContent({ titleId, descriptionId, title, description, preTitle, avatar, }) {
    const titleAndDescription = ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [typeof preTitle !== 'string' ? preTitle : (0, jsx_runtime_1.jsx)(exports.CardPreTitle, { children: preTitle }), title != null && typeof title !== 'string'
                ? ((0, jsx_runtime_1.jsx)("div", { className: card_css_1.default.title, id: titleId, children: title }))
                : ((0, jsx_runtime_1.jsx)(exports.CardTitle, { id: titleId, lineClamp: description ? 1 : 2, children: title })), description != null && ((0, jsx_runtime_1.jsx)("div", { className: card_css_1.default.description, id: descriptionId, children: typeof description === 'string'
                    ? (0, jsx_runtime_1.jsx)(exports.CardDescription, { children: description })
                    : description }))] }));
    if (avatar) {
        return ((0, jsx_runtime_1.jsxs)(layout_1.Columns, { spacing: "1u", children: [(0, jsx_runtime_1.jsx)(layout_1.Column, { width: "content", children: avatar }), (0, jsx_runtime_1.jsx)(layout_1.Column, { children: titleAndDescription })] }));
    }
    return (0, jsx_runtime_1.jsx)(layout_1.Rows, { spacing: "0", children: titleAndDescription });
};
exports.CardContent = CardContent;
exports.CardTitle = (0, mobx_react_1.observer)(function CardTitle(props) {
    const { size } = (0, card_context_1.useCardConfiguration)();
    const { className, ...rest } = props;
    return ((0, jsx_runtime_1.jsx)(typography_1.Text, { weight: "bold", size: size === 'medium' ? 'medium' : 'small', lineClamp: 2, className: (0, classnames_1.default)(card_css_1.default.title, className), ...rest }));
});
exports.CardDescription = (0, mobx_react_1.observer)(function CardDescription(props) {
    return (0, jsx_runtime_1.jsx)(typography_1.Text, { size: "small", tone: "secondary", lineClamp: 1, ...props });
});
exports.CardPreTitle = (0, mobx_react_1.observer)(function CardPreTitle(props) {
    return ((0, jsx_runtime_1.jsx)(typography_1.Text, { size: "xsmall", tone: "secondary", capitalization: "uppercase", lineClamp: 1, ...props }));
});
