import * as React from 'react';
import type { IconThumbnailProps } from '../../thumbnail/icon_thumbnail/icon_thumbnail';
import type { ImageProps } from '../../thumbnail/image/image';
import type { ImageThumbnailProps, LoadingState as ImageLoadingState } from '../../thumbnail/image_thumbnail/image_thumbnail';
export type LoadingState = ImageLoadingState;
type ThumbnailOptions = {
    ImageComponent?: ({ id, className, alt, crossOrigin, src }: ImageProps) => JSX.Element
    className?: string
    sharp?: boolean
    elementTiming?: string
};
export declare const CardPlaceholder: ({ index }: {
    index?: number | undefined;
}) => import("react/jsx-runtime").JSX.Element;
export declare const CardIconThumbnail: (props: Pick<IconThumbnailProps, 'Icon' | 'size'>) => import("react/jsx-runtime").JSX.Element;
type CardImageThumbnailProps = Pick<ImageThumbnailProps, 'ImageComponent' | 'alt' | 'loadingState' | 'onImageLoad' | 'placeholder' | 'fallback' | 'crossOrigin'> & {
    url: string
} & ThumbnailOptions;
export declare const CardImageThumbnail: React.NamedExoticComponent<CardImageThumbnailProps>;
export declare const CardVideoThumbnail: React.ForwardRefExoticComponent<{
    videoUrl: string
    videoLoadingState?: ImageLoadingState | undefined
    loadVideo?: ((videoUrl: string) => Promise<HTMLVideoElement>) | undefined
    whenToPlay: 'always' | 'on-hover'
    VideoComponent?: ((props: Pick<React.VideoHTMLAttributes<HTMLVideoElement>, 'autoPlay' | 'className' | 'controls' | 'loop' | 'muted' | 'playsInline' | 'src'> & {
        ref?: React.ForwardedRef<HTMLVideoElement>;
    }) => JSX.Element | null) | undefined
    imageUrl?: string | undefined
    imageLoadingState?: ImageLoadingState | undefined
    imageFallback?: JSX.Element | undefined
    imagePlaceholder?: JSX.Element | undefined
    imageAlt?: string | undefined
} & ThumbnailOptions & React.RefAttributes<HTMLVideoElement>>;
export {};
