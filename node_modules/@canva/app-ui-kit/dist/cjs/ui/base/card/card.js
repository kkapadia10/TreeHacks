"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WithCardState = exports.HorizontalCard = exports.ContainCard = exports.CoverCard = exports.StatelessCardMenuButton = exports.CardVideoThumbnail = exports.CardTitle = exports.CardPreTitle = exports.CardPlaceholder = exports.CardMenuButton = exports.CardImageThumbnail = exports.CardIconThumbnail = exports.CardDescription = exports.CardDecorator = exports.CardCheckbox = exports.CardButtonGroup = exports.CardButton = exports.CardBottomBadge = exports.CardBadgeGroup = exports.useCardMouseDown = exports.useCardHover = exports.useCardFocus = exports.useCardConfiguration = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const classnames_1 = require("classnames");
const mobx_react_1 = require("mobx-react");
const React = require("react");
const card_css_1 = require("./card.css");
const card_badge_group_1 = require("./decorators/card_badge_group");
Object.defineProperty(exports, "CardBadgeGroup", { enumerable: true, get: function () { return card_badge_group_1.CardBadgeGroup; } });
const card_bottom_badge_1 = require("./decorators/card_bottom_badge");
Object.defineProperty(exports, "CardBottomBadge", { enumerable: true, get: function () { return card_bottom_badge_1.CardBottomBadge; } });
const card_button_1 = require("./decorators/card_button");
Object.defineProperty(exports, "CardButton", { enumerable: true, get: function () { return card_button_1.CardButton; } });
Object.defineProperty(exports, "CardButtonGroup", { enumerable: true, get: function () { return card_button_1.CardButtonGroup; } });
Object.defineProperty(exports, "CardMenuButton", { enumerable: true, get: function () { return card_button_1.CardMenuButton; } });
Object.defineProperty(exports, "StatelessCardMenuButton", { enumerable: true, get: function () { return card_button_1.StatelessCardMenuButton; } });
const card_checkbox_1 = require("./decorators/card_checkbox");
Object.defineProperty(exports, "CardCheckbox", { enumerable: true, get: function () { return card_checkbox_1.CardCheckbox; } });
const card_content_1 = require("./internal/card_content");
Object.defineProperty(exports, "CardDescription", { enumerable: true, get: function () { return card_content_1.CardDescription; } });
Object.defineProperty(exports, "CardPreTitle", { enumerable: true, get: function () { return card_content_1.CardPreTitle; } });
Object.defineProperty(exports, "CardTitle", { enumerable: true, get: function () { return card_content_1.CardTitle; } });
const card_context_1 = require("./internal/card_context");
Object.defineProperty(exports, "useCardConfiguration", { enumerable: true, get: function () { return card_context_1.useCardConfiguration; } });
Object.defineProperty(exports, "useCardFocus", { enumerable: true, get: function () { return card_context_1.useCardFocus; } });
Object.defineProperty(exports, "useCardHover", { enumerable: true, get: function () { return card_context_1.useCardHover; } });
Object.defineProperty(exports, "useCardMouseDown", { enumerable: true, get: function () { return card_context_1.useCardMouseDown; } });
const card_thumbnail_1 = require("./internal/card_thumbnail");
Object.defineProperty(exports, "CardIconThumbnail", { enumerable: true, get: function () { return card_thumbnail_1.CardIconThumbnail; } });
Object.defineProperty(exports, "CardImageThumbnail", { enumerable: true, get: function () { return card_thumbnail_1.CardImageThumbnail; } });
Object.defineProperty(exports, "CardPlaceholder", { enumerable: true, get: function () { return card_thumbnail_1.CardPlaceholder; } });
Object.defineProperty(exports, "CardVideoThumbnail", { enumerable: true, get: function () { return card_thumbnail_1.CardVideoThumbnail; } });
const internal_card_1 = require("./internal/internal_card");
Object.defineProperty(exports, "CardDecorator", { enumerable: true, get: function () { return internal_card_1.CardDecorator; } });
exports.CoverCard = (0, card_context_1.withCardContextProvider)((0, mobx_react_1.observer)(function CoverCard({ thumbnailHeight, thumbnailBackground = 'none', size, border, sharp, disabled, hasHoverEffect: hasHoverEffectProp, selectable, ...props }) {
    (0, card_context_1.useCardConfigurationSetter)({
        size: size !== null && size !== void 0 ? size : 'medium',
        sharp: sharp !== null && sharp !== void 0 ? sharp : false,
        border: border !== null && border !== void 0 ? border : true,
        disabled: !!disabled,
        badgeTransition: 'slide',
        hasHoverEffect: hasHoverEffectProp !== null && hasHoverEffectProp !== void 0 ? hasHoverEffectProp : true,
    });
    const { hasHoverEffect } = (0, card_context_1.useCardConfiguration)();
    const outerStyle = thumbnailHeight ? { height: thumbnailHeight } : undefined;
    return ((0, jsx_runtime_1.jsx)(internal_card_1.InternalCardWithDetails, { ...props, outerStyle: outerStyle, outerClassName: (0, classnames_1.default)({
            [card_css_1.default.contrastOnLight]: thumbnailBackground === 'contrastOnLight',
            [card_css_1.default.contrastOnDark]: thumbnailBackground === 'contrastOnDark',
            [card_css_1.default.secondaryBackground]: thumbnailBackground === 'secondary',
        }), containerClassName: hasHoverEffect ? card_css_1.default.coverHoverTrigger : undefined, selectionIsPrimaryAction: selectable }));
}));
exports.CoverCard.displayName = 'CoverCard';
exports.ContainCard = (0, card_context_1.withCardContextProvider)((0, mobx_react_1.observer)(function ContainCard({ thumbnailRatio, thumbnailBackground = 'secondary', size, border, disabled, hasHoverEffect: hasHoverEffectProp, selectable, ...props }) {
    (0, card_context_1.useCardConfigurationSetter)({
        size: size !== null && size !== void 0 ? size : 'medium',
        sharp: false,
        border: border !== null && border !== void 0 ? border : true,
        disabled: !!disabled,
        badgeTransition: 'fade',
        hasHoverEffect: hasHoverEffectProp !== null && hasHoverEffectProp !== void 0 ? hasHoverEffectProp : true,
    });
    const { hasHoverEffect } = (0, card_context_1.useCardConfiguration)();
    const innerStyle = React.useMemo(() => getContainCardDimensions(thumbnailRatio), [thumbnailRatio]);
    return ((0, jsx_runtime_1.jsx)(internal_card_1.InternalCardWithDetails, { ...props, outerClassName: (0, classnames_1.default)(card_css_1.default.containVariant, {
            [card_css_1.default.compact]: size === 'small',
            [card_css_1.default.contrastOnLight]: thumbnailBackground === 'contrastOnLight',
            [card_css_1.default.contrastOnDark]: thumbnailBackground === 'contrastOnDark',
            [card_css_1.default.secondaryBackground]: thumbnailBackground === 'secondary',
        }), containerClassName: hasHoverEffect ? card_css_1.default.containHoverTrigger : undefined, innerClassName: (0, classnames_1.default)({ [card_css_1.default.tallThumbnail]: thumbnailRatio < 1 }), innerStyle: innerStyle, selectionIsPrimaryAction: selectable }));
}));
exports.ContainCard.displayName = 'ContainCard';
exports.HorizontalCard = (0, card_context_1.withCardContextProvider)(function HorizontalCard({ thumbnailSize, size, disabled, sharp, border, badgeTransition, hasHoverEffect, selectable, ...props }) {
    (0, card_context_1.useCardConfigurationSetter)({
        size: size !== null && size !== void 0 ? size : 'medium',
        disabled: !!disabled,
        sharp: sharp !== null && sharp !== void 0 ? sharp : false,
        border: border !== null && border !== void 0 ? border : true,
        badgeTransition: badgeTransition !== null && badgeTransition !== void 0 ? badgeTransition : 'slide',
        hasHoverEffect: hasHoverEffect !== null && hasHoverEffect !== void 0 ? hasHoverEffect : true,
    });
    return ((0, jsx_runtime_1.jsx)(internal_card_1.InternalHorizontalCard, { selectionIsPrimaryAction: selectable, thumbnailSize: thumbnailSize, ...props }));
});
exports.HorizontalCard.displayName = 'HorizontalCard';
exports.WithCardState = (0, mobx_react_1.observer)(function WithCardState({ children }) {
    const state = {
        isHovered: (0, card_context_1.useCardHover)(),
        isFocused: (0, card_context_1.useCardFocus)(),
        isMouseDown: (0, card_context_1.useCardMouseDown)(),
    };
    return children(state);
});
function getContainCardDimensions(thumbnailRatio) {
    const containerRatio = 4 / 3;
    let height;
    let width;
    if (thumbnailRatio > 100 / 15) {
        width = '100%';
        height = `${(100 * containerRatio) / (100 / 15)}%`;
    } else if (thumbnailRatio > containerRatio) {
        width = '100%';
        height = `${(100 * containerRatio) / thumbnailRatio}%`;
    }
    else if (thumbnailRatio >= 1) {
        width = `${(100 * thumbnailRatio) / containerRatio}%`;
        height = '100%';
    }
    else {
        width = '75%';
        height = `${100 / thumbnailRatio}%`;
    }
    return { width, height };
}
