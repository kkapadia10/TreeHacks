import * as React from 'react';
import { CardBadgeGroup } from './decorators/card_badge_group';
import { CardBottomBadge } from './decorators/card_bottom_badge';
import { CardButton, CardButtonGroup, CardMenuButton, StatelessCardMenuButton } from './decorators/card_button';
import { CardCheckbox } from './decorators/card_checkbox';
import type { DetailsProps } from './internal/card_content';
import { CardDescription, CardPreTitle, CardTitle } from './internal/card_content';
import { useCardConfiguration, useCardFocus, useCardHover, useCardMouseDown } from './internal/card_context';
import { CardIconThumbnail, CardImageThumbnail, CardPlaceholder, CardVideoThumbnail } from './internal/card_thumbnail';
import type { ButtonProps } from './internal/internal_card';
import { CardDecorator } from './internal/internal_card';
export { useCardConfiguration, useCardFocus, useCardHover, useCardMouseDown };
export type CardSize = 'small' | 'medium';
export type CardComponentType = typeof CoverCard | typeof ContainCard | typeof HorizontalCard;
export { CardBadgeGroup, CardBottomBadge, CardButton, CardButtonGroup, CardCheckbox, CardDecorator, CardDescription, CardIconThumbnail, CardImageThumbnail, CardMenuButton, CardPlaceholder, CardPreTitle, CardTitle, CardVideoThumbnail, StatelessCardMenuButton, };
type PublicProps = ButtonProps & ConfigurationProps & {
    children?: React.ReactNode;
};
type ConfigurationProps = {
    size?: CardSize
    border?: boolean
    disabled?: boolean
    hasHoverEffect?: boolean
    selectable?: boolean
    selected?: boolean
};
type ThumbnailBackgroundColor = 'none' | 'secondary' | 'contrastOnLight' | 'contrastOnDark';
export type CoverCardProps = PublicProps & DetailsProps & {
    sharp?: boolean
    thumbnailHeight?: number | 'unset'
    ariaLabel?: string
    thumbnailBackground?: ThumbnailBackgroundColor
};
export declare const CoverCard: {
    (props: CoverCardProps): import("react/jsx-runtime").JSX.Element;
    displayName: string;
};
export type ContainCardProps = PublicProps & Omit<DetailsProps, 'avatar'> & {
    thumbnailRatio: number
    thumbnailBackground?: ThumbnailBackgroundColor
};
export declare const ContainCard: {
    (props: ContainCardProps): import("react/jsx-runtime").JSX.Element;
    displayName: string;
};
export type HorizontalCardProps = PublicProps & Omit<DetailsProps, 'avatar'> & {
    thumbnailSize?: 'small' | 'medium' | number
    sharp?: boolean
    badgeTransition?: 'fade' | 'slide'
    bleedX?: boolean
};
export declare const HorizontalCard: {
    (props: HorizontalCardProps): import("react/jsx-runtime").JSX.Element;
    displayName: string;
};
type WithCardStateProps = {
    children: (state: {
        isHovered?: boolean;
        isFocused?: boolean;
        isMouseDown?: boolean;
    }) => React.ReactElement;
};
export declare const WithCardState: ({ children }: WithCardStateProps) => React.ReactElement<any, string | React.JSXElementConstructor<any>>;
