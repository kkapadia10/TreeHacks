import * as React from 'react';
import type { TouchOrMouseEvent } from '../../button/button';
import type { DetailsProps } from './card_content';
export type ButtonProps = {
    onClick?: (event: TouchOrMouseEvent<any>) => void
    href?: string
    target?: string
    ariaControls?: string
    ariaHasPopup?: 'menu'
    ariaExpanded?: boolean
    ariaPressed?: boolean
    buttonAriaLabel?: string
    buttonAriaLabelledBy?: string
    draggable?: boolean
    onDragStart?: React.DragEventHandler
    onContextMenu?: (e: TouchOrMouseEvent<any>) => void
    buttonId?: string
    buttonRef?: React.Ref<HTMLElement>
};
type InternalProps = ButtonProps & {
    children?: React.ReactNode;
    containerClassName?: string;
    ariaLabel?: string;
    innerClassName?: string;
    outerClassName?: string;
    innerStyle?: React.CSSProperties;
    outerStyle?: React.CSSProperties;
    trackHoverState?: boolean;
    selected?: boolean;
    selectionIsPrimaryAction?: boolean;
};
type InternalCardWithDetailsProps = InternalProps & DetailsProps;
type InternalHorizontalCardProps = ButtonProps & DetailsProps & {
    children?: React.ReactNode;
    selected?: boolean;
    selectionIsPrimaryAction?: boolean;
    thumbnailSize?: 'small' | 'medium' | number
    bleedX?: boolean;
};
export declare const InternalCardWithDetails: (props: InternalCardWithDetailsProps) => import("react/jsx-runtime").JSX.Element;
export declare const InternalCard: (props: InternalProps) => import("react/jsx-runtime").JSX.Element;
export declare const InternalHorizontalCard: (props: InternalHorizontalCardProps) => import("react/jsx-runtime").JSX.Element;
export declare const CardDecorator: ({ children }: {
    children: React.ReactNode;
}) => import("react/jsx-runtime").JSX.Element;
export {};
