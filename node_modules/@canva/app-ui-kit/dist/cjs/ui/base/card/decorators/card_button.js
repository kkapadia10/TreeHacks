"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StatelessCardMenuButton = exports.CardMenuButton = exports.CardButton = exports.CardButtonGroup = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const mobx_1 = require("mobx");
const mobx_react_1 = require("mobx-react");
const React = require("react");
const button_1 = require('../../button/button');
const conjoined_buttons_1 = require('../../button/conjoined_buttons');
const icon_1 = require('../../icons/more_horizontal/icon');
const flyout_1 = require('../../surface/flyout/flyout');
const card_context_1 = require("../internal/card_context");
const card_badge_group_1 = require("./card_badge_group");
const card_button_messages_1 = require("./card_button.messages");
const CardButtonGroup = (props) => {
    return ((0, jsx_runtime_1.jsx)(CardButtonGroupContextProvider, { children: (0, jsx_runtime_1.jsx)(InternalCardButtonGroup, { ...props }) }));
};
exports.CardButtonGroup = CardButtonGroup;
const InternalCardButtonGroup = (0, mobx_react_1.observer)(function InternalCardButtonGroup(props) {
    var _a, _b, _c;
    const { children, forceShow, location = 'top-end' } = props;
    const configuration = (0, card_context_1.useCardConfiguration)();
    const context = React.useContext(CardButtonGroupContext);
    const transition = (_a = props.transition) !== null && _a !== void 0 ? _a : configuration.badgeTransition;
    const size = (_b = props.size) !== null && _b !== void 0 ? _b : configuration.size;
    const disabled = (_c = props.disabled) !== null && _c !== void 0 ? _c : configuration.disabled;
    const buttons = React.Children.map(children, child => {
        if (React.isValidElement(child)) {
            return React.cloneElement(child, { size, disabled });
        }
    });
    return ((0, jsx_runtime_1.jsx)(card_badge_group_1.CardBadgeGroup, { location: location, forceShow: forceShow || (context === null || context === void 0 ? void 0 : context.isFlyoutOpen), transition: transition, children: (0, jsx_runtime_1.jsx)(conjoined_buttons_1.ConjoinedButtons, { children: buttons }) }));
});
exports.CardButton = React.memo(function CardButton(props) {
    const { className, icon, ariaLabel, onClick, disabled, size } = props;
    const buttonSize = size === 'small' ? 'tiny' : 'small';
    return ((0, jsx_runtime_1.jsx)(button_1.Button, { variant: "contrast", icon: icon, iconSize: size, size: buttonSize, ariaLabel: ariaLabel, onClick: onClick, className: className, disabled: disabled }));
});
exports.CardMenuButton = (0, mobx_react_1.observer)(function CardMenuButton(props) {
    const context = React.useContext(CardButtonGroupContext);
    const flyoutStore = (0, mobx_react_1.useLocalObservable)(() => ({
        isOpen: false,
        toggle: (0, mobx_1.action)(() => {
            context === null || context === void 0 ? void 0 : context.setIsFlyoutOpen(!flyoutStore.isOpen);
            flyoutStore.isOpen = !flyoutStore.isOpen;
        }),
    }));
    return ((0, jsx_runtime_1.jsx)(exports.StatelessCardMenuButton, { ...props, isOpen: flyoutStore.isOpen, toggleFlyout: flyoutStore.toggle }));
});
const StatelessCardMenuButton = (props) => {
    const { Flyout = flyout_1.Flyout, FlyoutContent, isOpen, toggleFlyout, ariaLabel = card_button_messages_1.CardMessages.more(), size, disabled, icon = icon_1.MoreHorizontalIcon, className, } = props;
    const buttonSize = size === 'small' ? 'tiny' : 'small';
    return ((0, jsx_runtime_1.jsx)(Flyout, { open: isOpen, onRequestClose: toggleFlyout, placement: "bottom-start", trigger: (triggerProps) => ((0, jsx_runtime_1.jsx)(button_1.Button, { ...triggerProps, variant: "contrast", icon: icon, iconSize: size, size: buttonSize, disabled: disabled, className: className, ariaLabel: ariaLabel, onClick: toggleFlyout })), children: (0, jsx_runtime_1.jsx)(FlyoutContent, {}) }));
};
exports.StatelessCardMenuButton = StatelessCardMenuButton;
const CardButtonGroupContext = React.createContext(undefined);
const CardButtonGroupContextProvider = ({ children }) => {
    const [isOpen, setIsOpen] = React.useState(false);
    const contextValue = React.useMemo(() => {
        const setIsFlyoutOpen = (isOpen) => {
            setIsOpen(isOpen);
        };
        return { isFlyoutOpen: isOpen, setIsFlyoutOpen };
    }, [isOpen, setIsOpen]);
    return ((0, jsx_runtime_1.jsx)(CardButtonGroupContext.Provider, { value: contextValue, children: children }));
};
