"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAdaptiveColorScheme = exports.queryPrefersLight = exports.queryPrefersDark = void 0;
const exists_1 = require('../../../base/exists');
const mobx_1 = require("mobx");
const react_1 = require("react");
const media_query_presenter_1 = require('../media_query/media_query_presenter');
exports.queryPrefersDark = '(prefers-color-scheme: dark)';
exports.queryPrefersLight = '(prefers-color-scheme: light)';
const mediaQueryThemes = {
    [exports.queryPrefersDark]: 'dark',
    [exports.queryPrefersLight]: 'light',
};
function themeForQueries(queries) {
    if (queries.length === 0) {
        return;
    }
    const matchingThemes = queries.map(query => mediaQueryThemes[query]).filter(exists_1.exists);
    return matchingThemes[0];
}
function useAdaptiveColorScheme({ enabled, presenter: providedPresenter, }) {
    const store = (0, react_1.useMemo)(() => new media_query_presenter_1.MediaQueryStore(), []);
    const presenter = (0, react_1.useMemo)(() => providedPresenter !== null && providedPresenter !== void 0 ? providedPresenter : new media_query_presenter_1.MediaQueryPresenter({}), [providedPresenter]);
    const [theme, setTheme] = (0, react_1.useState)();
    (0, react_1.useEffect)(() => {
        if (!enabled) {
            return;
        }
        const queries = Object.keys(mediaQueryThemes);
        setTheme(themeForQueries(presenter.getMatches(queries)));
        const dispose = (0, mobx_1.reaction)(() => store.matchedQueries, queries => setTheme(themeForQueries(queries)));
        presenter.registerListener(queries, store);
        return () => {
            dispose();
            presenter.clear();
        };
    }, [enabled, store, presenter]);
    return theme;
}
exports.useAdaptiveColorScheme = useAdaptiveColorScheme;
