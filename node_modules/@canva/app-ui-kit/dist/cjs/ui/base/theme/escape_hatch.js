"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WithThemedMedia = exports.useThemedMedia = exports.WithThemeValues = exports.useThemeValues = void 0;
const preconditions_1 = require('../../../base/preconditions');
const mobx_1 = require("mobx");
const react_1 = require("react");
const internal_1 = require("./internal");
function useThemeValues(ref, cssProperties, maybeStore) {
    const context = (0, react_1.useContext)(internal_1.ThemeContext);
    const store = maybeStore !== null && maybeStore !== void 0 ? maybeStore : context.store;
    const [value, setValue] = (0, react_1.useState)();
    const callbackRef = (0, react_1.useRef)();
    callbackRef.current = () => {
        const computedStyle = window.getComputedStyle(preconditions_1.Preconditions.checkExists(ref.current));
        const cssPropertyEntries = Object.entries(cssProperties);
        setValue(cssPropertyEntries.reduce((acc, [key, cssProperty]) => {
            const value = computedStyle.getPropertyValue(cssProperty).trim();
            acc[key] = value === '' ? undefined : value;
            return acc;
        }, {}));
    };
    const timeoutRef = (0, react_1.useRef)(undefined);
    (0, react_1.useEffect)(() => (0, mobx_1.reaction)(() => store.currentTheme, 
    () => (timeoutRef.current = window.setTimeout(() => { var _a; return (_a = callbackRef.current) === null || _a === void 0 ? void 0 : _a.call(callbackRef); })), { fireImmediately: true }), [store]);
    (0, react_1.useEffect)(() => () => window.clearTimeout(timeoutRef.current), []);
    return value;
}
exports.useThemeValues = useThemeValues;
function WithThemeValues({ properties, children, }) {
    const ref = (0, react_1.useRef)(null);
    const values = useThemeValues(ref, properties);
    return children(ref, values);
}
exports.WithThemeValues = WithThemeValues;
function useThemedMedia(media, maybeStore) {
    const context = (0, react_1.useContext)(internal_1.ThemeContext);
    const store = maybeStore !== null && maybeStore !== void 0 ? maybeStore : context.store;
    const [theme, setTheme] = (0, react_1.useState)(store.currentTheme);
    (0, react_1.useEffect)(() => (0, mobx_1.autorun)(() => setTheme(store.currentTheme)), [store]);
    if (theme == null) {
        return undefined;
    }
    const themedMediaEntries = Object.entries(media);
    return themedMediaEntries.reduce((themedMedia, [key, mediaOptions]) => {
        themedMedia[key] = mediaOptions === null || mediaOptions === void 0 ? void 0 : mediaOptions[theme];
        return themedMedia;
    }, {});
}
exports.useThemedMedia = useThemedMedia;
function WithThemedMedia({ media, children, }) {
    const values = useThemedMedia(media);
    return children(values);
}
exports.WithThemedMedia = WithThemedMedia;
