import * as React from 'react';
import type { UnitSpace } from '../../metrics/metrics';
import type { ContentContainerProps } from '../internal/content_container';
export type PopoverProps = {
    id?: string
    open: boolean
    onRequestClose?: () => void
    onCloseComplete?: () => void
    blockOutsidePointerEvents?: boolean
    reference: React.ReactNode | ((triggerProps: TriggerProps) => React.ReactNode) | ReferenceObject
    placement?: Placement
    width?: Width
    widthMode?: WidthMode
    offset?: Offset
    children?: React.ReactNode
} & ContentContainerProps;
export type TriggerProps = {
    ariaHasPopup?: PopoverProps['role']
    ariaControls?: string
    disclosure?: true
    active?: boolean
};
export type Placement = 'auto' | Position | `${Position}-${Alignment}`;
type Position = 'top' | 'right' | 'bottom' | 'left';
type Alignment = 'start' | 'end';
export type ReferenceObject = {
    clientHeight: number;
    clientWidth: number;
    getBoundingClientRect(): DOMRect;
};
export type Width = '16u' | '32u' | '40u' | '45u' | '52u' | 'reference' | 'auto';
export type WidthMode = 'fixed' | 'maximum';
export type StandardOffset = TypesafeExtract<UnitSpace, '0' | '1u' | '2u' | '3u' | '4u' | '12u'>;
export type CustomOffset = {
    top?: string;
    start?: string;
};
export type Offset = StandardOffset | CustomOffset;
type TypesafeExtract<T, U extends T> = Extract<T, U>;
export declare const isReferenceObject: (reference: PopoverProps['reference']) => reference is ReferenceObject;
export declare function Popover(
 { id: idProp, open, onRequestClose, onCloseComplete, blockOutsidePointerEvents, reference, placement, width, widthMode, offset, children, ...contentContainerProps }: PopoverProps
): import("react/jsx-runtime").JSX.Element;
export {};
