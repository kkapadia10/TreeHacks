import * as React from 'react';
export type ContentContainerComponentProps = {
    onRequestEscape?: () => void
    children?: React.ReactNode;
} & ContentContainerProps;
export type ContentContainerProps = {
    ariaDescribedBy?: string
} & (RoleDialogProps | NoRoleProps);
type RoleDialogProps = {
    role?: 'dialog'
    captureFocus?: true
} & LabelProps;
type NoRoleProps = {
    role?: undefined;
    captureFocus?: boolean
} & Partial<LabelProps>;
type LabelProps = {
    ariaLabelledBy: string
    ariaLabel?: never;
} | {
    ariaLabel: string
    ariaLabelledBy?: never;
};
export declare const ContentContainer: React.ForwardRefExoticComponent<(Omit<{
    onRequestEscape?: (() => void) | undefined
    children?: React.ReactNode;
} & {
    ariaDescribedBy?: string | undefined
} & {
    role?: "dialog" | undefined
    captureFocus?: true | undefined
} & {
    ariaLabelledBy: string
    ariaLabel?: undefined;
} & React.HTMLProps<HTMLDivElement>, "ref"> | Omit<{
    onRequestEscape?: (() => void) | undefined
    children?: React.ReactNode;
} & {
    ariaDescribedBy?: string | undefined
} & {
    role?: "dialog" | undefined
    captureFocus?: true | undefined
} & {
    ariaLabel: string
    ariaLabelledBy?: undefined;
} & React.HTMLProps<HTMLDivElement>, "ref"> | Omit<{
    onRequestEscape?: (() => void) | undefined
    children?: React.ReactNode;
} & {
    ariaDescribedBy?: string | undefined
} & {
    role?: undefined;
    captureFocus?: boolean | undefined
} & Partial<{
    ariaLabelledBy: string
    ariaLabel?: undefined;
}> & React.HTMLProps<HTMLDivElement>, "ref"> | Omit<{
    onRequestEscape?: (() => void) | undefined
    children?: React.ReactNode;
} & {
    ariaDescribedBy?: string | undefined
} & {
    role?: undefined;
    captureFocus?: boolean | undefined
} & Partial<{
    ariaLabel: string
    ariaLabelledBy?: undefined;
}> & React.HTMLProps<HTMLDivElement>, "ref">) & React.RefAttributes<HTMLDivElement>>;
export {};
