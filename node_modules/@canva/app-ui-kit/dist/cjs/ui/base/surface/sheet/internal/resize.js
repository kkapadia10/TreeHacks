"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useResize = void 0;
const React = require("react");
const stable_function_1 = require('../../../stable_function/stable_function');
const snap_points_1 = require("./snap_points");
const FLICK_VELOCITY_BREAKPOINT = 1;
function useResize({ snapPointControls, snapPointIndex, setSnapPointIndex, setOffset, }) {
    const [resizing, setResizing] = React.useState(false);
    const resizeState = React.useRef();
    const start = (0, stable_function_1.useStableFunction)(() => {
        const points = snapPointControls.get();
        const heights = points.map(point => point.height);
        const current = (0, snap_points_1.pointForIndex)(points, snapPointIndex);
        resizeState.current = {
            points,
            maxOffset: Math.max(...heights) - current.height,
            minOffset: Math.min(...heights) - current.height,
            offset: 0,
            startTime: Date.now(),
        };
    });
    const update = (0, stable_function_1.useStableFunction)((offset) => {
        const state = resizeState.current;
        if (state == null) {
            return;
        }
        const newOffset = Math.min(state.maxOffset, Math.max(state.minOffset, offset));
        let updateResizing = resizing;
        if (!updateResizing && newOffset !== 0) {
            updateResizing = true;
            setResizing(true);
        }
        if (updateResizing) {
            setOffset(newOffset);
            state.offset = newOffset;
        }
    });
    const end = (0, stable_function_1.useStableFunction)(() => {
        const state = resizeState.current;
        if (state == null) {
            return;
        }
        const timeDelta = Date.now() - state.startTime;
        const velocity = state.offset / timeDelta;
        const flicked = Math.abs(velocity) >= FLICK_VELOCITY_BREAKPOINT;
        const current = (0, snap_points_1.pointForIndex)(state.points, snapPointIndex);
        const newSize = current.height + state.offset;
        const [index] = state.points.reduce((acc, { height, indices }) => {
            const delta = height - newSize;
            if (flicked && delta < 0 !== velocity < 0) {
                return acc;
            }
            const absoluteDelta = Math.abs(delta);
            return absoluteDelta < acc[1] ? [indices[0], absoluteDelta] : acc;
        }, [0, Infinity]);
        setOffset(undefined);
        resizeState.current = undefined;
        snapPointControls.clear();
        setSnapPointIndex(index);
        setResizing(false);
    });
    return {
        resizing,
        resizeControls: { start, update, end },
    };
}
exports.useResize = useResize;
