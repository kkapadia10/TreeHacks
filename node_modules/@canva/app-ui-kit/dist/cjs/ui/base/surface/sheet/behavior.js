"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSheetScroll = exports.useSheetDrag = exports.useSheetControls = void 0;
const compose_react_refs_1 = require("@seznam/compose-react-refs");
const preconditions_1 = require('../../../../base/preconditions');
const React = require("react");
const drag_1 = require("./internal/drag");
const resize_1 = require("./internal/resize");
const scroll_pan_1 = require("./internal/scroll_pan");
const snap_points_1 = require("./internal/snap_points");
const touch_scroll_1 = require("./internal/touch_scroll");
const wheel_scroll_1 = require("./internal/wheel_scroll");
function useSheetControls(
    { snapPoints, snapPointIndex, setSnapPointIndex, getScrollHeight, setOffset, }
) {
    const { snapPointControls } = (0, snap_points_1.useResolvedSnapPoints)({
        snapPoints,
        getScrollHeight,
    });
    const { resizing, resizeControls, } = (0, resize_1.useResize)({
        snapPointControls,
        snapPointIndex,
        setSnapPointIndex,
        setOffset,
    });
    return {
        resizing,
        controls: {
            resizeControls,
            snapPointControls,
            snapPoints,
            snapPointIndex,
        },
    };
}
exports.useSheetControls = useSheetControls;
function useSheetDrag({ controls }) {
    return (0, drag_1.useDrag)({
        resizeControls: controls.resizeControls,
    });
}
exports.useSheetDrag = useSheetDrag;
function useSheetScroll({ controls, scrollToResizeBelow }) {
    const maxPanIndex = scrollToResizeBelow
        && controls.snapPoints.findIndex(snapPoint => snapPoint.type === scrollToResizeBelow.type
            && snapPoint.height === scrollToResizeBelow.height);
    preconditions_1.Preconditions.checkArgument(maxPanIndex !== -1);
    const scrollPanRef = React.useRef(null);
    const { panControls } = (0, scroll_pan_1.useScrollPan)({
        resizeControls: controls.resizeControls,
        snapPointControls: controls.snapPointControls,
        isContentScrolled: () => { var _a; return ((_a = scrollPanRef.current) === null || _a === void 0 ? void 0 : _a.scrollTop) !== 0; },
        snapPointIndex: controls.snapPointIndex,
        maxPanIndex,
    });
    const { wheelRef } = (0, wheel_scroll_1.useWheelScroll)({ panControls });
    const { touchScrollRef } = (0, touch_scroll_1.useTouchScroll)({ panControls });
    return { contentRef: (0, compose_react_refs_1.default)(scrollPanRef, wheelRef, touchScrollRef) };
}
exports.useSheetScroll = useSheetScroll;
