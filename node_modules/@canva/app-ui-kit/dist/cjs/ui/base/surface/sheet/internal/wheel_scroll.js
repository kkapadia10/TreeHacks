"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useWheelScroll = void 0;
const debounce_1 = require('../../../../../base/debounce');
const React = require("react");
const stable_function_1 = require('../../../stable_function/stable_function');
const WHEEL_DEBOUNCE = 140;
function normalizeWheelDelta(deltaMode, delta) {
    var _a;
    const WHEEL_MULTIPLIERS = new Map([
        [WheelEvent.DOM_DELTA_LINE, 40],
        [WheelEvent.DOM_DELTA_PAGE, 800],
    ]);
    return delta * ((_a = WHEEL_MULTIPLIERS.get(deltaMode)) !== null && _a !== void 0 ? _a : 1);
}
function useWheelScroll({ panControls }) {
    const wheelActive = React.useRef(false);
    const endPan = panControls.end;
    const onWheelEnd = React.useMemo(() => {
        return (0, debounce_1.debounce)(() => {
            wheelActive.current = false;
            endPan();
        }, WHEEL_DEBOUNCE);
    }, [endPan]);
    const onWheel = (0, stable_function_1.useStableFunction)((event) => {
        if (!wheelActive.current) {
            wheelActive.current = true;
            panControls.start();
        }
        const delta = normalizeWheelDelta(event.deltaMode, event.deltaY);
        const allowScroll = panControls.update(delta);
        if (!allowScroll && event.cancelable) {
            event.preventDefault();
        }
        onWheelEnd();
    });
    const previousRef = React.useRef();
    const wheelRef = (0, stable_function_1.useStableFunction)(element => {
        if (!window.WheelEvent) {
            return;
        }
        if (element == null && previousRef.current != null) {
            previousRef.current.removeEventListener('wheel', onWheel);
        }
        if (element != null) {
            element.addEventListener('wheel', onWheel);
        }
        previousRef.current = element;
    });
    return { wheelRef };
}
exports.useWheelScroll = useWheelScroll;
