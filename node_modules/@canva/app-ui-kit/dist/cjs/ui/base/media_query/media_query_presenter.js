"use strict";

const makeObservable = require('../../../base/make_observable/make_observable').makeObservable;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MediaQueryPresenter = exports.MediaQueryStore = void 0;
const tslib_1 = require("tslib");
const debounce_1 = require('../../../base/debounce');
const mobx_1 = require("mobx");
const MEDIA_QUERY_LISTENER_DEBOUNCE_TIME = 16;
class MediaQueryStore {
  static _makeObservable(instance) {
    makeObservable(instance, {
      matchedQueries: mobx_1.observable.ref
    });
  }
  constructor() {
    MediaQueryStore._makeObservable(this);
    this.matchedQueries = [];
  }
}
exports.MediaQueryStore = MediaQueryStore;
class MediaQueryPresenter {
  static _makeObservable(instance) {
    makeObservable(instance, {
      updateQueries: mobx_1.action
    });
  }
  constructor({
    matchMedia
  }) {
    MediaQueryPresenter._makeObservable(this);
    this.mqls = [];
    this.matchMedia = matchMedia || window && window.matchMedia;
  }
  getMatches(queries) {
    if (!this.matchMedia) {
      return [];
    }
    const matchMedia = this.matchMedia;
    return queries.filter(query => matchMedia(query).matches);
  }
  updateQueries(queries, store) {
    this.registerListener(queries, store);
    store.matchedQueries = this.getMatches(queries);
  }
  registerListener(queries, store) {
    this.clear();
    if (!this.matchMedia) {
      return;
    }
    const matchMedia = this.matchMedia;
    const listener = (0, debounce_1.debounce)((0, mobx_1.action)(() => store.matchedQueries = this.getMatches(queries)), MEDIA_QUERY_LISTENER_DEBOUNCE_TIME);
    this.listener = listener;
    this.mqls = queries.map(query => {
      const mql = matchMedia(query);
      if (typeof mql.addEventListener === 'function') {
        mql.addEventListener('change', listener);
      } else {
        mql.addListener(listener);
      }
      return mql;
    });
  }
  clear() {
    if (this.listener) {
      const listener = this.listener;
      this.mqls.forEach(mql => {
        if (typeof mql.removeEventListener === 'function') {
          mql.removeEventListener('change', listener);
        } else {
          mql.removeListener(listener);
        }
      });
    }
  }
}
exports.MediaQueryPresenter = MediaQueryPresenter;