"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSessionStorageIfAvailable = exports.getLocalStorageIfAvailable = exports.hasWebStorageAccess = exports.hasLocalStorageAccess = exports.requestStorageAccess = exports.hasCookiesAccess = exports.hasStorageAccess = void 0;
const _window = typeof window !== 'undefined' ? window : undefined;
const _document = typeof document !== 'undefined' ? document : undefined;
async function hasStorageAccess(document = _document, window = _window) {
    if (document && 'hasStorageAccess' in document && document.hasStorageAccess) {
        try {
            return await document.hasStorageAccess();
        }
        catch (e) {
            return true;
        }
    }
    return hasLocalStorageAccess(window) && hasCookiesAccess(document);
}
exports.hasStorageAccess = hasStorageAccess;
function hasCookiesAccess(document = _document) {
    const SET_COOKIE_SAMESITE_LAX = 'canvacookietestlax=1';
    const GET_COOKIE_SAMESITE_LAX = 'canvacookietestlax=1';
    const SET_COOKIE_SAMESITE_NONE = 'canvacookietestnone=1; SameSite=None; Secure';
    const GET_COOKIE_SAMESITE_NONE = 'canvacookietestnone=1';
    return (testCookieAccess(document, SET_COOKIE_SAMESITE_LAX, GET_COOKIE_SAMESITE_LAX)
        || testCookieAccess(document, SET_COOKIE_SAMESITE_NONE, GET_COOKIE_SAMESITE_NONE));
}
exports.hasCookiesAccess = hasCookiesAccess;
function testCookieAccess(document = _document, testItem, expected) {
    if (!document || !('cookie' in document)) {
        return false;
    }
    try {
        document.cookie = testItem;
        const equal = document.cookie.indexOf(expected) !== -1;
        document.cookie = `${testItem}; expires=Thu, 01-Jan-1970 00:00:01 GMT`;
        return equal;
    }
    catch {
        return false;
    }
}
async function requestStorageAccess(document = _document, window = _window) {
    if (document && 'requestStorageAccess' in document && document.requestStorageAccess) {
        return document.requestStorageAccess();
    }
    if (await hasStorageAccess(document, window)) {
        return;
    }
    throw new Error('Failed to grant permission for storage access.');
}
exports.requestStorageAccess = requestStorageAccess;
function hasLocalStorageAccess(window = _window) {
    return hasWebStorageAccess(window, 'localStorage');
}
exports.hasLocalStorageAccess = hasLocalStorageAccess;
function hasSessionStorageAccess(window = _window) {
    return hasWebStorageAccess(window, 'sessionStorage');
}
function hasWebStorageAccess(window = _window, webStorageAPIName = 'localStorage') {
    if (!window || !(webStorageAPIName in window)) {
        return false;
    }
    const testItem = `E2${webStorageAPIName}Test`;
    try {
        const storage = window[webStorageAPIName];
        if (storage == null) {
            return false;
        }
        storage.getItem(testItem);
        storage.setItem(testItem, testItem);
        if (storage.getItem(testItem) !== testItem) {
            return false;
        }
        storage.removeItem(testItem);
        return true;
    }
    catch (e) {
        if (e instanceof DOMException) {
            if (e.name === 'SecurityError' || e.code === 18) {
                return false;
            }
            if (e.name === 'QuotaExceededError'
                || e.name === 'QUOTA_EXCEEDED_ERR' || e.code === 22
                || e.name === 'NS_ERROR_DOM_QUOTA_REACHED'
                || e.name === 'NS_ERROR_FILE_NO_DEVICE_SPACE'
                || e.name === 'NS_ERROR_NOT_AVAILABLE'
                || e.code === 1014) {
                return true;
            }
        }
        throw e;
    }
}
exports.hasWebStorageAccess = hasWebStorageAccess;
function getLocalStorageIfAvailable(window = _window) {
    if (!window || !hasLocalStorageAccess(window)) {
        return;
    }
    return window.localStorage;
}
exports.getLocalStorageIfAvailable = getLocalStorageIfAvailable;
function getSessionStorageIfAvailable(window = _window) {
    if (!window || !hasSessionStorageAccess(window)) {
        return;
    }
    return window.sessionStorage;
}
exports.getSessionStorageIfAvailable = getSessionStorageIfAvailable;
