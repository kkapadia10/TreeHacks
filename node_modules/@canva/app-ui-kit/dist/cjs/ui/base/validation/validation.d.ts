export declare namespace Validation {
    type State<E> = {
        state: 'valid';
    } | {
        state: 'invalid';
        error: E;
    };
    type Fn<T, E> = (value: T) => State<E>;
    function valid<E = true>(): State<E>;
    function invalid(): State<true>;
    function invalid<E>(error: E): State<E>;
    const all: <T, E>(validators: Fn<T, E>[]) => (value: T) => State<E>;
    const anyOf: <T>(validators: Fn<T, unknown>[]) => (value: T) => Validation.State<true>;
    function mapError<T, E1, E2>(validator: Fn<T, E1>, mapFn: (error: E1) => E2): Fn<T, E2>
    const filterErrors: <E>(results: State<E>[]) => E[];
}
