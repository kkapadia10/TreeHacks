"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OptionalGlobalScrollWindow = exports.GlobalScrollWindow = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const mobx_1 = require("mobx");
const React = require("react");
const provider_1 = require('../../provider/provider');
const utilities_1 = require("./utilities");
function GlobalScrollWindow(props) {
    const isRtl = (0, provider_1.useDirection)() === 'RTL';
    const { children, layout } = props;
    const scrollState = React.useRef((0, mobx_1.observable)({ layout }));
    React.useEffect(() => {
        const dispatch = (0, mobx_1.action)(() => {
            const scrollableEl = document.documentElement;
            if (!scrollableEl) {
                scrollState.current.positions = undefined;
                return;
            }
            scrollState.current.positions = (0, utilities_1.calculateScrollStatePosition)(scrollableEl, layout, isRtl);
        });
        window.addEventListener('scroll', dispatch, { passive: true });
        window.addEventListener('resize', dispatch, { passive: true });
        dispatch();
        return () => {
            window.removeEventListener('scroll', dispatch);
            window.removeEventListener('resize', dispatch);
        };
    }, [layout, isRtl]);
    return (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: children({ scrollState: scrollState.current }) });
}
exports.GlobalScrollWindow = GlobalScrollWindow;
class OptionalGlobalScrollWindow extends React.Component {
    render() {
        const { enabled, children } = this.props;
        if (enabled) {
            return (0, jsx_runtime_1.jsx)(GlobalScrollWindow, { ...this.props });
        }
        return children({});
    }
}
exports.OptionalGlobalScrollWindow = OptionalGlobalScrollWindow;
