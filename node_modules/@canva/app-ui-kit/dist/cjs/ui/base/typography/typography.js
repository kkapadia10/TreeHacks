"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Title = exports.Text = exports.getDefaultTagName = exports.typographySizes = exports.InheritColor = void 0;
const preconditions_1 = require('../../../base/preconditions');
const classnames_1 = require("classnames");
const React = require("react");
const typography_internal_css_1 = require("./typography_internal.css");
exports.InheritColor = Symbol('inherit');
exports.typographySizes = [
    'xxlarge',
    'xlarge',
    'large',
    'medium',
    'small',
    'xsmall',
    'xxsmall',
];
function getVariantClassNamePart(variant) {
    switch (variant) {
        case 'regular':
            return '';
        case 'title':
            return 'Title';
        case 'bold':
            return 'Bold';
        default:
            throw new preconditions_1.UnreachableError(variant);
    }
}
function getSizeClassNamePart(size) {
    switch (size) {
        case 'xxlarge':
            return 'ExtraExtraLarge';
        case 'xlarge':
            return 'ExtraLarge';
        case 'large':
            return 'Large';
        case 'medium':
            return 'Medium';
        case 'small':
            return 'Small';
        case 'xsmall':
            return 'ExtraSmall';
        case 'xxsmall':
            return 'ExtraExtraSmall';
        default:
            throw new preconditions_1.UnreachableError(size);
    }
}
function getTextClassName({ variant, size }) {
    return (0, typography_internal_css_1.getStyle)(`text${getVariantClassNamePart(variant)}${getSizeClassNamePart(size)}`);
}
function getDefaultTagName({ variant, size, }) {
    if (variant !== 'title') {
        return 'p';
    }
    switch (size) {
        case 'xxlarge':
            return 'h1';
        case 'xlarge':
            return 'h1';
        case 'large':
            return 'h2';
        case 'medium':
            return 'h3';
        case 'small':
            return 'h4';
        case 'xsmall':
            return 'h5';
        case 'xxsmall':
            return 'h6';
        default:
            throw new preconditions_1.UnreachableError(size);
    }
}
exports.getDefaultTagName = getDefaultTagName;
function TextComponent(props) {
    const { id, alignment = 'start', tone = 'primary', margins = 'none', capitalization = 'default', variant = 'regular', size = 'medium', tagName = getDefaultTagName({ variant, size }), lineClamp, children, allowUserSelect, className, elementTiming, } = props;
    if (children === '' || children == null) {
        return null;
    }
    const lineClampClassName = lineClamp && (lineClamp === 1 ? typography_internal_css_1.default.ellipsis : typography_internal_css_1.default.lineClamp);
    const lineClampStyles = lineClamp && lineClamp > 1 ? { WebkitLineClamp: lineClamp } : {};
    const finalClassName = (0, classnames_1.default)(getTextClassName({ variant, size }), margins === 'legacy' && typography_internal_css_1.default.margin, (0, typography_internal_css_1.getStyle)(alignment), tone === exports.InheritColor ? typography_internal_css_1.default.inheritColor : tone && (0, typography_internal_css_1.getStyle)(tone), lineClampClassName, allowUserSelect && typography_internal_css_1.default.allowUserSelect, capitalization === 'uppercase' && typography_internal_css_1.default.uppercase, className);
    return React.createElement(tagName, {
        id,
        className: finalClassName,
        style: lineClampStyles,
        elementtiming: elementTiming,
    }, children);
}
exports.Text = React.memo(({ weight, ...props }) => {
    return TextComponent({ variant: weight, ...props });
});
exports.Text.displayName = 'Text';
exports.Title = React.memo((props) => {
    return TextComponent({ ...props, variant: 'title' });
});
exports.Title.displayName = 'Title';
