export declare class RgbColor {
    readonly r: number;
    readonly g: number;
    readonly b: number;
    constructor(r: number, g: number, b: number);
    static fromHexString(s: string): RgbColor;
    static fromRgbString(s: string): RgbColor;
    toRgbaColor(alpha?: number): RgbaColor;
    toHexString(): string;
    toRgbString(): string;
}
export declare class RgbaColor {
    readonly r: number;
    readonly g: number;
    readonly b: number;
    readonly a: number;
    constructor(r: number, g: number, b: number, a: number);
    static fromRgbaString(s: string): RgbaColor;
    toRgb(): RgbColor;
    toRgbaString(): string;
}
export declare class LabColor {
    readonly l: number;
    readonly a: number;
    readonly b: number;
    constructor(l: number, a: number, b: number);
}
export declare class HclColor {
    readonly h: number;
    readonly c: number;
    readonly l: number;
    constructor(h: number, c: number, l: number);
}
export declare class XyzColor {
    readonly x: number;
    readonly y: number;
    readonly z: number;
    constructor(x: number, y: number, z: number);
}
export declare class HslColor {
    readonly h: number;
    readonly s: number;
    readonly l: number;
    constructor(h: number, s: number, l: number);
}
export declare class CssColors {
    static fromString(s: string): RgbColor | RgbaColor;
    static fromShortHexString(s: string): RgbColor;
    static fromHexString(s: string): RgbColor;
    static fromRgbString(s: string): RgbColor;
    static fromRgbaString(s: string): RgbaColor;
    static fromHslString(str: string): RgbaColor;
    static toHexString(c: RgbColor): string;
    static toRgbString(c: RgbColor): string;
    static toRgbaString(c: RgbaColor): string;
    private constructor();
}
type Color = RgbColor | XyzColor | LabColor | HclColor | HslColor | string;
export declare class Conversion {
    private constructor();
    static toLab(c: Color): LabColor;
    static toRgb(c: Color): RgbColor;
    static toHcl(c: Color): HclColor;
    static toHsl(c: Color): HslColor;
    static toXyz(c: Color): XyzColor;
    static toHex(c: Color): string;
    private static hslToRgb;
    private static rgbToHsl;
    private static hclToLab;
    private static labToHcl;
    private static labToXyz;
    private static xyzToLab;
    private static xyzToRgb;
    private static rgbToXyz;
    private static hexToRgb;
}
export declare class Difference {
    private constructor();
    static de2000(color1: Color, color2: Color, kL?: number, kC?: number, kH?: number): number;
    static wcagContrast(c1: Color, c2: Color): number;
    static apcaContrast(foreground: Color, background: Color): number;
}
export declare class Lightness {
    private constructor();
    static relativeLuminance(color: Color): number;
    static relativeLuminanceToLightness(Y: number): number;
}
export {};
