import type * as React from 'react';
import type { Space } from '../../../metrics/metrics';
import type { ResponsiveValue } from '../../../responsive/responsive';
import type { BackgroundLevel } from '../../../theme/theme';
export declare function resetAtom(reset?: boolean): HtmlEncodedCssList | null;
export declare const displays: readonly ["block", "none", "flex"];
export type Display = (typeof displays)[number];
export declare const getDisplayClassNames: (display?: ResponsiveValue<Display>) => (HtmlEncodedCssList | undefined)[];
export declare const getDisplayStyles: (display?: ResponsiveValue<Display>) => React.CSSProperties;
export declare const backgroundTones: readonly ["contrast", "neutral", "positive", "info", "warn", "critical", "neutralLow", "positiveLow", "infoLow", "warnLow", "criticalLow", "checkered"];
export type Background = BackgroundLevel | (typeof backgroundTones)[number];
export declare function backgroundAtom(background?: Background): HtmlEncodedCssList | null;
export declare const borders: readonly ["none", "standard", "critical", "low"];
export declare const borderRadiuses: readonly ["none", "standard", "large"];
export type Border = (typeof borders)[number];
export type BorderRadius = (typeof borderRadiuses)[number];
export declare function borderAtom(border?: Border): HtmlEncodedCssList | null;
export declare function borderPositionAtom({ top, bottom, start, end, }: {
    top?: Border;
    bottom?: Border;
    start?: Border;
    end?: Border;
}): (HtmlEncodedCssList | undefined)[];
export declare function borderRadiusAtom(borderRadius?: BorderRadius): HtmlEncodedCssList | null;
export declare const sizes: readonly ["unset", "full"];
export type Size = (typeof sizes)[number];
export declare function widthAtom(width?: Size): HtmlEncodedCssList | null;
export declare function heightAtom(height?: Size): HtmlEncodedCssList | null;
export declare const minSizes: readonly ["0", "minTouchableArea"];
export type MinSize = (typeof minSizes)[number];
export declare function minWidthAtom(minWidth?: MinSize): HtmlEncodedCssList | null;
export declare function minHeightAtom(minHeight?: MinSize): HtmlEncodedCssList | null;
export declare const getPaddingClassNames: (padding?: ResponsiveValue<Space>, paddingX?: ResponsiveValue<Space>, paddingY?: ResponsiveValue<Space>, paddingTop?: ResponsiveValue<Space>, paddingBottom?: ResponsiveValue<Space>, paddingStart?: ResponsiveValue<Space>, paddingEnd?: ResponsiveValue<Space>) => (HtmlEncodedCssList | undefined)[];
export declare const getPaddingStyles: (padding?: ResponsiveValue<Space>, paddingX?: ResponsiveValue<Space>, paddingY?: ResponsiveValue<Space>, paddingTop?: ResponsiveValue<Space>, paddingBottom?: ResponsiveValue<Space>, paddingStart?: ResponsiveValue<Space>, paddingEnd?: ResponsiveValue<Space>) => React.CSSProperties;
export declare const getFlexDirectionClassNames: (direction?: ResponsiveValue<FlexDirection>) => (HtmlEncodedCssList | undefined)[];
export declare const flexDirections: readonly ["row", "column"];
export type FlexDirection = (typeof flexDirections)[number];
export declare const getFlexDirectionStyles: (flexDirection?: ResponsiveValue<FlexDirection>) => React.CSSProperties;
export declare const flexWraps: readonly ["noWrap", "wrap"];
export type FlexWrap = (typeof flexWraps)[number];
export declare function flexWrapAtom(flexWrap?: FlexWrap): HtmlEncodedCssList | null;
export declare const justifyContents: readonly ["normal", "center", "start", "end", "spaceBetween"];
export type JustifyContent = (typeof justifyContents)[number];
export declare function justifyContentAtom(justifyContent?: JustifyContent, display?: ResponsiveValue<Display>): HtmlEncodedCssList | null;
export declare const alignItems: readonly ["stretch", "center", "start", "end"];
export type AlignItems = (typeof alignItems)[number];
export declare function alignItemsAtom(alignItems?: AlignItems, display?: ResponsiveValue<Display>): HtmlEncodedCssList | null;
