"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.alignItemsAtom = exports.alignItems = exports.justifyContentAtom = exports.justifyContents = exports.flexWrapAtom = exports.flexWraps = exports.getFlexDirectionStyles = exports.flexDirections = exports.getFlexDirectionClassNames = exports.getPaddingStyles = exports.getPaddingClassNames = exports.minHeightAtom = exports.minWidthAtom = exports.minSizes = exports.heightAtom = exports.widthAtom = exports.sizes = exports.borderRadiusAtom = exports.borderPositionAtom = exports.borderAtom = exports.borderRadiuses = exports.borders = exports.backgroundAtom = exports.backgroundTones = exports.getDisplayStyles = exports.getDisplayClassNames = exports.displays = exports.resetAtom = void 0;
const metrics_1 = require('../../../metrics/metrics');
const responsive_1 = require('../../../responsive/responsive');
const _reset_css_1 = require("./_reset.css");
const alignment_css_1 = require("./alignment.css");
const background_css_1 = require("./background.css");
const border_css_1 = require("./border.css");
const display_css_1 = require("./display.css");
const flex_css_1 = require("./flex.css");
const padding_css_1 = require("./padding.css");
const size_css_1 = require("./size.css");
function resetAtom(reset) {
    if (reset) {
        return _reset_css_1.default.reset;
    }
    return null;
}
exports.resetAtom = resetAtom;
exports.displays = ['block', 'none', 'flex'];
const getDisplayClassNames = (display) => [
    display && display_css_1.default.hasDisplay,
];
exports.getDisplayClassNames = getDisplayClassNames;
const displayPropertyMap = {
    default: display_css_1.customProperties.defaultDisplay,
    smallUp: display_css_1.customProperties.smallUpDisplay,
    mediumUp: display_css_1.customProperties.mediumUpDisplay,
    largeUp: display_css_1.customProperties.largeUpDisplay,
};
const getDisplayStyles = (display) => ({
    ...(display && (0, responsive_1.generateStyle)(displayPropertyMap, display)),
});
exports.getDisplayStyles = getDisplayStyles;
exports.backgroundTones = [
    'contrast',
    'neutral',
    'positive',
    'info',
    'warn',
    'critical',
    'neutralLow',
    'positiveLow',
    'infoLow',
    'warnLow',
    'criticalLow',
    'checkered',
];
function backgroundAtom(background) {
    if (!background) {
        return null;
    }
    return (0, background_css_1.getStyle)(`${background}Background`);
}
exports.backgroundAtom = backgroundAtom;
exports.borders = ['none', 'standard', 'critical', 'low'];
exports.borderRadiuses = ['none', 'standard', 'large'];
function borderAtom(border) {
    if (!border || border === 'none') {
        return null;
    }
    return (0, border_css_1.getStyle)(`${border}Border`);
}
exports.borderAtom = borderAtom;
function borderPositionAtom({ top, bottom, start, end, }) {
    return [
        top && (0, border_css_1.getStyle)(`${top}BorderTop`),
        bottom && (0, border_css_1.getStyle)(`${bottom}BorderBottom`),
        start && (0, border_css_1.getStyle)(`${start}BorderStart`),
        end && (0, border_css_1.getStyle)(`${end}BorderEnd`),
    ];
}
exports.borderPositionAtom = borderPositionAtom;
function borderRadiusAtom(borderRadius) {
    if (!borderRadius || borderRadius === 'none') {
        return null;
    }
    return (0, border_css_1.getStyle)(`${borderRadius}BorderRadius`);
}
exports.borderRadiusAtom = borderRadiusAtom;
exports.sizes = ['unset', 'full'];
function widthAtom(width) {
    if (!width || width === 'unset') {
        return null;
    }
    return (0, size_css_1.getStyle)(`${width}Width`);
}
exports.widthAtom = widthAtom;
function heightAtom(height) {
    if (!height || height === 'unset') {
        return null;
    }
    return (0, size_css_1.getStyle)(`${height}Height`);
}
exports.heightAtom = heightAtom;
exports.minSizes = ['0', 'minTouchableArea'];
function minWidthAtom(minWidth) {
    switch (minWidth) {
        case '0':
            return (0, size_css_1.getStyle)(`minWidth0`);
        case 'minTouchableArea':
            return (0, size_css_1.getStyle)(`minWidthMinTouchableArea`);
        default:
            return null;
    }
}
exports.minWidthAtom = minWidthAtom;
function minHeightAtom(minHeight) {
    switch (minHeight) {
        case '0':
            return (0, size_css_1.getStyle)(`minHeight0`);
        case 'minTouchableArea':
            return (0, size_css_1.getStyle)(`minHeightMinTouchableArea`);
        default:
            return null;
    }
}
exports.minHeightAtom = minHeightAtom;
const getPaddingClassNames = (padding, paddingX, paddingY, paddingTop, paddingBottom, paddingStart, paddingEnd) => [
    (padding || paddingX || paddingY || paddingTop || paddingBottom || paddingStart || paddingEnd)
        && padding_css_1.default.hasPadding,
];
exports.getPaddingClassNames = getPaddingClassNames;
const paddingPropertyMap = {
    default: padding_css_1.customProperties.padding,
    smallUp: padding_css_1.customProperties.smallUpPadding,
    mediumUp: padding_css_1.customProperties.mediumUpPadding,
    largeUp: padding_css_1.customProperties.largeUpPadding,
};
const paddingXPropertyMap = {
    default: padding_css_1.customProperties.paddingX,
    smallUp: padding_css_1.customProperties.smallUpPaddingX,
    mediumUp: padding_css_1.customProperties.mediumUpPaddingX,
    largeUp: padding_css_1.customProperties.largeUpPaddingX,
};
const paddingYPropertyMap = {
    default: padding_css_1.customProperties.paddingY,
    smallUp: padding_css_1.customProperties.smallUpPaddingY,
    mediumUp: padding_css_1.customProperties.mediumUpPaddingY,
    largeUp: padding_css_1.customProperties.largeUpPaddingY,
};
const paddingTopPropertyMap = {
    default: padding_css_1.customProperties.paddingTop,
    smallUp: padding_css_1.customProperties.smallUpPaddingTop,
    mediumUp: padding_css_1.customProperties.mediumUpPaddingTop,
    largeUp: padding_css_1.customProperties.largeUpPaddingTop,
};
const paddingBottomPropertyMap = {
    default: padding_css_1.customProperties.paddingBottom,
    smallUp: padding_css_1.customProperties.smallUpPaddingBottom,
    mediumUp: padding_css_1.customProperties.mediumUpPaddingBottom,
    largeUp: padding_css_1.customProperties.largeUpPaddingBottom,
};
const paddingStartPropertyMap = {
    default: padding_css_1.customProperties.paddingStart,
    smallUp: padding_css_1.customProperties.smallUpPaddingStart,
    mediumUp: padding_css_1.customProperties.mediumUpPaddingStart,
    largeUp: padding_css_1.customProperties.largeUpPaddingStart,
};
const paddingEndPropertyMap = {
    default: padding_css_1.customProperties.paddingEnd,
    smallUp: padding_css_1.customProperties.smallUpPaddingEnd,
    mediumUp: padding_css_1.customProperties.mediumUpPaddingEnd,
    largeUp: padding_css_1.customProperties.largeUpPaddingEnd,
};
const getPaddingStyles = (padding, paddingX, paddingY, paddingTop, paddingBottom, paddingStart, paddingEnd) => ({
    ...(padding && (0, responsive_1.generateStyle)(paddingPropertyMap, padding, metrics_1.getSpaceValue)),
    ...(paddingX && (0, responsive_1.generateStyle)(paddingXPropertyMap, paddingX, metrics_1.getSpaceValue)),
    ...(paddingY && (0, responsive_1.generateStyle)(paddingYPropertyMap, paddingY, metrics_1.getSpaceValue)),
    ...(paddingTop && (0, responsive_1.generateStyle)(paddingTopPropertyMap, paddingTop, metrics_1.getSpaceValue)),
    ...(paddingBottom && (0, responsive_1.generateStyle)(paddingBottomPropertyMap, paddingBottom, metrics_1.getSpaceValue)),
    ...(paddingStart && (0, responsive_1.generateStyle)(paddingStartPropertyMap, paddingStart, metrics_1.getSpaceValue)),
    ...(paddingEnd && (0, responsive_1.generateStyle)(paddingEndPropertyMap, paddingEnd, metrics_1.getSpaceValue)),
});
exports.getPaddingStyles = getPaddingStyles;
const getFlexDirectionClassNames = (direction) => [
    direction && flex_css_1.default.hasFlex,
];
exports.getFlexDirectionClassNames = getFlexDirectionClassNames;
exports.flexDirections = ['row', 'column'];
const flexDirectionPropertyMap = {
    default: flex_css_1.customProperties.flexDirection,
    smallUp: flex_css_1.customProperties.smallUpFlexDirection,
    mediumUp: flex_css_1.customProperties.mediumUpFlexDirection,
    largeUp: flex_css_1.customProperties.largeUpFlexDirection,
};
const getFlexDirectionStyles = (flexDirection) => ({
    ...(flexDirection && (0, responsive_1.generateStyle)(flexDirectionPropertyMap, flexDirection)),
});
exports.getFlexDirectionStyles = getFlexDirectionStyles;
exports.flexWraps = ['noWrap', 'wrap'];
function flexWrapAtom(flexWrap) {
    if (!flexWrap) {
        return null;
    }
    return (0, flex_css_1.getStyle)(flexWrap);
}
exports.flexWrapAtom = flexWrapAtom;
exports.justifyContents = ['normal', 'center', 'start', 'end', 'spaceBetween'];
function justifyContentAtom(justifyContent, display) {
    if (!justifyContent) {
        return null;
    }
    if (display === 'flex' && (justifyContent === 'start' || justifyContent === 'end')) {
        return (0, alignment_css_1.getStyle)(`${justifyContent}FlexJustifyContent`);
    }
    return (0, alignment_css_1.getStyle)(`${justifyContent}JustifyContent`);
}
exports.justifyContentAtom = justifyContentAtom;
exports.alignItems = ['stretch', 'center', 'start', 'end'];
function alignItemsAtom(alignItems, display) {
    if (!alignItems) {
        return null;
    }
    if (display === 'flex' && (alignItems === 'start' || alignItems === 'end')) {
        return (0, alignment_css_1.getStyle)(`${alignItems}FlexAlignItems`);
    }
    return (0, alignment_css_1.getStyle)(`${alignItems}AlignItems`);
}
exports.alignItemsAtom = alignItemsAtom;
