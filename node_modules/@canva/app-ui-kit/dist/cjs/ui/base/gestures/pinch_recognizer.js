"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PinchRecognizer = void 0;
const pan_recognizer_1 = require("./pan_recognizer");
class PinchRecognizer {
    constructor(opts) {
        this.opts = opts;
    }
    getBrowserHandledTouchActions() {
        return ['pan-x', 'pan-y'];
    }
    onPointerDown(pointer, allPointers) {
        if (pointer.start.button != null && pointer.start.button !== 0) {
            return;
        }
        this.checkPointerState(pointer, allPointers);
    }
    onPointerMove(pointers, allPointers) {
        var _a, _b, _c, _d;
        if (!this.state) {
            return;
        }
        if (!this.state.recognized) {
            this.state.recognized = true;
            (_b = (_a = this.opts).onStart) === null || _b === void 0 ? void 0 : _b.call(_a, getPinchEventProperties(this.state, pointers[0].current, allPointers));
        } else {
            (_d = (_c = this.opts).onMove) === null || _d === void 0 ? void 0 : _d.call(_c, getPinchEventProperties(this.state, pointers[0].current, allPointers));
        }
    }
    onPointerUp(pointer, allPointers) {
        this.checkPointerState(pointer, allPointers);
    }
    onUnmount(allPointers) {
        var _a, _b, _c;
        if ((_a = this.state) === null || _a === void 0 ? void 0 : _a.recognized) {
            (_c = (_b = this.opts).onEnd) === null || _c === void 0 ? void 0 : _c.call(_b, getPinchEventProperties(this.state, this.state.p1Start, allPointers));
        }
    }
    checkPointerState(pointer, allPointers) {
        var _a, _b;
        if (!this.state && allPointers.size === 2) {
            const [p1Start, p2Start] = Array.from(allPointers.values(), p => p.current);
            this.state = { startTime: Date.now(), recognized: false, p1Start, p2Start };
        }
        else if (this.state) {
            const state = this.state;
            this.state = undefined;
            if (state.recognized) {
                (_b = (_a = this.opts).onEnd) === null || _b === void 0 ? void 0 : _b.call(_a, getPinchEventProperties(state, pointer.current, allPointers));
            }
        }
    }
}
exports.PinchRecognizer = PinchRecognizer;
function getPinchEventProperties(state, currentPointer, allPointers) {
    const { p1Start, p2Start } = state;
    const p1Current = currentPointer.id === p1Start.id ? currentPointer : allPointers.get(p1Start.id).current;
    const p2Current = currentPointer.id === p2Start.id ? currentPointer : allPointers.get(p2Start.id).current;
    const start = midpoint(p1Start, p2Start);
    const current = midpoint(p1Current, p2Current);
    const startDis = dist2(p1Start, p2Start);
    const currentDis = dist2(p1Current, p2Current);
    const scale = Math.sqrt(currentDis / startDis);
    return {
        ...(0, pan_recognizer_1.getPanEventProperties)(currentPointer, start, current),
        scale,
    };
}
const midpoint = (p1, p2) => ({
    x: (p1.x + p2.x) / 2,
    y: (p1.y + p2.y) / 2,
    timestamp: Math.max(p1.timestamp, p2.timestamp),
});
const dist2 = (p1, p2) => (p2.x - p1.x) ** 2 + (p2.y - p1.y) ** 2;
