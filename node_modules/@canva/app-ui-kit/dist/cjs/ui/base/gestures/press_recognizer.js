"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PressRecognizer = void 0;
const input_1 = require('../dom/input/input');
const recognizer_1 = require("./recognizer");
class PressRecognizer {
    constructor(opts) {
        this.opts = opts;
        this.timeout = () => {
            var _a, _b;
            if (this.state) {
                this.state.recognized = true;
                (_b = (_a = this.opts).onStart) === null || _b === void 0 ? void 0 : _b.call(_a, (0, recognizer_1.getCommonEventProperties)(this.state.pointer.start));
            }
        };
        this.setupEventListeners = (pointer) => {
            pointer.currentTarget.addEventListener('contextmenu', this.onContextMenu);
        };
        this.clearEventListeners = (pointer) => {
            pointer.currentTarget.removeEventListener('contextmenu', this.onContextMenu);
        };
        this.onContextMenu = (e) => {
            if ((0, input_1.isSomeInputActive)(e)) {
                return;
            }
            e.preventDefault();
        };
    }
    getBrowserHandledTouchActions() {
        return ['auto'];
    }
    onPointerDown(pointer, allPointers) {
        var _a;
        if (pointer.start.button != null && pointer.start.button !== 0) {
            return;
        }
        if (allPointers.size === 1) {
            this.setupEventListeners(pointer.start);
            const timeoutId = window.setTimeout(this.timeout, (_a = this.opts.minTime) !== null && _a !== void 0 ? _a : 251);
            this.state = { pointer, timeoutId, recognized: false };
        }
        else if (allPointers.size > 1 && this.state) {
            window.clearTimeout(this.state.timeoutId);
            this.state = undefined;
        }
    }
    onPointerMove(pointers, allPointers) {
        var _a, _b;
        if (this.state && !this.isWithinMaxDistance()) {
            const state = this.state;
            this.state = undefined;
            window.clearTimeout(state.timeoutId);
            this.clearEventListeners(state.pointer.start);
            state.recognized && ((_b = (_a = this.opts).onCancel) === null || _b === void 0 ? void 0 : _b.call(_a, (0, recognizer_1.getCommonEventProperties)(state.pointer.current)));
        }
    }
    onPointerUp(pointer) {
        var _a, _b, _c, _d;
        if (this.state) {
            const state = this.state;
            const withinMaxDistance = this.isWithinMaxDistance();
            this.state = undefined;
            window.clearTimeout(state.timeoutId);
            this.clearEventListeners(state.pointer.start);
            if (state.recognized) {
                withinMaxDistance
                    ? (_b = (_a = this.opts).onEnd) === null || _b === void 0 ? void 0 : _b.call(_a, (0, recognizer_1.getCommonEventProperties)(pointer.current))
                    : (_d = (_c = this.opts).onCancel) === null || _d === void 0 ? void 0 : _d.call(_c, (0, recognizer_1.getCommonEventProperties)(pointer.current));
            }
        }
    }
    onUnmount() {
        var _a, _b, _c;
        if ((_a = this.state) === null || _a === void 0 ? void 0 : _a.recognized) {
            (_c = (_b = this.opts).onCancel) === null || _c === void 0 ? void 0 : _c.call(_b, (0, recognizer_1.getCommonEventProperties)(this.state.pointer.current));
        }
    }
    isWithinMaxDistance() {
        var _a;
        if (!this.state) {
            return false;
        }
        const { start, current } = this.state.pointer;
        const distanceSqrd = (current.x - start.x) ** 2 + (current.y - start.y) ** 2;
        return distanceSqrd <= ((_a = this.opts.maxDistance) !== null && _a !== void 0 ? _a : 9) ** 2;
    }
}
exports.PressRecognizer = PressRecognizer;
