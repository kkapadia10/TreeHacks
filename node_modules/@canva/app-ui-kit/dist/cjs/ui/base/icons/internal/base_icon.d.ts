import * as React from 'react';
import type { Theme } from '../../theme/theme';
export type IconSize = 'tiny' | 'small' | 'medium' | 'large';
export type IconTone = 'primary' | 'secondary' | 'tertiary' | 'positive' | 'critical';
export type Glyph = string | React.ComponentType<{}>;
export type GlyphMap = {
    [k in IconSize]?: Glyph;
};
type InternalIconProps = {
    className?: string;
    style?: any;
};
export type IconProps = InternalIconProps & {
    size: IconSize;
    tone?: IconTone
};
export type OneSizeIconProps<T extends IconSize> = InternalIconProps & {
    size: T;
    tone?: IconTone;
};
export type Icon<T extends IconSize> = (props: InternalIconProps & {
    size: T;
    tone?: IconTone;
}) => JSX.Element;
type CreateType<T> = ((props: InternalIconProps & {
    size: keyof T;
    tone?: IconTone;
}) => JSX.Element) & {
    readonly sizes: T;
};
export declare function getGlyphAndClassForSize(size: IconSize, glyphs: GlyphMap): [Glyph, string];
export declare const Internal: {
    create: <T extends GlyphMap>(sources: T, followDirection?: boolean) => CreateType<T>;
    createSpinning: <T_1 extends GlyphMap>(sources: T_1, followDirection?: boolean) => CreateType<T_1>;
    createWithExtraClassname: <T_2 extends GlyphMap>(sources: T_2, extraClassName: string, followDirection?: boolean) => CreateType<T_2>;
    createThemed: <T_3 extends GlyphMap>(defaultMedia: T_3, themedMedia: { [K in keyof T_3]: Record<Theme, string> | undefined; }, followDirection?: boolean) => CreateType<T_3>;
};
export {};
