"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Internal = exports.getGlyphAndClassForSize = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const preconditions_1 = require('../../../../base/preconditions');
const classnames_1 = require("classnames");
const React = require("react");
const escape_hatch_1 = require('../../theme/escape_hatch');
const base_icon_css_1 = require("./base_icon.css");
const renderIcon = ({ className, style, glyph }) => {
    let children = null;
    let innerHtml;
    if (!glyph || typeof glyph === 'string') {
        innerHtml = { __html: glyph };
    }
    else {
        const GlyphComponent = glyph;
        children = (0, jsx_runtime_1.jsx)(GlyphComponent, {});
    }
    return ((0, jsx_runtime_1.jsx)("span", { "aria-hidden": "true", className: className, style: style, dangerouslySetInnerHTML: innerHtml, children: children }));
};
const createIconClass = (glyphs, { extraClassName, followDirection } = {}) => {
    const Component = (props) => {
        const { className, size, tone, ...restProps } = props;
        const [glyph, style] = getGlyphAndClassForSize(size, glyphs);
        const classes = (0, classnames_1.default)(className, style, extraClassName, tone ? (0, base_icon_css_1.getStyle)(tone) : undefined, { [base_icon_css_1.default.followDirection]: followDirection });
        return renderIcon({ ...restProps, glyph, className: classes });
    };
    Component.sizes = glyphs;
    Component.followDirection = followDirection;
    return Component;
};
function getGlyphAndClassForSize(size, glyphs) {
    switch (size) {
        case 'tiny':
            return [glyphs.tiny, base_icon_css_1.default.tiny];
        case 'small':
            return [glyphs.small, base_icon_css_1.default.small];
        case 'medium':
            return [glyphs.medium, base_icon_css_1.default.medium];
        case 'large':
            return [glyphs.large, base_icon_css_1.default.large];
        default:
            throw new preconditions_1.UnreachableError(size);
    }
}
exports.getGlyphAndClassForSize = getGlyphAndClassForSize;
exports.Internal = {
    create: (sources, followDirection) => createIconClass(sources, { followDirection }),
    createSpinning: (sources, followDirection) => createIconClass(sources, { extraClassName: base_icon_css_1.default.spinning, followDirection }),
    createWithExtraClassname: (sources, extraClassName, followDirection) => createIconClass(sources, { extraClassName, followDirection }),
    createThemed: (defaultMedia, themedMedia, followDirection) => {
        const Icon = (props) => {
            const media = (0, escape_hatch_1.useThemedMedia)(themedMedia);
            const sources = {
                ...defaultMedia,
                ...media,
            };
            const Component = createIconClass(sources, { followDirection });
            return (0, jsx_runtime_1.jsx)(Component, { ...props, tone: "primary" });
        };
        Icon.sizes = defaultMedia;
        Icon.followDirection = followDirection;
        return Icon;
    },
};
