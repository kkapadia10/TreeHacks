import { readProtobufStream } from './binary/deserialize';
import { writeProtobufStream } from './binary/serialize';
import type { EnumUtil, ExternalMessage, FieldConfig, InternalMessage, PropertyTypes } from './internal_types';
interface MessageCtr<T extends Record<string, FieldConfig<any>>> extends InternalMessage<any> {
    new (opts?: ConstructorParams<T>): PropertyTypes<T>;
    createUnchecked(opts?: ConstructorParams<T>): PropertyTypes<T>;
}
interface RequiredFactory<T> {
    (tag: number): FieldConfig<T>;
    (tag: number, def: T): FieldConfig<T, T | undefined>;
    (jsonFullKey: string, tag: number): FieldConfig<T>;
    (jsonFullKey: string, tag: number, def: T): FieldConfig<T, T | undefined>;
}
interface OptionalField<T> {
    (tag: number): FieldConfig<T | undefined>;
    (jsonFullKey: string, tag: number): FieldConfig<T | undefined>;
}
interface RepeatedField<T> {
    (tag: number): FieldConfig<readonly T[], readonly T[] | undefined, T>;
    (jsonFullKey: string, tag: number): FieldConfig<readonly T[], readonly T[] | undefined, T>;
}
export declare class Proto {
    static constantString<T extends string>(jsonMiniKey: string, tag: number, value: T): FieldConfig<T, T | undefined>;
    static constantString<T extends string>(jsonFullKey: string, jsonFullValue: string, tag: number, value: T): FieldConfig<T, T | undefined>;
    static constantStringWithDefault<T extends string>(jsonMiniKey: string, tag: number, value: T): FieldConfig<T, T | undefined>;
    static constantStringWithDefault<T extends string>(jsonFullKey: string, jsonFullValue: string, tag: number, value: T): FieldConfig<T, T | undefined>;
    static readonly requiredDouble: RequiredFactory<number>;
    static readonly requiredInt32: RequiredFactory<number>;
    static readonly requiredInt64: RequiredFactory<number>;
    static readonly optionalDouble: OptionalField<number>;
    static readonly optionalInt32: OptionalField<number>;
    static readonly optionalInt64: OptionalField<number>;
    static readonly repeatedDouble: RepeatedField<number>;
    static readonly repeatedInt32: RepeatedField<number>;
    static readonly repeatedInt64: RepeatedField<number>;
    static readonly requiredString: RequiredFactory<string>;
    static readonly optionalString: OptionalField<string>;
    static readonly repeatedString: RepeatedField<string>;
    static readonly requiredBoolean: RequiredFactory<boolean>;
    static readonly optionalBoolean: OptionalField<boolean>;
    static readonly repeatedBoolean: RepeatedField<boolean>;
    static requiredObject<T>(tag: number, obj: ExternalMessage<T>): FieldConfig<T>;
    static requiredObject<T>(jsonFullKey: string, tag: number, obj: ExternalMessage<T>): FieldConfig<T>;
    static optionalObject<T>(tag: number, obj: ExternalMessage<T>): FieldConfig<T | undefined, T | undefined, T>;
    static optionalObject<T>(jsonFullKey: string, tag: number, obj: ExternalMessage<T>): FieldConfig<T | undefined, T | undefined, T>;
    static repeatedObject<T>(tag: number, obj: ExternalMessage<T>): FieldConfig<readonly T[], readonly T[] | undefined, T>;
    static repeatedObject<T>(jsonFullKey: string, tag: number, obj: ExternalMessage<T>): FieldConfig<readonly T[], readonly T[] | undefined, T>;
    static requiredStringEnum<T>(tag: number, obj: EnumUtil<T>): FieldConfig<T>;
    static requiredStringEnum<T>(tag: number, obj: EnumUtil<T>, def: T): FieldConfig<T, T | undefined>;
    static requiredStringEnum<T>(jsonFullKey: string, tag: number, obj: EnumUtil<T>): FieldConfig<T>;
    static requiredStringEnum<T>(jsonFullKey: string, tag: number, obj: EnumUtil<T>, def: T): FieldConfig<T, T | undefined>;
    static optionalStringEnum<T>(tag: number, obj: EnumUtil<T>): FieldConfig<T | undefined, T | undefined, T>;
    static optionalStringEnum<T>(jsonFullKey: string, tag: number, obj: EnumUtil<T>): FieldConfig<T | undefined, T | undefined, T>;
    static repeatedStringEnum<T>(tag: number, obj: EnumUtil<T>): FieldConfig<readonly T[], readonly T[] | undefined, T>;
    static repeatedStringEnum<T>(jsonFullKey: string, tag: number, obj: EnumUtil<T>): FieldConfig<readonly T[], readonly T[] | undefined, T>;
    static readonly int32Int32Map: {
        (tag: number): FieldConfig<ReadonlyMap<number, number>, ReadonlyMap<number, number> | undefined, number>;
        (jsonFullKey: string, tag: number): FieldConfig<ReadonlyMap<number, number>, ReadonlyMap<number, number> | undefined, number>;
    };
    static readonly int32Int64Map: {
        (tag: number): FieldConfig<ReadonlyMap<number, number>, ReadonlyMap<number, number> | undefined, number>;
        (jsonFullKey: string, tag: number): FieldConfig<ReadonlyMap<number, number>, ReadonlyMap<number, number> | undefined, number>;
    };
    static readonly int32BoolMap: {
        (tag: number): FieldConfig<ReadonlyMap<number, boolean>, ReadonlyMap<number, boolean> | undefined, boolean>;
        (jsonFullKey: string, tag: number): FieldConfig<ReadonlyMap<number, boolean>, ReadonlyMap<number, boolean> | undefined, boolean>;
    };
    static readonly int32DoubleMap: {
        (tag: number): FieldConfig<ReadonlyMap<number, number>, ReadonlyMap<number, number> | undefined, number>;
        (jsonFullKey: string, tag: number): FieldConfig<ReadonlyMap<number, number>, ReadonlyMap<number, number> | undefined, number>;
    };
    static readonly int32StringMap: {
        (tag: number): FieldConfig<ReadonlyMap<number, string>, ReadonlyMap<number, string> | undefined, string>;
        (jsonFullKey: string, tag: number): FieldConfig<ReadonlyMap<number, string>, ReadonlyMap<number, string> | undefined, string>;
    };
    static readonly int32StringEnumMap: {
        <V>(tag: number, EnumUtil: EnumUtil<V>): FieldConfig<ReadonlyMap<number, V>, ReadonlyMap<number, V> | undefined, V>;
        <V_1>(jsonFullKey: string, tag: number, EnumUtil: EnumUtil<V_1>): FieldConfig<ReadonlyMap<number, V_1>, ReadonlyMap<number, V_1> | undefined, V_1>;
    };
    static readonly int32ObjectMap: {
        <V>(tag: number, Msg: ExternalMessage<V>): FieldConfig<ReadonlyMap<number, V>, ReadonlyMap<number, V> | undefined, V>;
        <V_1>(jsonFullKey: string, tag: number, Msg: ExternalMessage<V_1>): FieldConfig<ReadonlyMap<number, V_1>, ReadonlyMap<number, V_1> | undefined, V_1>;
    };
    static readonly int64Int32Map: {
        (tag: number): FieldConfig<ReadonlyMap<number, number>, ReadonlyMap<number, number> | undefined, number>;
        (jsonFullKey: string, tag: number): FieldConfig<ReadonlyMap<number, number>, ReadonlyMap<number, number> | undefined, number>;
    };
    static readonly int64Int64Map: {
        (tag: number): FieldConfig<ReadonlyMap<number, number>, ReadonlyMap<number, number> | undefined, number>;
        (jsonFullKey: string, tag: number): FieldConfig<ReadonlyMap<number, number>, ReadonlyMap<number, number> | undefined, number>;
    };
    static readonly int64BoolMap: {
        (tag: number): FieldConfig<ReadonlyMap<number, boolean>, ReadonlyMap<number, boolean> | undefined, boolean>;
        (jsonFullKey: string, tag: number): FieldConfig<ReadonlyMap<number, boolean>, ReadonlyMap<number, boolean> | undefined, boolean>;
    };
    static readonly int64DoubleMap: {
        (tag: number): FieldConfig<ReadonlyMap<number, number>, ReadonlyMap<number, number> | undefined, number>;
        (jsonFullKey: string, tag: number): FieldConfig<ReadonlyMap<number, number>, ReadonlyMap<number, number> | undefined, number>;
    };
    static readonly int64StringMap: {
        (tag: number): FieldConfig<ReadonlyMap<number, string>, ReadonlyMap<number, string> | undefined, string>;
        (jsonFullKey: string, tag: number): FieldConfig<ReadonlyMap<number, string>, ReadonlyMap<number, string> | undefined, string>;
    };
    static readonly int64StringEnumMap: {
        <V>(tag: number, EnumUtil: EnumUtil<V>): FieldConfig<ReadonlyMap<number, V>, ReadonlyMap<number, V> | undefined, V>;
        <V_1>(jsonFullKey: string, tag: number, EnumUtil: EnumUtil<V_1>): FieldConfig<ReadonlyMap<number, V_1>, ReadonlyMap<number, V_1> | undefined, V_1>;
    };
    static readonly int64ObjectMap: {
        <V>(tag: number, Msg: ExternalMessage<V>): FieldConfig<ReadonlyMap<number, V>, ReadonlyMap<number, V> | undefined, V>;
        <V_1>(jsonFullKey: string, tag: number, Msg: ExternalMessage<V_1>): FieldConfig<ReadonlyMap<number, V_1>, ReadonlyMap<number, V_1> | undefined, V_1>;
    };
    static readonly doubleInt32Map: {
        (tag: number): FieldConfig<ReadonlyMap<number, number>, ReadonlyMap<number, number> | undefined, number>;
        (jsonFullKey: string, tag: number): FieldConfig<ReadonlyMap<number, number>, ReadonlyMap<number, number> | undefined, number>;
    };
    static readonly doubleInt64Map: {
        (tag: number): FieldConfig<ReadonlyMap<number, number>, ReadonlyMap<number, number> | undefined, number>;
        (jsonFullKey: string, tag: number): FieldConfig<ReadonlyMap<number, number>, ReadonlyMap<number, number> | undefined, number>;
    };
    static readonly doubleBoolMap: {
        (tag: number): FieldConfig<ReadonlyMap<number, boolean>, ReadonlyMap<number, boolean> | undefined, boolean>;
        (jsonFullKey: string, tag: number): FieldConfig<ReadonlyMap<number, boolean>, ReadonlyMap<number, boolean> | undefined, boolean>;
    };
    static readonly doubleDoubleMap: {
        (tag: number): FieldConfig<ReadonlyMap<number, number>, ReadonlyMap<number, number> | undefined, number>;
        (jsonFullKey: string, tag: number): FieldConfig<ReadonlyMap<number, number>, ReadonlyMap<number, number> | undefined, number>;
    };
    static readonly doubleStringMap: {
        (tag: number): FieldConfig<ReadonlyMap<number, string>, ReadonlyMap<number, string> | undefined, string>;
        (jsonFullKey: string, tag: number): FieldConfig<ReadonlyMap<number, string>, ReadonlyMap<number, string> | undefined, string>;
    };
    static readonly doubleStringEnumMap: {
        <V>(tag: number, EnumUtil: EnumUtil<V>): FieldConfig<ReadonlyMap<number, V>, ReadonlyMap<number, V> | undefined, V>;
        <V_1>(jsonFullKey: string, tag: number, EnumUtil: EnumUtil<V_1>): FieldConfig<ReadonlyMap<number, V_1>, ReadonlyMap<number, V_1> | undefined, V_1>;
    };
    static readonly doubleObjectMap: {
        <V>(tag: number, Msg: ExternalMessage<V>): FieldConfig<ReadonlyMap<number, V>, ReadonlyMap<number, V> | undefined, V>;
        <V_1>(jsonFullKey: string, tag: number, Msg: ExternalMessage<V_1>): FieldConfig<ReadonlyMap<number, V_1>, ReadonlyMap<number, V_1> | undefined, V_1>;
    };
    static readonly stringInt32Map: {
        (tag: number): FieldConfig<ReadonlyMap<string, number>, ReadonlyMap<string, number> | undefined, number>;
        (jsonFullKey: string, tag: number): FieldConfig<ReadonlyMap<string, number>, ReadonlyMap<string, number> | undefined, number>;
    };
    static readonly stringInt64Map: {
        (tag: number): FieldConfig<ReadonlyMap<string, number>, ReadonlyMap<string, number> | undefined, number>;
        (jsonFullKey: string, tag: number): FieldConfig<ReadonlyMap<string, number>, ReadonlyMap<string, number> | undefined, number>;
    };
    static readonly stringBooleanMap: {
        (tag: number): FieldConfig<ReadonlyMap<string, boolean>, ReadonlyMap<string, boolean> | undefined, boolean>;
        (jsonFullKey: string, tag: number): FieldConfig<ReadonlyMap<string, boolean>, ReadonlyMap<string, boolean> | undefined, boolean>;
    };
    static readonly stringDoubleMap: {
        (tag: number): FieldConfig<ReadonlyMap<string, number>, ReadonlyMap<string, number> | undefined, number>;
        (jsonFullKey: string, tag: number): FieldConfig<ReadonlyMap<string, number>, ReadonlyMap<string, number> | undefined, number>;
    };
    static readonly stringStringMap: {
        (tag: number): FieldConfig<ReadonlyMap<string, string>, ReadonlyMap<string, string> | undefined, string>;
        (jsonFullKey: string, tag: number): FieldConfig<ReadonlyMap<string, string>, ReadonlyMap<string, string> | undefined, string>;
    };
    static readonly stringStringEnumMap: {
        <V>(tag: number, EnumUtil: EnumUtil<V>): FieldConfig<ReadonlyMap<string, V>, ReadonlyMap<string, V> | undefined, V>;
        <V_1>(jsonFullKey: string, tag: number, EnumUtil: EnumUtil<V_1>): FieldConfig<ReadonlyMap<string, V_1>, ReadonlyMap<string, V_1> | undefined, V_1>;
    };
    static readonly stringObjectMap: {
        <V>(tag: number, Msg: ExternalMessage<V>): FieldConfig<ReadonlyMap<string, V>, ReadonlyMap<string, V> | undefined, V>;
        <V_1>(jsonFullKey: string, tag: number, Msg: ExternalMessage<V_1>): FieldConfig<ReadonlyMap<string, V_1>, ReadonlyMap<string, V_1> | undefined, V_1>;
    };
    static createMessage<T extends Record<string, FieldConfig<any, any>>>(
        schema: () => T,
        options?: {
            unproducible?: true;
            dualDeserializationConfig?: DualDeserializationConfig;
        }
    ): MessageCtr<T>;
    static createOneOf<T extends Record<string, any>>(
        schema: () => Record<string, (number | ExternalMessage<any>)[]>,
        commonFields: () => Record<string, FieldConfig<unknown>>,
        options?: {
            unproducible?: true;
            dualDeserializationConfig?: DualDeserializationConfig;
            defaultCase?: () => ExternalMessage<any>;
        }
    ): InternalMessage<T>;
    static readonly writeProtobufStream: typeof writeProtobufStream;
    static readonly readProtobufStream: typeof readProtobufStream;
    static createEnumUtil<T>(
        schema: () => (number | string | {
            unproducible: true;
        })[],
        baseNumber?: number,
        options?: {
            dualDeserializationConfig?: DualDeserializationConfig;
        }
    ): EnumUtil<T> & {
        values(): readonly T[];
    };
}
type ConstructorParams<T extends Record<string, FieldConfig<any>>> = {
    [k in OptionalKeys<T>]?: T[k] extends FieldConfig<any, infer U, any> ? U : never;
} & {
    [k in RequiredKeys<T>]: T[k] extends FieldConfig<any, infer U, any> ? U : never;
};
type OptionalKeys<T extends Record<string, FieldConfig<any>>> = Exclude<{
    [k in keyof T]: T[k] extends FieldConfig<infer X, infer U, any> ? undefined extends U ? k : X extends number | boolean ? k : never : never;
}[keyof T], undefined>;
type RequiredKeys<T extends Record<string, FieldConfig<any>>> = {
    [k in keyof T]: T[k] extends FieldConfig<infer X, infer U, any> ? undefined extends U ? never : X extends number | boolean ? never : k : never;
}[keyof T];
export { ProtobufError } from './internal_types';
export declare const enum DualDeserializationConfig {
    MINI_PRIMARY_FULL_SECONDARY = 0,
    FULL_PRIMARY_MINI_SECONDARY = 1
}
